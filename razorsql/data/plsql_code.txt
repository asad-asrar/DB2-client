fn: ABS
fs: ABS(number)
fd: Returns the absolute value of a number
pt: BUILT-IN
fn: ACOS
fs: ACOS(n)
fd: Returns arc cosine of n in radians
pt: BUILT-IN
fn: ADD_MONTHS
fs: ADD_MONTHS(d,n)
fd: Returns the date d plus n months. If d is the last day of the month, or d+n would be past the end of the month, returns the last day of the month.
pt: BUILT-IN
fn: ASCII
fs: ASCII (char)
fd: Returns the number value of the first character of char
pt: BUILT-IN
fn: ASCIISTR
fs: ASCIISTR(string)
fd: Returns the ASCII string in the database language of string which can be in any character set. Non-ASCII characters are converted to their UTF-16 binary values.
pt: BUILT-IN
fn: ASIN
fs: ASIN(n)
fd: Returns arc sine of n in radians
pt: BUILT-IN
fn: ATAN
fs: ATAN(n)
fd: Returns arc tangent of n, in radians
pt: BUILT-IN
fn: ATAN2
fs: ATAN2(n,m)
fd: Returns the arc tangent of n and m, in radians
pt: BUILT-IN
fn: AVG
fs: AVG([DISTINCT|ALL] expr)
fd: Computes the average of the rows returned by expr. If the DISTINCT keyword is used, duplicate rows will be excluded from the calculation.
pt: BUILT-IN
fn: BFILENAME
fs: BFILENAME('dir','fname')
fd: Returns a locator for an LOB binary file on the filesystem. dir is the database object that is an alias for the full pathname of the file directory, fname is the actual file name.
pt: BUILT-IN
fn: BIN_TO_NUM
fs: BIN_TO_NUM(expr[,exprÉ])
fd: Converts the binary bits of expr,expr,É to a number. Example: BIN_TO_NUM(1,1,0,1) returns 13.
pt: BUILT-IN
fn: BITAND
fs: BITAND(n,m)
fd: Computes the bitwise logical AND of the bits of n and m, where n and m are nonnegative integers. Returns an integer.
pt: BUILT-IN
fn: CAST
fs: CAST(expr | [MULTISET] (subquery) AS type)
fd: Converts from one built in datatype or collection type to another
pt: BUILT-IN
fn: CEIL
fs: CEIL(n)
fd: Ceiling functionÑreturns the smallest integer >= n
pt: BUILT-IN
fn: CHARTOROWID
fs: CHARTOROWID(char)
fd: Converts char to type ROWID
pt: BUILT-IN
fn: CHR
fs: CHR (n)
fd: Returns the character whose binary value is n. Accepts USING NCHAR_CS clause
pt: BUILT-IN
fn: COALESCE
fs: COALESCE(expr[,expr,...])
fd: Returns the first non null expression in a list of expressions
pt: BUILT-IN
fn: COMPOSE
fs: COMPOSE('string')
fd: Converts string to its Unicode string equivalent in the same character set
pt: BUILT-IN
fn: CONCAT
fs: CONCAT (char1,char2)
fd: Combines two strings, char1 and char2
pt: BUILT-IN
fn: CONVERT
fs: CONVERT(char, dest_set [,source_set])
fd: Returns char converted from source_set character set to dest_set character set. If source_set is not specified, the database character set is assumed.
pt: BUILT-IN
fn: CORR
fs: CORR( expr1 , expr2 )
fd: Calculates the coefficient of correlation between expr1 and expr2
pt: BUILT-IN
fn: COS
fs: COS(n)
fd: Returns the cosine of n where n is in radians
pt: BUILT-IN
fn: COSH
fs: COSH(n)
fd: Returns the hyperbolic cosine of n where n is in radians
pt: BUILT-IN
fn: COUNT
fs: COUNT(* | [DISTINCT|ALL] expr)
fd: Returns the number of [DISTINCT] rows in the expr that are not null, or if * is specified, the total number of rows, including duplicates and nulls
pt: BUILT-IN
fn: COVAR_POP
fs: COVAR_POP( expr1, expr2 )
fd: Given a set of pairs, expr1 and expr2, where nulls are excluded, returns the population covariance
pt: BUILT-IN
fn: COVAR_SAMP
fs: COVAR_SAMP( expr1, expr2 )
fd: Given a set of pairs, expr1 and expr2, where nulls are excluded, returns the sample covariance
pt: BUILT-IN
fn: CUME_DIST
fs: CUME_DIST(expr[,expr...]) WITHIN GROUP (ORDER BY expr [DESC|ASC] [NULLS [FIRST|LAST])
fd: Given a list of values, finds and returns the cumulative distribution of a single value within that list
pt: BUILT-IN
fn: CURRENT_DATE
fs: CURRENT_DATE
fd: Returns the current Gregorian date as datatype DATE, in the session specific time zone
pt: BUILT-IN
fn: CURRENT_TIMESTAMP
fs: CURRENT_TIMESTAMP [(precision)]
fd: Returns the current date and time as datatype TIMESTAMP WITH TIME ZONE, in the session specific time zone. Precision defaults to 6 places.
pt: BUILT-IN
fn: DBTIMEZONE
fs: DBTIMEZONE
fd: Returns the time zone of the database
pt: BUILT-IN
fn: DECODE
fs: DECODE(expr,search ,result [ ,search,result...][,default])
fd: Searches expr for search, returning the specific result for each search. Returns default if search is not found.
pt: BUILT-IN
fn: DECOMPOSE
fs: DECOMPOSE(string [CANONICAL | COMPATIBILITY])
fd: Returns a unicode string decomposed from its fully normalized form. If CANONICAL(the default) is used, the result can be recomposed with COMPOSE.
pt: BUILT-IN
fn: DENSE_RANK
fs: DENSE_RANK(expr[,expr...]) WITHIN GROUP (ORDER BY expr)
fd: Given an ordered group of rows, finds and returns the rank of a single value within that group
pt: BUILT-IN
fn: DEREF
fs: DEREF(expr)
fd: Returns the object reference of expr. Without this, an the object ID of the reference would be returned.
pt: BUILT-IN
fn: DUMP
fs: DUMP(expr[,return_fmt [,start[,length]]])
fd: Returns a VARCHAR2 value with the datatype, length, and internal representation of expr, using the format of return_fmt. Returns entire internal representation unless start and optionally length are specified.
pt: BUILT-IN
fn: EMPTY_BLOB
fs: EMPTY_BLOB()
fd: Returns a locator for a BLOB, allowing you to initialize the BLOB
pt: BUILT-IN
fn: EMPTY_CLOB
fs: EMPTY_CLOB()
fd: Returns a locator for a CLOB, allowing you to initialize the CLOB
pt: BUILT-IN
fn: EXP
fs: EXP(n)
fd: Returns e to the n
pt: BUILT-IN
fn: EXTRACT
fs: EXTRACT (datetime FROM expr)
fd: datetime can be YEAR, MONTH, DAY, HOUR, MINUTE, SECOND, TIMEZONE_HOUR, TIMEZONE_MINUTE, TIMEZONE_REGION, or TIMEZONE_ABBR, and expr can be either an internal value or datetime value expression
pt: BUILT-IN
fn: FLOOR
fs: FLOOR(n)
fd: Returns the largest integer <= n
pt: BUILT-IN
fn: FROM_TZ
fs: from_tz( timestamp_value, time_zone_value )
fd: converts a TIMESTAMP value (given a TIME ZONE) to a TIMESTAMP WITH TIME ZONE value.
pt: BUILT-IN
fn: GREATEST
fs: GREATEST(expr[,expr,...])
fd: Returns the expression in the list with greatest value. All data types are implicitly converted to the data type of the first expression. Character comparisons use the database character set.
pt: BUILT-IN
fn: GROUP_ID
fs: GROUP_ID()
fd: Used in GROUP BY specification to distinguish duplicate groups
pt: BUILT-IN
fn: HEXTORAW
fs: HEXTORAW (char)
fd: Returns hexadecimal digits of char as RAW
pt: BUILT-IN
fn: INITCAP
fs: INITCAP(char)
fd: Returns char with the first character of each word in char capitalized
pt: BUILT-IN
fn: INSTR
fs: INSTR(str,substr[,pos[,occur]])
fd: ÒIn stringÓ function. Returns the position of the occurrence occur of substr in str, starting at pos. Default for pos and occur is 1. If pos is negative, search works backwards from the end of str.
pt: BUILT-IN
fn: INSTRB
fs: INSTRB(char1,char2[,n[,m]]) 
fd: The same as INSTR, except that n and the return value are expressed in bytes, rather than in characters.  For a single-byte database character set, INSTRB is equivalent to INSTR. 
pt: BUILT-IN
fn: LAST_DAY
fs: LAST_DAY(date)
fd: Returns the date of the last day of the month containing date
pt: BUILT-IN
fn: LEAST
fs: LEAST(expr[,expr,...])
fd: Returns the expression in the list with least value. All data types are implicitly converted to the data type of the first expression. Character comparisons use the database character set.
pt: BUILT-IN
fn: LENGTH
fs: LENGTH (char) 
fd: Returns the length of char
pt: BUILT-IN
fn: LENGTHB
fs: LENGTHB (char)
fd: LENGTHB returns the length of char in bytes. If char is null, this function returns null. For a single-byte database character set, LENGTHB is equivalent to LENGTH.
pt: BUILT-IN
fn: LN
fs: LN(n)
fd: Returns the natural log of n
pt: BUILT-IN
fn: LOCALTIMESTAMP
fs: LOCALTIMESTAMP [(precision)]
fd: Returns the current date and time of the session in datatype TIMESTAMP of precision
pt: BUILT-IN
fn: LOG
fs: LOG(m,n)
fd: Returns the base m log of n
pt: BUILT-IN
fn: LOWER
fs: LOWER(char)
fd: Returns char with all characters converted to lowercase
pt: BUILT-IN
fn: LPAD
fs: LPAD(char1,n[,char2])
fd: Returns char1 padded on the left to width n with character sequence in char2. Default padding is a single blank (space).
pt: BUILT-IN
fn: LTRIM
fs: LTRIM(char[,set])
fd: Returns char with initial characters in set removed from the left. Default set is a blank character (space).
pt: BUILT-IN
fn: MAX
fs: MAX([DISTINCT|ALL] expr)
fd: Returns the maximum value of expr. If the DISTINCT keyword is used, duplicate rows will be excluded from the calculation.
pt: BUILT-IN
fn: MEDIAN
fs: MEDIAN( expression ) [ OVER ( query partition clause ) ]
fd: returns the median of an expression
pt: BUILT-IN
fn: MIN
fs: MIN([DISTINCT|ALL] expr)
fd: Returns the minimum value of expr. If the DISTINCT keyword is used, duplicate rows will be excluded from the calculation.
pt: BUILT-IN
fn: MOD
fs: MOD(m,n)
fd: Returns the modulus of m, nÑthe remainder of m divided by n. (Returns m when n=0)
pt: BUILT-IN
fn: MONTHS_BETWEEN
fs: MONTHS_BETWEEN(date1, date2)
fd: Returns the number of months between date1 and date2
pt: BUILT-IN
fn: NANVL
fs: 
fd: used to return an alternate value for a BINARY_FLOAT or BINARY_NUMBER that has a Nan (Not a Number) value.
pt: BUILT-IN
fn: NEW_TIME
fs: NEW_TIME(date,zone1,zone2)
fd: Returns date converted from time zone zone1 to zone2. NLS_DATE_FORMAT must be set to a 24-hour format.
pt: BUILT-IN
fn: NEXT_DAY
fs: NEXT_DAY(date,weekday)
fd: Returns the next weekday later than date where weekday is the day of the week or its abbreviation
pt: BUILT-IN
fn: NLSSORT
fs: NLSSORT(char[,nlsparam])
fd: Returns language specific sort of char. Accepts an NLS parameter.
pt: BUILT-IN
fn: NLS_CHARSET_DECL_LEN
fs: NLS_CHARSET_DECL_LEN (bytes,set_id)
fd: Returns the declaration width of the NCHAR column of width bytes and a character set ID of set_id
pt: BUILT-IN
fn: NLS_CHARSET_ID
fs: NLS_CHARSET_ID(text)
fd: Returns the number of a character set ID with a character set name of text
pt: BUILT-IN
fn: NLS_CHARSET_NAME
fs: NLS_CHARSET_NAME(num)
fd: Returns the character set name of the character set with ID num
pt: BUILT-IN
fn: NLS_INITCAP
fs: NLS_INITCAP(char[,nlsparam])
fd: Returns char with the first character of each word in char capitalized. Accepts an NLS parameter.
pt: BUILT-IN
fn: NLS_LOWER
fs: NLS_LOWER(char[,nlsparam])
fd: Returns char with all characters converted to lowercase. Accepts an NLS parameter.
pt: BUILT-IN
fn: NLS_UPPER
fs: NLS_UPPER(char[,nlsparam])
fd: Returns char with all characters converted to uppercase. Accepts an NLS parameter.
pt: BUILT-IN
fn: NUMTODSINTERVAL
fs: NUMTODSINTERVAL (n, char)
fd: Returns n converted to an INTERVAL DAY TO SECOND literal. char can be 'DAY,' 'HOUR,' 'MINUTE,' or 'SECOND,' or an expression that resolves to one of those
pt: BUILT-IN
fn: NUMTOYMINTERVAL
fs: NUMTOYMINTERVAL (n, char)
fd: Returns n converted to an INTERVAL YEAR TO MONTH literal. char can be 'MONTH' or 'YEAR' or an expression that resolves to one of those
pt: BUILT-IN
fn: NVL
fs: NVL(expr1,expr2)
fd: Returns expr2 if expr1 is NULL, else returns expr1
pt: BUILT-IN
fn: NVL2
fs: NVL2(expr1,expr2,expr3)
fd: Returns expr2 if expr1 is NOT NULL, else returns expr3
pt: BUILT-IN
fn: POWER
fs: POWER(m,n)
fd: Returns m raised to the nth power
pt: BUILT-IN
fn: RANK
fs: RANK(expr) WITHIN GROUP (ORDER BY expr [DESC|ASC][NULLS FIRST|LAST])
fd: Returns the rank (ordering) of expr in the group of values returned by the order by expression
pt: BUILT-IN
fn: RAWTOHEX
fs: RAWTOHEX(raw)
fd: Converts raw to its hexadecimal equivalent character value
pt: BUILT-IN
fn: REF
fs: REF(correlation_var)
fd: Returns the REF value of correlation_var
pt: BUILT-IN
fn: REMAINDER
fs: REMAINDER(n1,n2)
fd: returns the remainder of the 1st argument divided by the 2nd argument.
pt: BUILT-IN
fn: REPLACE
fs: REPLACE(char[,searchstring[,replacestring]])
fd: Returns char with searchstring replaced by replacestring. Where replacestring is omitted or null, all instances of searchstring are removed. Where searchstring is omitted or null, char is returned.
pt: BUILT-IN
fn: ROUND
fs: ROUND (m[,n])
fd: Rounds m to the nearest n places. Where n is omitted, default is zero. n must be an integer
pt: BUILT-IN
fn: ROWIDTOCHAR
fs: ROWIDTOCHAR(rowid)
fd: Converts rowid to a VARCHAR2 18 characters long
pt: BUILT-IN
fn: RPAD
fs: RPAD(char1,n[,char2])
fd: Returns char1 padded on the right to width n with character sequence in char2. Default padding is a single blank (space).
pt: BUILT-IN
fn: RTRIM
fs: RTRIM(char[,set])
fd: Returns char with initial characters in set removed from the right. Default set is a blank character (space).
pt: BUILT-IN
fn: SESSIONTIMEZONE
fs: SESSIONTIMEZONE
fd: Returns the time zone of the current session, either as a time zone offset or a time zone region name, depending on the format used for the most recent ALTER SESSION statement
pt: BUILT-IN
fn: SIGN
fs: SIGN(n)
fd: For n < 0, returns Ð1, for n > 0, returns 1, for n = 0, returns 0
pt: BUILT-IN
fn: SIN
fs: SIN(n)
fd: Returns sine(n) where n is in radians
pt: BUILT-IN
fn: SINH
fs: SINH(n)
fd: Returns the hyperbolic sine(n) where n is in radians
pt: BUILT-IN
fn: SOUNDEX
fs: SOUNDEX(char)
fd: Returns the phonetic equivalent of char. Allows for searches for words that sound alike but are spelled differently.
pt: BUILT-IN
fn: SQLCODE
fs: SQLCODE
fd: returns the error number associated with the most recently raised error exception
pt: BUILT-IN
fn: SQLERRM
fs: SQLERRM
fd: returns the error message associated with the most recently raised error exception
pt: BUILT-IN
fn: SQRT
fs: SQRT(n)
fd: Returns the square root of n
pt: BUILT-IN
fn: STDDEV
fs: STDDEV([DISTINCT|ALL] expr)
fd: Returns the standard deviation of expr
pt: BUILT-IN
fn: SUBSTR
fs: SUBSTR(string,n[,m]) 
fd: Returns the substring of string, starting at position n, for a length of m (or to the end of string if m is not present).
pt: BUILT-IN
fn: SUBSTRB
fs: 
fd: Calculates the length of a string in bytes.
pt: BUILT-IN
fn: SUM
fs: SUM([DISTINCT|ALL] expr)
fd: Returns the sum of expr. Distinct eliminates duplicates from the set of values being summed.
pt: BUILT-IN
fn: SYSDATE
fs: SYSDATE
fd: Returns the current date and time
pt: BUILT-IN
fn: SYSTIMESTAMP
fs: SYSTIMESTAMP
fd: Returns the system timestamp in TIMESTAMP WITH TIME ZONE datatype
pt: BUILT-IN
fn: SYS_CONTEXT
fs: SYS_CONTEXT('namespace', 'param'[,len])
fd: Returns a VARCHAR2 with the value of param of namespace. Return is 256 bytes unless overridden by len.
pt: BUILT-IN
fn: SYS_GUID
fs: SYS_GUID()
fd: Generates and then returns a Globally Unique IDentifier (GUID) of 16 RAW bytes
pt: BUILT-IN
fn: TAN
fs: TAN(n)
fd: Returns the tangent(n) where n is in radians
pt: BUILT-IN
fn: TANH
fs: TANH(n)
fd: Returns the hyperbolic tangent(n) where n is in radians
pt: BUILT-IN
fn: TO_BLOB
fs: TO_BLOB(val)
fd: Convert from a RAW to a BLOB
pt: BUILT-IN
fn: TO_CHAR
fs: TO_CHAR(var [,format[nlsparm])
fd: Converts an NCHAR, NVARCHAR2, CLOB or NCLOB value to the underlying database character set: Converts date to VARCHAR2, using format fmt and any nlsparm: Converts num to VARCHAR2, using format fmt and any nlsparm
pt: BUILT-IN
fn: TO_CLOB
fs: TO_CLOB (lob_col|char)
fd: Converts lob_col or char to CLOB value
pt: BUILT-IN
fn: TO_DATE
fs: TO_DATE char [,fmt[nlsparm]]
fd: Converts char to a date, using the format fmt and any nlsparm. If fmt is not specified, then the default date format is used.
pt: BUILT-IN
fn: TO_DSINTERVAL
fs: TO_DSINTERVAL(char [nlsparm])
fd: Converts char to an INTERVAL DAY TO SECOND type
pt: BUILT-IN
fn: TO_LOB
fs: TO_LOB(long_col)
fd: Converts the LONG or LONG RAW value of long_col to LOB values
pt: BUILT-IN
fn: TO_MULTI_BYTE
fs: TO_MULTI_BYTE(char)
fd: Converts single byte char to multibyte characters
pt: BUILT-IN
fn: TO_NCLOB
fs: TO_NCLOB (lob_column | char)
fd: Converts char or lob_column to NCLOB data, using the national character set
pt: BUILT-IN
fn: TO_NUMBER
fs: TO_NUMBER(char[,fmt[nlsparm]])	
fd: Converts char to a number, using fmt as the format specifier
pt: BUILT-IN
fn: TO_SINGLE_BYTE
fs: TO_SINGLE_BYTE(char)
fd: Returns char with any multibyte characters converted to the corresponding single byte characters
pt: BUILT-IN
fn: TO_TIMESTAMP
fs: TO_TIMESTAMP (char[,fmt[nlsparm]]
fd: Converts char to datatype of TIMESTAMP. fmt specifies the format of char if other than the default for datatype TIMESTAMP
pt: BUILT-IN
fn: TO_TIMESTAMP_LTZ
fs: 
fd: 
pt: BUILT-IN
fn: TO_TIMESTAMP_TZ
fs: TO_TIMESTAMP_TZ (char[,fmt[nlsparm]])
fd: Converts char to datatype of TIMESTAMP WITH TIME ZONE. fmt specifies the format of char if other than the default for datatype TIMESTAMP WITH TIME ZONE.
pt: BUILT-IN
fn: TO_YMINTERVAL
fs: TO_YMINTERVA(char)
fd: Converts char to an INTERVAL YEAR TO MONTH type
pt: BUILT-IN
fn: TRANSLATE
fs: TRANSLATE(char,from,to)
fd: Returns char, with all occurrences of characters in the from string replaced with the corresponding character in the to string. If to is shorter than from, then from characters without a corresponding to character will be removed. Empty to returns NULL, not an empty string.
pt: BUILT-IN
fn: TREAT
fs: TREAT(exp AS [[REF] [schema.]] type)
fd: Changes the declared type of exp to type
pt: BUILT-IN
fn: TRIM
fs: TRIM([[LEADING|TRAILING|BOTH] [trimchar]FROM]source)
fd: Returns source with leading and/or trailing trimchars removed. Default trimchar is a blank space, default action is to remove both leading and trailing blank spaces.
pt: BUILT-IN
fn: TRUNC
fs: TRUNC (date[,fmt])
fd: Returns date truncated to the time unit specified by fmt. If fmt is omitted, date is truncated to the nearest day.
pt: BUILT-IN
fn: TZ_OFFSET
fs: TZ_OFFSET(tzname | SESSIONTIMEZONE | DBTIMEZONE | '+|-hh:mi')
fd: Returns the timezone offset
pt: BUILT-IN
fn: UID
fs: UID
fd: Returns the UID of the current session user
pt: BUILT-IN
fn: UPPER
fs: UPPER (char)
fd: Returns char with all characters converted to uppercase
pt: BUILT-IN
fn: USER
fs: USER
fd: Returns the username of the current session user
pt: BUILT-IN
fn: USERENV
fs: USERENV(param)
fd: Returns a variety of information about the current session. While deprecated in favor of SYS_CONTEXT, this is retained for backward compatibility.
pt: BUILT-IN
fn: VARIANCE
fs: VARIANCE([DISTINCT|ALL] expr)
fd: The variance of expr, with duplicates removed if DISTINCT is specified
pt: BUILT-IN
fn: VAR_POP
fs: VAR_POP(expr)
fd: Returns the population variance of expr. Nulls are removed from the calculation.
pt: BUILT-IN
fn: VAR_SAMP
fs: VAR_SAMP(expr)
fd: Returns the sample variance of expr. Nulls are removed from the calculation.
pt: BUILT-IN
fn: VSIZE
fs: VSIZE(expr)
fd: Returns the number of bytes used by the value represented by expr
pt: BUILT-IN
fn: ADD_DIRECTIVE
fs: ADD_DIRECTIVE(TASK_NAME VARCHAR2 IN,COMMAND VARCHAR2 IN,ATTR1 VARCHAR2 IN,ATTR2 VARCHAR2 IN,ATTR3 VARCHAR2 IN,ATTR4 VARCHAR2 IN,ATTR5 VARCHAR2 IN,DIRECTIVE_ID NUMBER OUT)
pt: DBMS_ADVISOR
fn: ADD_SQLWKLD_REF
fs: ADD_SQLWKLD_REF(TASK_NAME VARCHAR2 IN,WORKLOAD_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: ADD_SQLWKLD_STATEMENT
fs: ADD_SQLWKLD_STATEMENT(WORKLOAD_NAME VARCHAR2 IN,MODULE VARCHAR2 IN,ACTION VARCHAR2 IN,CPU_TIME NUMBER IN,ELAPSED_TIME NUMBER IN,DISK_READS NUMBER IN,BUFFER_GETS NUMBER IN,ROWS_PROCESSED NUMBER IN,OPTIMIZER_COST NUMBER IN,EXECUTIONS NUMBER IN,PRIORITY NUMBER IN,LAST_EXECUTION_DATE DATE IN,STAT_PERIOD NUMBER IN,USERNAME VARCHAR2 IN,SQL_TEXT CLOB IN)
pt: DBMS_ADVISOR
fn: CANCEL_TASK
fs: CANCEL_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: CHECK_PRIVS
fs: CHECK_PRIVS()
pt: DBMS_ADVISOR
fn: CHECK_READ_PRIVS
fs: CHECK_READ_PRIVS(OWNER_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: CREATE_FILE
fs: CREATE_FILE(BUFFER CLOB IN,LOCATION VARCHAR2 IN,FILENAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: CREATE_OBJECT
fs: CREATE_OBJECT(TASK_NAME VARCHAR2 IN,OBJECT_TYPE VARCHAR2 IN,ATTR1 VARCHAR2 IN,ATTR2 VARCHAR2 IN,ATTR3 VARCHAR2 IN,ATTR4 CLOB IN,OBJECT_ID NUMBER RETURN,TASK_NAME VARCHAR2 IN,OBJECT_TYPE VARCHAR2 IN,ATTR1 VARCHAR2 IN,ATTR2 VARCHAR2 IN,ATTR3 VARCHAR2 IN,ATTR4 CLOB IN,ATTR5 VARCHAR2 IN,OBJECT_ID NUMBER RETURN)
pt: DBMS_ADVISOR
fn: CREATE_SQLWKLD
fs: CREATE_SQLWKLD(WORKLOAD_NAME VARCHAR2 IN/OUT,DESCRIPTION VARCHAR2 IN,TEMPLATE VARCHAR2 IN,IS_TEMPLATE VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: CREATE_TASK
fs: CREATE_TASK(ADVISOR_NAME VARCHAR2 IN,TASK_ID NUMBER RETURN,TASK_NAME VARCHAR2 IN/OUT,TASK_DESC VARCHAR2 IN,TEMPLATE VARCHAR2 IN,IS_TEMPLATE VARCHAR2 IN,HOW_CREATED VARCHAR2 IN,ADVISOR_NAME VARCHAR2 IN,TASK_NAME VARCHAR2 IN,TASK_DESC VARCHAR2 IN,TEMPLATE VARCHAR2 IN,IS_TEMPLATE VARCHAR2 IN,HOW_CREATED VARCHAR2 IN,PARENT_TASK_NAME VARCHAR2 IN,REC_ID NUMBER IN,TASK_ID NUMBER RETURN,TASK_NAME VARCHAR2 IN/OUT,TASK_DESC VARCHAR2 IN,TEMPLATE VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: DELETE_DIRECTIVE
fs: DELETE_DIRECTIVE(TASK_NAME VARCHAR2 IN,DIRECTIVE_ID NUMBER IN)
pt: DBMS_ADVISOR
fn: DELETE_SQLWKLD
fs: DELETE_SQLWKLD(WORKLOAD_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: DELETE_SQLWKLD_REF
fs: DELETE_SQLWKLD_REF(TASK_NAME VARCHAR2 IN,WORKLOAD_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: DELETE_SQLWKLD_STATEMENT
fs: DELETE_SQLWKLD_STATEMENT(WORKLOAD_NAME VARCHAR2 IN,SQL_ID NUMBER IN,WORKLOAD_NAME VARCHAR2 IN,SEARCH VARCHAR2 IN,DELETED NUMBER RETURN)
pt: DBMS_ADVISOR
fn: DELETE_TASK
fs: DELETE_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: EXECUTE_TASK
fs: EXECUTE_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: GET_ACCESS_ADVISOR_DEFAULTS
fs: GET_ACCESS_ADVISOR_DEFAULTS(TASK_NAME VARCHAR2 OUT,TASK_ID_NUM NUMBER OUT,WORKLOAD_NAME VARCHAR2 OUT,WORK_ID_NUM NUMBER OUT)
pt: DBMS_ADVISOR
fn: GET_REC_ATTRIBUTES
fs: GET_REC_ATTRIBUTES(TASK_NAME VARCHAR2 IN,REC_ID NUMBER IN,ACTION_ID NUMBER IN,ATTRIBUTE_NAME VARCHAR2 IN,VALUE VARCHAR2 OUT,OWNER_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: IMPLEMENT_TASK
fs: IMPLEMENT_TASK(TASK_NAME VARCHAR2 IN,REC_ID NUMBER IN,EXIT_ON_ERROR PL/SQL BOOLEAN IN)
pt: DBMS_ADVISOR
fn: IMPORT_DIRECTIVES
fs: IMPORT_DIRECTIVES(TASK_NAME VARCHAR2 IN,FROM_NAME VARCHAR2 IN,IMPORT_MODE VARCHAR2 IN,ACCEPTED NUMBER OUT,REJECTED NUMBER OUT)
pt: DBMS_ADVISOR
fn: IMPORT_SQLWKLD_SCHEMA
fs: IMPORT_SQLWKLD_SCHEMA(WORKLOAD_NAME VARCHAR2 IN,IMPORT_MODE VARCHAR2 IN,PRIORITY NUMBER IN,SAVED_ROWS NUMBER OUT,FAILED_ROWS NUMBER OUT)
pt: DBMS_ADVISOR
fn: IMPORT_SQLWKLD_SQLCACHE
fs: IMPORT_SQLWKLD_SQLCACHE(WORKLOAD_NAME VARCHAR2 IN,IMPORT_MODE VARCHAR2 IN,PRIORITY NUMBER IN,SAVED_ROWS NUMBER OUT,FAILED_ROWS NUMBER OUT)
pt: DBMS_ADVISOR
fn: IMPORT_SQLWKLD_STS
fs: IMPORT_SQLWKLD_STS(WORKLOAD_NAME VARCHAR2 IN,STS_OWNER VARCHAR2 IN,STS_NAME VARCHAR2 IN,IMPORT_MODE VARCHAR2 IN,PRIORITY NUMBER IN,SAVED_ROWS NUMBER RETURN,FAILED_ROWS NUMBER RETURN,WORKLOAD_NAME VARCHAR2 IN,STS_NAME VARCHAR2 IN,IMPORT_MODE VARCHAR2 IN,PRIORITY NUMBER IN,SAVED_ROWS NUMBER RETURN,FAILED_ROWS NUMBER RETURN)
pt: DBMS_ADVISOR
fn: IMPORT_SQLWKLD_SUMADV
fs: IMPORT_SQLWKLD_SUMADV(WORKLOAD_NAME VARCHAR2 IN,IMPORT_MODE VARCHAR2 IN,PRIORITY NUMBER IN,SUMADV_ID NUMBER IN,SAVED_ROWS NUMBER OUT,FAILED_ROWS NUMBER OUT)
pt: DBMS_ADVISOR
fn: IMPORT_SQLWKLD_USER
fs: IMPORT_SQLWKLD_USER(WORKLOAD_NAME VARCHAR2 IN,IMPORT_MODE VARCHAR2 IN,OWNER_NAME VARCHAR2 IN,TABLE_NAME VARCHAR2 IN,SAVED_ROWS NUMBER OUT,FAILED_ROWS NUMBER OUT)
pt: DBMS_ADVISOR
fn: INTERRUPT_TASK
fs: INTERRUPT_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: MARK_RECOMMENDATION
fs: MARK_RECOMMENDATION(TASK_NAME VARCHAR2 IN,ID NUMBER IN,ACTION VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: QUICK_TUNE
fs: QUICK_TUNE(ADVISOR_NAME VARCHAR2 IN,TASK_NAME VARCHAR2 IN,ATTR1 CLOB IN,ATTR2 VARCHAR2 IN,ATTR3 NUMBER IN,TEMPLATE VARCHAR2 IN,IMPLEMENT PL/SQL BOOLEAN IN,DESCRIPTION VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: RESET_SQLWKLD
fs: RESET_SQLWKLD(WORKLOAD_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: RESET_TASK
fs: RESET_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: RESUME_TASK
fs: RESUME_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: SETUP_REPOSITORY
fs: SETUP_REPOSITORY()
pt: DBMS_ADVISOR
fn: SETUP_USER_ENVIRONMENT
fs: SETUP_USER_ENVIRONMENT(ADVISOR_NAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: SET_DEFAULT_SQLWKLD_PARAMETER
fs: SET_DEFAULT_SQLWKLD_PARAMETER(PARAMETER VARCHAR2 IN,VALUE VARCHAR2 IN,PARAMETER VARCHAR2 IN,VALUE NUMBER IN)
pt: DBMS_ADVISOR
fn: SET_DEFAULT_TASK_PARAMETER
fs: SET_DEFAULT_TASK_PARAMETER(ADVISOR_NAME VARCHAR2 IN,PARAMETER VARCHAR2 IN,VALUE VARCHAR2 IN,ADVISOR_NAME VARCHAR2 IN,PARAMETER VARCHAR2 IN,VALUE NUMBER IN)
pt: DBMS_ADVISOR
fn: SET_SQLWKLD_PARAMETER
fs: SET_SQLWKLD_PARAMETER(WORKLOAD_NAME VARCHAR2 IN,PARAMETER VARCHAR2 IN,VALUE VARCHAR2 IN,WORKLOAD_NAME VARCHAR2 IN,PARAMETER VARCHAR2 IN,VALUE NUMBER IN)
pt: DBMS_ADVISOR
fn: SET_TASK_PARAMETER
fs: SET_TASK_PARAMETER(TASK_NAME VARCHAR2 IN,PARAMETER VARCHAR2 IN,VALUE VARCHAR2 IN,TASK_NAME VARCHAR2 IN,PARAMETER VARCHAR2 IN,VALUE NUMBER IN)
pt: DBMS_ADVISOR
fn: TUNE_MVIEW
fs: TUNE_MVIEW(TASK_NAME VARCHAR2 IN/OUT,MV_CREATE_STMT CLOB IN)
pt: DBMS_ADVISOR
fn: UPDATE_DIRECTIVE
fs: UPDATE_DIRECTIVE(TASK_NAME VARCHAR2 IN,DIRECTIVE_ID NUMBER IN,COMMAND VARCHAR2 IN,ATTR1 VARCHAR2 IN,ATTR2 VARCHAR2 IN,ATTR3 VARCHAR2 IN,ATTR4 VARCHAR2 IN,ATTR5 CLOB IN)
pt: DBMS_ADVISOR
fn: UPDATE_OBJECT
fs: UPDATE_OBJECT(TASK_NAME VARCHAR2 IN,OBJECT_ID NUMBER IN,ATTR1 VARCHAR2 IN,ATTR2 VARCHAR2 IN,ATTR3 VARCHAR2 IN,ATTR4 CLOB IN,ATTR5 VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: UPDATE_REC_ATTRIBUTES
fs: UPDATE_REC_ATTRIBUTES(TASK_NAME VARCHAR2 IN,REC_ID NUMBER IN,ACTION_ID NUMBER IN,ATTRIBUTE_NAME VARCHAR2 IN,VALUE VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: UPDATE_SQLWKLD_ATTRIBUTES
fs: UPDATE_SQLWKLD_ATTRIBUTES(WORKLOAD_NAME VARCHAR2 IN,NEW_NAME VARCHAR2 IN,DESCRIPTION VARCHAR2 IN,READ_ONLY VARCHAR2 IN,IS_TEMPLATE VARCHAR2 IN,HOW_CREATED VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: UPDATE_SQLWKLD_STATEMENT
fs: UPDATE_SQLWKLD_STATEMENT(WORKLOAD_NAME VARCHAR2 IN,SQL_ID NUMBER IN,APPLICATION VARCHAR2 IN,ACTION VARCHAR2 IN,PRIORITY NUMBER IN,USERNAME VARCHAR2 IN,WORKLOAD_NAME VARCHAR2 IN,SEARCH VARCHAR2 IN,UPDATED NUMBER RETURN,APPLICATION VARCHAR2 IN,ACTION VARCHAR2 IN,PRIORITY NUMBER IN,USERNAME VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: UPDATE_TASK_ATTRIBUTES
fs: UPDATE_TASK_ATTRIBUTES(TASK_NAME VARCHAR2 IN,NEW_NAME VARCHAR2 IN,DESCRIPTION VARCHAR2 IN,READ_ONLY VARCHAR2 IN,IS_TEMPLATE VARCHAR2 IN,HOW_CREATED VARCHAR2 IN)
pt: DBMS_ADVISOR
fn: READ_CLIENT_INFO
fs: READ_CLIENT_INFO(CLIENT_INFO VARCHAR2 OUT)
pt: DBMS_APPLICATION_INFO
fn: READ_MODULE
fs: READ_MODULE(MODULE_NAME VARCHAR2 OUT,ACTION_NAME VARCHAR2 OUT)
pt: DBMS_APPLICATION_INFO
fn: SET_ACTION
fs: SET_ACTION(ACTION_NAME VARCHAR2 IN)
pt: DBMS_APPLICATION_INFO
fn: SET_CLIENT_INFO
fs: SET_CLIENT_INFO(CLIENT_INFO VARCHAR2 IN)
pt: DBMS_APPLICATION_INFO
fn: SET_MODULE
fs: SET_MODULE(MODULE_NAME VARCHAR2 IN,ACTION_NAME VARCHAR2 IN)
pt: DBMS_APPLICATION_INFO
fn: SET_SESSION_LONGOPS
fs: SET_SESSION_LONGOPS(RINDEX BINARY_INTEGER IN/OUT,SLNO BINARY_INTEGER IN/OUT,OP_NAME VARCHAR2 IN,TARGET BINARY_INTEGER IN,CONTEXT BINARY_INTEGER IN,SOFAR NUMBER IN,TOTALWORK NUMBER IN,TARGET_DESC VARCHAR2 IN,UNITS VARCHAR2 IN)
pt: DBMS_APPLICATION_INFO
fn: AQ$_ADD_SUBSCRIBER
fs: AQ$_ADD_SUBSCRIBER(QUEUE VARCHAR2 IN,SUBSCRIBER OBJECT IN,RULE VARCHAR2 IN,TRANSFORMATION VARCHAR2 IN,SECURE_Q BINARY_INTEGER IN,DELIVERY_MODE BINARY_INTEGER IN)
pt: DBMS_AQJMS
fn: AQ$_ALTER_SUBSCRIBER
fs: AQ$_ALTER_SUBSCRIBER(QUEUE VARCHAR2 IN,SUBSCRIBER SYS.AQ$_AGENT IN,RULE VARCHAR2 IN,QUEUE VARCHAR2 IN,SUBSCRIBER SYS.AQ$_AGENT IN,RULE VARCHAR2 IN,TRANSFORMATION VARCHAR2 IN,SECURE_Q BINARY_INTEGER IN)
pt: DBMS_AQJMS
fn: AQ$_GET_PROP_STAT
fs: AQ$_GET_PROP_STAT(QID BINARY_INTEGER IN,DB_LINK VARCHAR2 IN,SEQUENCE_NUMBER BINARY_INTEGER OUT)
pt: DBMS_AQJMS
fn: AQ$_GET_TRANS_TYPE
fs: AQ$_GET_TRANS_TYPE(TRANS_SCHEMA VARCHAR2 IN,TRANS_NAME VARCHAR2 IN,SRC_TYPE VARCHAR2 OUT,DEST_TYPE VARCHAR2 OUT)
pt: DBMS_AQJMS
fn: AQ$_REGISTER
fs: AQ$_REGISTER(SCHEMA VARCHAR2 IN,SUBNAME VARCHAR2 IN,PROTOCOL VARCHAR2 IN,HOST VARCHAR2 IN,PORT_NO VARCHAR2 IN,PRESENTATION BINARY_INTEGER IN,VERSION BINARY_INTEGER IN)
pt: DBMS_AQJMS
fn: AQ$_REMOVE_SUBSCRIBER
fs: AQ$_REMOVE_SUBSCRIBER(QUEUE VARCHAR2 IN,SUBSCRIBER OBJECT IN,SECURE_Q BINARY_INTEGER IN)
pt: DBMS_AQJMS
fn: AQ$_UNREGISTER
fs: AQ$_UNREGISTER(SCHEMA VARCHAR2 IN,SUBNAME VARCHAR2 IN,PROTOCOL VARCHAR2 IN,HOST VARCHAR2 IN,PORT_NO VARCHAR2 IN)
pt: DBMS_AQJMS
fn: AQ$_UPDATE_PROP_STAT
fs: AQ$_UPDATE_PROP_STAT(QID BINARY_INTEGER IN,DB_LINK VARCHAR2 IN,SEQUENCE_NUMBER BINARY_INTEGER IN,STATUS_CODE BINARY_INTEGER IN)
pt: DBMS_AQJMS
fn: GET_DB_USERNAME_FOR_AGENT
fs: GET_DB_USERNAME_FOR_AGENT(AGENT_NAME VARCHAR2 IN,OWNER_NAME VARCHAR2 IN,QUEUE_NAME VARCHAR2 IN,OPERATION BINARY_INTEGER IN,CURR_DB_USER VARCHAR2 IN,DB_USERNAME VARCHAR2 OUT,ENQ_PRIV BINARY_INTEGER OUT,DEQ_PRIV BINARY_INTEGER OUT)
pt: DBMS_AQJMS
fn: SUBSCRIBER_EXISTS
fs: SUBSCRIBER_EXISTS(QUEUE_NAME VARCHAR2 IN,SUBSCRIBER SYS.AQ$_AGENT IN,IN_SUBSCR_TYPE NUMBER IN,SUBSCR_TYPE NUMBER RETURN,RULE_NAME VARCHAR2 RETURN,TRANS_NAME VARCHAR2 RETURN,RULESET VARCHAR2 RETURN,RESULT NUMBER RETURN,QUEUE_NAME VARCHAR2 IN,SUBSCRIBER SYS.AQ$_AGENT IN,IN_SUBSCR_TYPE NUMBER IN,SUBSCR_TYPE NUMBER RETURN,RULE_NAME VARCHAR2 RETURN,TRANS_NAME VARCHAR2 RETURN,RULESET VARCHAR2 RETURN,NEGATIVE_RULESET VARCHAR2 RETURN,RESULT NUMBER RETURN)
pt: DBMS_AQJMS
fn: BUMP_TID_SEQUENCE
fs: BUMP_TID_SEQUENCE(MINVAL NUMBER IN)
pt: DBMS_AQ_IMP_INTERNAL
fn: CLEANUP_SCHEMA_IMPORT
fs: CLEANUP_SCHEMA_IMPORT()
pt: DBMS_AQ_IMP_INTERNAL
fn: IMPORT_CMT_TIME_TABLE
fs: IMPORT_CMT_TIME_TABLE(IOT VARCHAR2 IN)
pt: DBMS_AQ_IMP_INTERNAL
fn: IMPORT_HISTORY_TABLE
fs: IMPORT_HISTORY_TABLE(IOT VARCHAR2 IN)
pt: DBMS_AQ_IMP_INTERNAL
fn: IMPORT_INDEX_TABLE
fs: IMPORT_INDEX_TABLE(IOT VARCHAR2 IN)
pt: DBMS_AQ_IMP_INTERNAL
fn: IMPORT_QUEUE
fs: IMPORT_QUEUE(OID RAW IN,QUEUE_TABLE VARCHAR2 IN,QUEUE VARCHAR2 IN,QUEUE_TYPE NUMBER IN,MAX_RETRIES NUMBER IN,RETRY_DELAY NUMBER IN,QUEUE_FLAGS NUMBER IN,RETENTION NUMBER IN,COMMENT VARCHAR2 IN)
pt: DBMS_AQ_IMP_INTERNAL
fn: IMPORT_QUEUE_TABLE
fs: IMPORT_QUEUE_TABLE(TABLE_NAME VARCHAR2 IN,USERDATA_TYPE NUMBER IN,TABLE_FLAGS NUMBER IN,SORT_COLS NUMBER IN,PRIMARY_INSTANCE BINARY_INTEGER IN,SECONDARY_INSTANCE BINARY_INTEGER IN,COMMENT VARCHAR2 IN,DB_VERSION BINARY_INTEGER IN,TIMEZONE VARCHAR2 IN)
pt: DBMS_AQ_IMP_INTERNAL
fn: IMPORT_SIGNATURE_TABLE
fs: IMPORT_SIGNATURE_TABLE(IOT VARCHAR2 IN)
pt: DBMS_AQ_IMP_INTERNAL
fn: IMPORT_SUBSCRIBER_TABLE
fs: IMPORT_SUBSCRIBER_TABLE(SUBSCRIBER_TABLE VARCHAR2 IN)
pt: DBMS_AQ_IMP_INTERNAL
fn: IMPORT_TIMEMGR_TABLE
fs: IMPORT_TIMEMGR_TABLE(IOT VARCHAR2 IN)
pt: DBMS_AQ_IMP_INTERNAL
fn: CREATE_PROC_BUFFERED_MCQ
fs: CREATE_PROC_BUFFERED_MCQ(PROC_NAME VARCHAR2 IN,QT_SCHEMA VARCHAR2 IN,QT_NAME VARCHAR2 IN,INVOKER VARCHAR2 IN)
pt: DBMS_AQ_INV
fn: CREATE_PROC_BUFFERED_SCQ
fs: CREATE_PROC_BUFFERED_SCQ(PROC_NAME VARCHAR2 IN,QT_SCHEMA VARCHAR2 IN,QT_NAME VARCHAR2 IN,INVOKER VARCHAR2 IN)
pt: DBMS_AQ_INV
fn: DELETE_PURGE_ELIGIBLE_MESSAGES
fs: DELETE_PURGE_ELIGIBLE_MESSAGES(QT_SCHEMA VARCHAR2 IN,QT_NAME VARCHAR2 IN,SUB_ID_ARR PL/SQL TABLE IN,ENQ_TIME_ARR PL/SQL TABLE IN,STEP_NO_ARR PL/SQL TABLE IN,MSG_PRTY_ARR PL/SQL TABLE IN,CHAIN_NO_ARR PL/SQL TABLE IN,LOCAL_ORDER_NO_ARR PL/SQL TABLE IN,MSG_ID_ARR PL/SQL TABLE IN,QT_SORT_COLS NUMBER IN)
pt: DBMS_AQ_INV
fn: GET_PAYLOAD_TYPE
fs: GET_PAYLOAD_TYPE(QT_SCHEMA VARCHAR2 IN,QT_NAME VARCHAR2 IN,PAYLOAD_TYPE VARCHAR2 OUT)
pt: DBMS_AQ_INV
fn: INTERNAL_PURGE_QUEUE_TABLE
fs: INTERNAL_PURGE_QUEUE_TABLE(QT_SCHEMA VARCHAR2 IN,QT_NAME VARCHAR2 IN,QT_FLAGS BINARY_INTEGER IN,TOBJNO BINARY_INTEGER IN,QT_SORT_COLS BINARY_INTEGER IN,DELIVERY_MODE BINARY_INTEGER IN,PURGE_CONDITION VARCHAR2 IN,INVOKER VARCHAR2 IN)
pt: DBMS_AQ_INV
fn: PURGE_BUFFERED_MCQ_TABLE
fs: PURGE_BUFFERED_MCQ_TABLE(QT_SCHEMA VARCHAR2 IN,QT_NAME VARCHAR2 IN,QT_OBJNO NUMBER IN,QT_FLAGS NUMBER IN,PURGE_CONDITION VARCHAR2 IN,INVOKER VARCHAR2 IN)
pt: DBMS_AQ_INV
fn: PURGE_BUFFERED_SCQ_TABLE
fs: PURGE_BUFFERED_SCQ_TABLE(QT_SCHEMA VARCHAR2 IN,QT_NAME VARCHAR2 IN,QT_OBJNO VARCHAR2 IN,PURGE_CONDITION VARCHAR2 IN,INVOKER VARCHAR2 IN)
pt: DBMS_AQ_INV
fn: PURGE_PERSISTENT_MCQ_TABLE
fs: PURGE_PERSISTENT_MCQ_TABLE(QT_SCHEMA VARCHAR2 IN,QT_NAME VARCHAR2 IN,PURGE_CONDITION VARCHAR2 IN,QT_FLAGS NUMBER IN,QT_SORT_COLS NUMBER IN)
pt: DBMS_AQ_INV
fn: PURGE_PERSISTENT_SCQ_TABLE
fs: PURGE_PERSISTENT_SCQ_TABLE(QT_SCHEMA VARCHAR2 IN,QT_NAME VARCHAR2 IN,PURGE_CONDITION VARCHAR2 IN)
pt: DBMS_AQ_INV
fn: WRITE_TRACE
fs: WRITE_TRACE(MESSAGE VARCHAR2 IN,EVENT_LEVEL BINARY_INTEGER IN,TIME_INFO PL/SQL BOOLEAN IN)
pt: DBMS_AQ_INV
fn: ADD_DIMENSION_SOURCE
fs: ADD_DIMENSION_SOURCE(DIMNAME VARCHAR2 IN,COLNAME VARCHAR2 IN,SOURCES TABLE IN/OUT,SRCVAL VARCHAR2 IN,DIMTYPE NUMBER IN,HIERCOLS TABLE IN,PARTBY NUMBER IN)
pt: DBMS_AW
fn: ADVISE_CUBE
fs: ADVISE_CUBE(AGGMAP VARCHAR2 IN,PCT BINARY_INTEGER IN,COMPRESSED PL/SQL BOOLEAN IN)
pt: DBMS_AW
fn: ADVISE_REL
fs: ADVISE_REL(RELNAME VARCHAR2 IN,VALUESET VARCHAR2 IN,PCT BINARY_INTEGER IN,COMPRESSED PL/SQL BOOLEAN IN)
pt: DBMS_AW
fn: ADVISE_SPARSITY
fs: ADVISE_SPARSITY(FACT VARCHAR2 IN,CUBENAME VARCHAR2 IN,DIMSOURCES TABLE IN,ADVMODE BINARY_INTEGER IN,PARTBY BINARY_INTEGER IN,ADVTABLE VARCHAR2 IN)
pt: DBMS_AW
fn: AW_ATTACH
fs: AW_ATTACH(NAME VARCHAR2 IN,FORWRITE PL/SQL BOOLEAN IN,CREATEAW PL/SQL BOOLEAN IN,ATTARGS VARCHAR2 IN,TBSPACE VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN,FORWRITE PL/SQL BOOLEAN IN,CREATEAW PL/SQL BOOLEAN IN,ATTARGS VARCHAR2 IN,TBSPACE VARCHAR2 IN)
pt: DBMS_AW
fn: AW_COPY
fs: AW_COPY(OLDNAME VARCHAR2 IN,NEWNAME VARCHAR2 IN,NEWTABLESPACE VARCHAR2 IN,PARTNUM NUMBER IN)
pt: DBMS_AW
fn: AW_CREATE
fs: AW_CREATE(NAME VARCHAR2 IN,TBSPACE VARCHAR2 IN,PARTNUM NUMBER IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN,TBSPACE VARCHAR2 IN)
pt: DBMS_AW
fn: AW_DELETE
fs: AW_DELETE(NAME VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN)
pt: DBMS_AW
fn: AW_DETACH
fs: AW_DETACH(NAME VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN)
pt: DBMS_AW
fn: AW_RENAME
fs: AW_RENAME(INNAME VARCHAR2 IN,OUTNAME VARCHAR2 IN)
pt: DBMS_AW
fn: AW_UPDATE
fs: AW_UPDATE(NAME VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN)
pt: DBMS_AW
fn: CONVERT
fs: CONVERT( VARCHAR2 RESULT, TABLE RESULT,AWNAME VARCHAR2 IN, VARCHAR2 RESULT,XMLDATA VARCHAR2 IN,SRC VARCHAR2 IN, SYS.KU$_MULTI_DDL RETURN,HANDLE NUMBER IN,DESTCSET VARCHAR2 IN,FLAG NUMBER IN,DOCUMENT UNDEFINED IN, VARCHAR2 RESULT, CLOB RESULT,OLDNAME VARCHAR2 IN, TABLE RESULT,SRC VARCHAR2 IN,XMLDATA CLOB IN,NEWNAME VARCHAR2 IN, SYS.KU$_MULTI_DDL RETURN,NEWTABLESPACE VARCHAR2 IN,DESTCSET VARCHAR2 IN,FLAG NUMBER IN,HANDLE NUMBER IN,SRCCSET VARCHAR2 IN,DOCUMENT CLOB IN, CLOB RESULT, CLOB RESULT,HANDLE NUMBER IN,SRCSTR CLOB IN,DOCUMENT CLOB IN,DSTCSN VARCHAR2 IN,OFFSETS PL/SQL TABLE RETURN, PL/SQL TABLE RETURN, PL/SQL RECORD RETURN,POS BINARY_INTEGER RETURN,LEN BINARY_INTEGER RETURN,GRANTOR VARCHAR2 RETURN,PATCHTABLEMETADATA VARCHAR2 RETURN,HANDLE NUMBER IN, CLOB RESULT,DOCUMENT UNDEFINED IN,SRCSTR CLOB IN,RESULT CLOB IN/OUT,DSTCSN VARCHAR2 IN,SRCCSN VARCHAR2 IN,HANDLE NUMBER IN,DOCUMENT CLOB IN,RESULT CLOB IN/OUT, RAW RESULT,R RAW IN,TO_CHARSET VARCHAR2 IN,FROM_CHARSET VARCHAR2 IN)
pt: DBMS_AW
fn: EIF_BLOB_IN
fs: EIF_BLOB_IN(NAME VARCHAR2 IN,IMPLOB BLOB IN,DATADFNS BINARY_INTEGER IN,OBJLIST TABLE IN, VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN,IMPLOB BLOB IN,DATADFNS BINARY_INTEGER IN,OBJLIST TABLE IN, VARCHAR2 IN)
pt: DBMS_AW
fn: EIF_DELETE
fs: EIF_DELETE(EIF TABLE IN/OUT)
pt: DBMS_AW
fn: EIF_IN
fs: EIF_IN(NAME VARCHAR2 IN,IMPEIF TABLE IN, BLOB IN,DATADFNS BINARY_INTEGER IN,OBJLIST TABLE IN, VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN,IMPEIF TABLE IN, BLOB IN,DATADFNS BINARY_INTEGER IN,OBJLIST TABLE IN, VARCHAR2 IN)
pt: DBMS_AW
fn: EIF_OUT
fs: EIF_OUT(NAME VARCHAR2 IN,EXPEIF TABLE RETURN, BLOB RETURN,OBJLIST TABLE IN, VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN,EXPEIF TABLE RETURN, BLOB RETURN,OBJLIST TABLE IN, VARCHAR2 IN)
pt: DBMS_AW
fn: EXECUTE
fs: EXECUTE(CMD VARCHAR2 IN)
pt: DBMS_AW
fn: INFILE
fs: INFILE(IFILENAME VARCHAR2 IN)
pt: DBMS_AW
fn: INITDRIVER
fs: INITDRIVER()
pt: DBMS_AW
fn: INTERP_SILENT
fs: INTERP_SILENT(CMD VARCHAR2 IN)
pt: DBMS_AW
fn: MOVE_AWMETA
fs: MOVE_AWMETA(DEST_TBS VARCHAR2 IN)
pt: DBMS_AW
fn: PRINTLOG
fs: PRINTLOG(LOG_CLOB CLOB IN)
pt: DBMS_AW
fn: RUN
fs: RUN(CMD VARCHAR2 IN,SILENT PL/SQL BOOLEAN IN,CMD CLOB IN,SILENT PL/SQL BOOLEAN IN,CMD VARCHAR2 IN,OUTPUT VARCHAR2 RETURN,CMD VARCHAR2 IN,OUTPUT CLOB IN/OUT,CMD CLOB IN,OUTPUT VARCHAR2 RETURN,CMD CLOB IN,OUTPUT CLOB IN/OUT,JOB BINARY_INTEGER IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_AW
fn: SHUTDOWN
fs: SHUTDOWN(FORCE PL/SQL BOOLEAN IN)
pt: DBMS_AW
fn: SPARSITY_ADVICE_TABLE
fs: SPARSITY_ADVICE_TABLE(TBLNAME VARCHAR2 IN)
pt: DBMS_AW
fn: STARTUP
fs: STARTUP()
pt: DBMS_AW
fn: TOGGLEDBCREATE
fs: TOGGLEDBCREATE()
pt: DBMS_AW
fn: ALTER_LOB_SIZE
fs: ALTER_LOB_SIZE(NEWSIZE NUMBER IN)
pt: DBMS_AW_EXP
fn: IMPORT_BEGIN100
fs: IMPORT_BEGIN100(SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN)
pt: DBMS_AW_EXP
fn: IMPORT_BEGIN92
fs: IMPORT_BEGIN92(SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN)
pt: DBMS_AW_EXP
fn: IMPORT_CHUNK100
fs: IMPORT_CHUNK100(AMT BINARY_INTEGER IN,STREAM VARCHAR2 IN)
pt: DBMS_AW_EXP
fn: IMPORT_CHUNK92
fs: IMPORT_CHUNK92(AMT BINARY_INTEGER IN,STREAM VARCHAR2 IN)
pt: DBMS_AW_EXP
fn: IMPORT_FINISH100
fs: IMPORT_FINISH100(SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN)
pt: DBMS_AW_EXP
fn: IMPORT_FINISH92
fs: IMPORT_FINISH92(SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN)
pt: DBMS_AW_EXP
fn: TRANS_BEGIN102
fs: TRANS_BEGIN102(AWNAME VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAMESPACE BINARY_INTEGER IN,TYPE BINARY_INTEGER IN)
pt: DBMS_AW_EXP
fn: TRANS_CHUNK102
fs: TRANS_CHUNK102(AMT BINARY_INTEGER IN,STREAM VARCHAR2 IN)
pt: DBMS_AW_EXP
fn: TRANS_FINISH102
fs: TRANS_FINISH102(AWNAME VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAMESPACE BINARY_INTEGER IN,TYPE BINARY_INTEGER IN)
pt: DBMS_AW_EXP
fn: ABORTIDENTITY
fs: ABORTIDENTITY(IDENTITY PL/SQL RECORD IN/OUT)
pt: DBMS_CRYPTO_TOOLKIT
fn: CLOSEPERSONA
fs: CLOSEPERSONA(PERSONA PL/SQL RECORD IN/OUT)
pt: DBMS_CRYPTO_TOOLKIT
fn: CLOSEWALLET
fs: CLOSEWALLET(WALLET PL/SQL RECORD IN/OUT,WALLET RAW IN/OUT)
pt: DBMS_CRYPTO_TOOLKIT
fn: CREATEIDENTITY
fs: CREATEIDENTITY(IDENTITYTYPE BINARY_INTEGER IN,PUBLIC_IDENTITY VARCHAR2 IN,ALIAS VARCHAR2 IN,LONGER_DESCRIPTION VARCHAR2 IN,TRUST_QUALIFIER VARCHAR2 IN,IDENTITY PL/SQL RECORD OUT)
pt: DBMS_CRYPTO_TOOLKIT
fn: CREATEPERSONA
fs: CREATEPERSONA(CIPHER_TYPE BINARY_INTEGER IN,PRIVATE_INFORMATION PL/SQL RECORD IN,PRL VARCHAR2 IN,ALIAS VARCHAR2 IN,LONGER_DESCRIPTION VARCHAR2 IN,PERSONA PL/SQL RECORD OUT)
pt: DBMS_CRYPTO_TOOLKIT
fn: CREATEWALLET
fs: CREATEWALLET(PASSWORD VARCHAR2 IN,WALLET PL/SQL RECORD IN/OUT,WALLET RAW IN/OUT,WALLET_RESOURCE_LOCATOR VARCHAR2 IN,PASSWORD VARCHAR2 IN,WALLET_RESOURCE_LOCATOR VARCHAR2 IN)
pt: DBMS_CRYPTO_TOOLKIT
fn: DESTROYWALLET
fs: DESTROYWALLET(PASSWORD VARCHAR2 IN,WALLET_RESOURCE_LOCATOR VARCHAR2 IN)
pt: DBMS_CRYPTO_TOOLKIT
fn: INITIALIZE
fs: INITIALIZE(VAL BINARY_INTEGER IN, VARCHAR2 RESULT, NUMBER RESULT,DEBUG_SESSION_ID VARCHAR2 IN,DIAGNOSTICS BINARY_INTEGER IN,DEBUG_ROLE VARCHAR2 IN,DEBUG_ROLE_PWD VARCHAR2 IN)
pt: DBMS_CRYPTO_TOOLKIT
fn: OPENPERSONA
fs: OPENPERSONA(PERSONA PL/SQL RECORD IN/OUT)
pt: DBMS_CRYPTO_TOOLKIT
fn: OPENWALLET
fs: OPENWALLET(PASSWORD VARCHAR2 IN,WALLET PL/SQL RECORD IN/OUT,WALLET RAW IN/OUT,PERSONA_LIST PL/SQL TABLE RETURN, PL/SQL RECORD RETURN,ALIAS VARCHAR2 RETURN,COMMENT VARCHAR2 RETURN,IDENTITY RAW RETURN,PERSONA RAW RETURN,WALLET_RESOURCE_LOCATOR VARCHAR2 IN,PASSWORD VARCHAR2 IN,PERSONA_LIST PL/SQL TABLE RETURN, PL/SQL RECORD RETURN,ALIAS VARCHAR2 RETURN,COMMENT VARCHAR2 RETURN,IDENTITY RAW RETURN,PERSONA RAW RETURN,WALLET_RESOURCE_LOCATOR VARCHAR2 IN)
pt: DBMS_CRYPTO_TOOLKIT
fn: REMOVEIDENTITY
fs: REMOVEIDENTITY(IDENTITY PL/SQL RECORD OUT)
pt: DBMS_CRYPTO_TOOLKIT
fn: REMOVEPERSONA
fs: REMOVEPERSONA(PERSONA PL/SQL RECORD IN/OUT)
pt: DBMS_CRYPTO_TOOLKIT
fn: SEEDRANDOM
fs: SEEDRANDOM(PERSONA PL/SQL RECORD IN,PERSONA RAW IN,SEED RAW IN,PERSONA PL/SQL RECORD IN,PERSONA RAW IN,SEED VARCHAR2 IN,PERSONA PL/SQL RECORD IN,PERSONA RAW IN,SEED BINARY_INTEGER IN)
pt: DBMS_CRYPTO_TOOLKIT
fn: STOREPERSONA
fs: STOREPERSONA(PERSONA PL/SQL RECORD IN/OUT,PERSONA RAW IN/OUT,WALLET PL/SQL RECORD IN/OUT,WALLET RAW IN/OUT,PERSONA PL/SQL RECORD IN/OUT,PERSONA RAW IN/OUT)
pt: DBMS_CRYPTO_TOOLKIT
fn: STORETRUSTEDIDENTITY
fs: STORETRUSTEDIDENTITY(IDENTITY PL/SQL RECORD IN/OUT,PERSONA PL/SQL RECORD IN)
pt: DBMS_CRYPTO_TOOLKIT
fn: TERMINATE
fs: TERMINATE()
pt: DBMS_CRYPTO_TOOLKIT
fn: VERIFYDETACHED
fs: VERIFYDETACHED(PERSONA PL/SQL RECORD IN,PERSONA RAW IN,DATA RAW IN,SIGNATURE RAW IN,VERIFIED PL/SQL BOOLEAN RETURN,VALIDATED PL/SQL BOOLEAN RETURN,SIGNING_PARTY_IDENTITY PL/SQL RECORD RETURN,DESCRIPTOR RAW RETURN,SIGNATURE_STATE BINARY_INTEGER IN,PERSONA PL/SQL RECORD IN,PERSONA RAW IN,DATA_STRING VARCHAR2 IN,SIGNATURE RAW IN,VERIFIED PL/SQL BOOLEAN RETURN,VALIDATED PL/SQL BOOLEAN RETURN,SIGNING_PARTY_IDENTITY PL/SQL RECORD RETURN,DESCRIPTOR RAW RETURN,SIGNATURE_STATE BINARY_INTEGER IN)
pt: DBMS_CRYPTO_TOOLKIT
fn: ADD_DEVICE
fs: ADD_DEVICE(HANDLE NUMBER IN,DEVICENAME VARCHAR2 IN,VOLUMESIZE VARCHAR2 IN)
pt: DBMS_DATAPUMP
fn: ADD_FILE
fs: ADD_FILE(HANDLE NUMBER IN,FILENAME VARCHAR2 IN,DIRECTORY VARCHAR2 IN,FILESIZE VARCHAR2 IN,FILETYPE NUMBER IN)
pt: DBMS_DATAPUMP
fn: CREATE_JOB_VIEW
fs: CREATE_JOB_VIEW(JOB_SCHEMA VARCHAR2 IN,JOB_NAME VARCHAR2 IN,VIEW_NAME VARCHAR2 IN,VIEW_TYPE NUMBER IN,HANDLE NUMBER IN,VIEW_NAME VARCHAR2 IN,VIEW_TYPE NUMBER IN)
pt: DBMS_DATAPUMP
fn: DATA_FILTER
fs: DATA_FILTER(HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE NUMBER IN,TABLE_NAME VARCHAR2 IN,SCHEMA_NAME VARCHAR2 IN,HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE VARCHAR2 IN,TABLE_NAME VARCHAR2 IN,SCHEMA_NAME VARCHAR2 IN)
pt: DBMS_DATAPUMP
fn: DETACH
fs: DETACH(HANDLE NUMBER IN)
pt: DBMS_DATAPUMP
fn: ESTABLISH_REMOTE_CONTEXT
fs: ESTABLISH_REMOTE_CONTEXT(REMOTE_LINK VARCHAR2 IN)
pt: DBMS_DATAPUMP
fn: GET_DUMPFILE_INFO
fs: GET_DUMPFILE_INFO(FILENAME VARCHAR2 IN,DIRECTORY VARCHAR2 IN,INFO_TABLE TABLE OUT,FILETYPE NUMBER OUT)
pt: DBMS_DATAPUMP
fn: LOG_ENTRY
fs: LOG_ENTRY(HANDLE NUMBER IN,MESSAGE VARCHAR2 IN,LOG_FILE_ONLY NUMBER IN)
pt: DBMS_DATAPUMP
fn: LOG_ERROR
fs: LOG_ERROR(HANDLE NUMBER IN,MESSAGE VARCHAR2 IN,ERROR_NUMBER NUMBER IN,FATAL_ERROR NUMBER IN,LOG_FILE_ONLY NUMBER IN)
pt: DBMS_DATAPUMP
fn: METADATA_FILTER
fs: METADATA_FILTER(HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE VARCHAR2 IN,OBJECT_PATH VARCHAR2 IN,OBJECT_TYPE VARCHAR2 IN)
pt: DBMS_DATAPUMP
fn: METADATA_REMAP
fs: METADATA_REMAP(HANDLE NUMBER IN,NAME VARCHAR2 IN,OLD_VALUE VARCHAR2 IN,VALUE VARCHAR2 IN,OBJECT_TYPE VARCHAR2 IN)
pt: DBMS_DATAPUMP
fn: METADATA_TRANSFORM
fs: METADATA_TRANSFORM(HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE VARCHAR2 IN,OBJECT_TYPE VARCHAR2 IN,HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE NUMBER IN,OBJECT_TYPE VARCHAR2 IN)
pt: DBMS_DATAPUMP
fn: SETUP_REMOTE_CONTEXT
fs: SETUP_REMOTE_CONTEXT(USER_NAME VARCHAR2 IN,JOB_NAME VARCHAR2 IN,VERSION NUMBER IN,STATUS_XML VARCHAR2 IN,STATUS_XML_LEN NUMBER IN,MORE NUMBER IN)
pt: DBMS_DATAPUMP
fn: SET_DEBUG
fs: SET_DEBUG(ON_OFF NUMBER IN,IP_ADDR VARCHAR2 IN)
pt: DBMS_DATAPUMP
fn: SET_PARALLEL
fs: SET_PARALLEL(HANDLE NUMBER IN,DEGREE NUMBER IN)
pt: DBMS_DATAPUMP
fn: SET_PARAMETER
fs: SET_PARAMETER(HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE VARCHAR2 IN,HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE NUMBER IN)
pt: DBMS_DATAPUMP
fn: START_JOB
fs: START_JOB(HANDLE NUMBER IN,SKIP_CURRENT NUMBER IN,ABORT_STEP NUMBER IN)
pt: DBMS_DATAPUMP
fn: STOP_JOB
fs: STOP_JOB(HANDLE NUMBER IN,IMMEDIATE NUMBER IN,KEEP_MASTER NUMBER IN,DELAY NUMBER IN)
pt: DBMS_DATAPUMP
fn: TEST_REMOTE_CONTEXT1010
fs: TEST_REMOTE_CONTEXT1010()
pt: DBMS_DATAPUMP
fn: TEST_REMOTE_CONTEXT1020
fs: TEST_REMOTE_CONTEXT1020()
pt: DBMS_DATAPUMP
fn: WAIT_FOR_JOB
fs: WAIT_FOR_JOB(HANDLE NUMBER IN,JOB_STATE VARCHAR2 OUT)
pt: DBMS_DATAPUMP
fn: ALTER_COMPILE
fs: ALTER_COMPILE(TYPE VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN,REUSE_SETTINGS PL/SQL BOOLEAN IN)
pt: DBMS_DDL
fn: ALTER_TABLE_NOT_REFERENCEABLE
fs: ALTER_TABLE_NOT_REFERENCEABLE(TABLE_NAME VARCHAR2 IN,TABLE_SCHEMA VARCHAR2 IN,AFFECTED_SCHEMA VARCHAR2 IN)
pt: DBMS_DDL
fn: ALTER_TABLE_REFERENCEABLE
fs: ALTER_TABLE_REFERENCEABLE(TABLE_NAME VARCHAR2 IN,TABLE_SCHEMA VARCHAR2 IN,AFFECTED_SCHEMA VARCHAR2 IN)
pt: DBMS_DDL
fn: ANALYZE_OBJECT
fs: ANALYZE_OBJECT(TYPE VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN,METHOD VARCHAR2 IN,ESTIMATE_ROWS NUMBER IN,ESTIMATE_PERCENT NUMBER IN,METHOD_OPT VARCHAR2 IN,PARTNAME VARCHAR2 IN)
pt: DBMS_DDL
fn: CREATE_WRAPPED
fs: CREATE_WRAPPED(DDL VARCHAR2 IN,DDL PL/SQL TABLE IN, VARCHAR2 IN,LB BINARY_INTEGER IN,UB BINARY_INTEGER IN,DDL PL/SQL TABLE IN, VARCHAR2 IN,LB BINARY_INTEGER IN,UB BINARY_INTEGER IN)
pt: DBMS_DDL
fn: SET_TRIGGER_FIRING_PROPERTY
fs: SET_TRIGGER_FIRING_PROPERTY(TRIG_OWNER VARCHAR2 IN,TRIG_NAME VARCHAR2 IN,FIRE_ONCE PL/SQL BOOLEAN IN)
pt: DBMS_DDL
fn: ATTACH_SESSION
fs: ATTACH_SESSION(DEBUG_SESSION_ID VARCHAR2 IN,DIAGNOSTICS BINARY_INTEGER IN)
pt: DBMS_DEBUG
fn: DEBUG_OFF
fs: DEBUG_OFF()
pt: DBMS_DEBUG
fn: DEBUG_ON
fs: DEBUG_ON(NO_CLIENT_SIDE_PLSQL_ENGINE PL/SQL BOOLEAN IN,IMMEDIATE PL/SQL BOOLEAN IN)
pt: DBMS_DEBUG
fn: DETACH_SESSION
fs: DETACH_SESSION()
pt: DBMS_DEBUG
fn: EXECUTE
fs: EXECUTE(WHAT VARCHAR2 IN,FRAME# BINARY_INTEGER IN,BIND_RESULTS BINARY_INTEGER IN,RESULTS TABLE IN/OUT,ERRM VARCHAR2 IN/OUT)
pt: DBMS_DEBUG
fn: GET_ENCODED_PKGVARS_FOR_CLIENT
fs: GET_ENCODED_PKGVARS_FOR_CLIENT(HANDLE PL/SQL RECORD IN,FLAGS BINARY_INTEGER IN,PBRUN_VERSION BINARY_INTEGER IN,STATUS BINARY_INTEGER IN/OUT,TIDL_BUF VARCHAR2 IN/OUT,TIDL_VERSION BINARY_INTEGER OUT)
pt: DBMS_DEBUG
fn: GET_ENCODED_STACK_FOR_CLIENT
fs: GET_ENCODED_STACK_FOR_CLIENT(START_FRAME BINARY_INTEGER IN,FRAME_COUNT BINARY_INTEGER IN,FLAGS BINARY_INTEGER IN,MAX_STRING_LENGTH BINARY_INTEGER IN,MAX_INDEX_VALUES BINARY_INTEGER IN,PBRUN_VERSION BINARY_INTEGER IN,TIDL_BUF VARCHAR2 IN/OUT,TIDL_VERSION BINARY_INTEGER OUT)
pt: DBMS_DEBUG
fn: GET_MORE_SOURCE
fs: GET_MORE_SOURCE(BUFFER VARCHAR2 IN/OUT,BUFLEN BINARY_INTEGER IN,PIECE# BINARY_INTEGER IN)
pt: DBMS_DEBUG
fn: PING
fs: PING()
pt: DBMS_DEBUG
fn: PRINT_BACKTRACE
fs: PRINT_BACKTRACE(LISTING VARCHAR2 IN/OUT,BACKTRACE PL/SQL TABLE RETURN, PL/SQL RECORD RETURN,NAMESPACE BINARY_INTEGER RETURN,NAME VARCHAR2 RETURN,OWNER VARCHAR2 RETURN,DBLINK VARCHAR2 RETURN,LINE# BINARY_INTEGER RETURN,LIBUNITTYPE BINARY_INTEGER RETURN,ENTRYPOINTNAME VARCHAR2 RETURN)
pt: DBMS_DEBUG
fn: PRINT_INSTANTIATIONS
fs: PRINT_INSTANTIATIONS(PKGS PL/SQL TABLE IN/OUT,FLAGS BINARY_INTEGER IN)
pt: DBMS_DEBUG
fn: PROBE_VERSION
fs: PROBE_VERSION(MAJOR BINARY_INTEGER OUT,MINOR BINARY_INTEGER OUT)
pt: DBMS_DEBUG
fn: SELF_CHECK
fs: SELF_CHECK(TIMEOUT BINARY_INTEGER IN)
pt: DBMS_DEBUG
fn: SET_DIAGNOSTIC_LEVEL
fs: SET_DIAGNOSTIC_LEVEL(DLEVEL BINARY_INTEGER IN)
pt: DBMS_DEBUG
fn: SET_TIMEOUT_BEHAVIOUR
fs: SET_TIMEOUT_BEHAVIOUR(BEHAVIOUR BINARY_INTEGER IN)
pt: DBMS_DEBUG
fn: SHOW_BREAKPOINTS
fs: SHOW_BREAKPOINTS(LISTING VARCHAR2 IN/OUT,LISTING PL/SQL TABLE RETURN, PL/SQL RECORD RETURN,NAME VARCHAR2 RETURN,OWNER VARCHAR2 RETURN,DBLINK VARCHAR2 RETURN,LINE# BINARY_INTEGER RETURN,LIBUNITTYPE BINARY_INTEGER RETURN,STATUS BINARY_INTEGER RETURN,CODE_BREAKPOINTS PL/SQL TABLE RETURN, PL/SQL RECORD RETURN,NAME VARCHAR2 RETURN,OWNER VARCHAR2 RETURN,DBLINK VARCHAR2 RETURN,LINE# BINARY_INTEGER RETURN,LIBUNITTYPE BINARY_INTEGER RETURN,STATUS BINARY_INTEGER RETURN,OER_BREAKPOINTS PL/SQL TABLE RETURN, BINARY_INTEGER RETURN)
pt: DBMS_DEBUG
fn: SHOW_FRAME_SOURCE
fs: SHOW_FRAME_SOURCE(FIRST_LINE BINARY_INTEGER IN,LAST_LINE BINARY_INTEGER IN,SOURCE PL/SQL TABLE IN/OUT,FRAME_NUM BINARY_INTEGER IN)
pt: DBMS_DEBUG
fn: SHOW_SOURCE
fs: SHOW_SOURCE(FIRST_LINE BINARY_INTEGER IN,LAST_LINE BINARY_INTEGER IN,SOURCE PL/SQL TABLE IN/OUT, VARCHAR2 IN/OUT,FIRST_LINE BINARY_INTEGER IN,LAST_LINE BINARY_INTEGER IN,WINDOW BINARY_INTEGER IN,PRINT_ARROW BINARY_INTEGER IN,BUFFER VARCHAR2 IN/OUT,BUFLEN BINARY_INTEGER IN,PIECES BINARY_INTEGER RETURN)
pt: DBMS_DEBUG
fn: CONNECT_TCP
fs: CONNECT_TCP(HOST VARCHAR2 IN,PORT VARCHAR2 IN,SESSION_ID BINARY_INTEGER IN,SESSION_SERIAL BINARY_INTEGER IN,DEBUG_ROLE VARCHAR2 IN,DEBUG_ROLE_PWD VARCHAR2 IN,OPTION_FLAGS BINARY_INTEGER IN,EXTENSIONS_CMD_SET BINARY_INTEGER IN)
pt: DBMS_DEBUG_JDWP
fn: DISCONNECT
fs: DISCONNECT(SESSION_ID BINARY_INTEGER IN,SESSION_SERIAL BINARY_INTEGER IN)
pt: DBMS_DEBUG_JDWP
fn: PROCESS_CONNECT_STRING
fs: PROCESS_CONNECT_STRING(CONNECT_STRING VARCHAR2 IN,CONNECT_STRING_TYPE BINARY_INTEGER IN)
pt: DBMS_DEBUG_JDWP
fn: SET_NLS_PARAMETER
fs: SET_NLS_PARAMETER(NAME VARCHAR2 IN,VALUE VARCHAR2 IN)
pt: DBMS_DEBUG_JDWP
fn: CONNECT_DEBUGGER
fs: CONNECT_DEBUGGER(HOST VARCHAR2 IN,PORT VARCHAR2 IN,DEBUG_ROLE VARCHAR2 IN,DEBUG_ROLE_PWD VARCHAR2 IN,OPTION_FLAGS BINARY_INTEGER IN,EXTENSIONS_CMD_SET BINARY_INTEGER IN)
pt: DBMS_DEBUG_JDWP_CUSTOM
fn: DESCRIBE_PROCEDURE
fs: DESCRIBE_PROCEDURE(OBJECT_NAME VARCHAR2 IN,RESERVED1 VARCHAR2 IN,RESERVED2 VARCHAR2 IN,OVERLOAD PL/SQL TABLE OUT,POSITION PL/SQL TABLE OUT,LEVEL PL/SQL TABLE OUT,ARGUMENT_NAME PL/SQL TABLE OUT,DATATYPE PL/SQL TABLE OUT,DEFAULT_VALUE PL/SQL TABLE OUT,IN_OUT PL/SQL TABLE OUT,LENGTH PL/SQL TABLE OUT,PRECISION PL/SQL TABLE OUT,SCALE PL/SQL TABLE OUT,RADIX PL/SQL TABLE OUT,SPARE PL/SQL TABLE OUT,INCLUDE_STRING_CONSTRAINTS PL/SQL BOOLEAN IN)
pt: DBMS_DESCRIBE
fn: DESCRIBE_DIMENSION
fs: DESCRIBE_DIMENSION(DIMENSION VARCHAR2 IN)
pt: DBMS_DIMENSION
fn: VALIDATE_DIMENSION
fs: VALIDATE_DIMENSION(DIMENSION_NAME VARCHAR2 IN,DIMENSION VARCHAR2 IN,DIMENSION_OWNER VARCHAR2 IN,INCREMENTAL PL/SQL BOOLEAN IN,CHECK_NULLS PL/SQL BOOLEAN IN,INCREMENTAL PL/SQL BOOLEAN IN,CHECK_NULLS PL/SQL BOOLEAN IN,STATEMENT_ID VARCHAR2 IN,RUN_ID NUMBER IN,DIMENSION_NAME VARCHAR2 IN,DIMENSION VARCHAR2 IN,CHECK_NULLS PL/SQL BOOLEAN IN,DIMENSION_OWNER VARCHAR2 IN,INCREMENTAL PL/SQL BOOLEAN IN,STATEMENT_ID VARCHAR2 IN,CHECK_NULLS PL/SQL BOOLEAN IN)
pt: DBMS_DIMENSION
fn: AUTHORIZE_DAD
fs: AUTHORIZE_DAD(DAD_NAME VARCHAR2 IN,USER VARCHAR2 IN)
pt: DBMS_EPG
fn: CREATE_DAD
fs: CREATE_DAD(DAD_NAME VARCHAR2 IN,PATH VARCHAR2 IN)
pt: DBMS_EPG
fn: DEAUTHORIZE_DAD
fs: DEAUTHORIZE_DAD(DAD_NAME VARCHAR2 IN,USER VARCHAR2 IN)
pt: DBMS_EPG
fn: DELETE_DAD_ATTRIBUTE
fs: DELETE_DAD_ATTRIBUTE(DAD_NAME VARCHAR2 IN,ATTR_NAME VARCHAR2 IN)
pt: DBMS_EPG
fn: DELETE_GLOBAL_ATTRIBUTE
fs: DELETE_GLOBAL_ATTRIBUTE(ATTR_NAME VARCHAR2 IN)
pt: DBMS_EPG
fn: DROP_DAD
fs: DROP_DAD(DAD_NAME VARCHAR2 IN)
pt: DBMS_EPG
fn: GET_ALL_DAD_ATTRIBUTES
fs: GET_ALL_DAD_ATTRIBUTES(DAD_NAME VARCHAR2 IN,ATTR_NAMES PL/SQL TABLE OUT,ATTR_VALUES PL/SQL TABLE OUT)
pt: DBMS_EPG
fn: GET_ALL_DAD_MAPPINGS
fs: GET_ALL_DAD_MAPPINGS(DAD_NAME VARCHAR2 IN,PATHS PL/SQL TABLE OUT)
pt: DBMS_EPG
fn: GET_ALL_GLOBAL_ATTRIBUTES
fs: GET_ALL_GLOBAL_ATTRIBUTES(ATTR_NAMES PL/SQL TABLE OUT,ATTR_VALUES PL/SQL TABLE OUT)
pt: DBMS_EPG
fn: GET_DAD_LIST
fs: GET_DAD_LIST(DAD_NAMES PL/SQL TABLE OUT)
pt: DBMS_EPG
fn: MAP_DAD
fs: MAP_DAD(DAD_NAME VARCHAR2 IN,PATH VARCHAR2 IN)
pt: DBMS_EPG
fn: SET_DAD_ATTRIBUTE
fs: SET_DAD_ATTRIBUTE(DAD_NAME VARCHAR2 IN,ATTR_NAME VARCHAR2 IN,ATTR_VALUE VARCHAR2 IN)
pt: DBMS_EPG
fn: SET_GLOBAL_ATTRIBUTE
fs: SET_GLOBAL_ATTRIBUTE(ATTR_NAME VARCHAR2 IN,ATTR_VALUE VARCHAR2 IN)
pt: DBMS_EPG
fn: UNMAP_DAD
fs: UNMAP_DAD(DAD_NAME VARCHAR2 IN,PATH VARCHAR2 IN)
pt: DBMS_EPG
fn: CREATE_ERROR_LOG
fs: CREATE_ERROR_LOG(DML_TABLE_NAME VARCHAR2 IN,ERR_LOG_TABLE_NAME VARCHAR2 IN,ERR_LOG_TABLE_OWNER VARCHAR2 IN,ERR_LOG_TABLE_SPACE VARCHAR2 IN,SKIP_UNSUPPORTED PL/SQL BOOLEAN IN)
pt: DBMS_ERRLOG
fn: BEGIN_IMPORT_DOMAIN_INDEX
fs: BEGIN_IMPORT_DOMAIN_INDEX(IDXSCHEMA VARCHAR2 IN,IDXNAME VARCHAR2 IN)
pt: DBMS_EXPORT_EXTENSION
fn: INSERT_SECOBJ
fs: INSERT_SECOBJ(SECOBJSCHEMA VARCHAR2 IN,SECOBJNAME VARCHAR2 IN)
pt: DBMS_EXPORT_EXTENSION
fn: RESET_EXP_OPQ_TYP_EVENT
fs: RESET_EXP_OPQ_TYP_EVENT()
pt: DBMS_EXPORT_EXTENSION
fn: RESET_SECONDARYOBJ_EVENT
fs: RESET_SECONDARYOBJ_EVENT()
pt: DBMS_EXPORT_EXTENSION
fn: SET_EXP_OPQ_TYP_EVENT
fs: SET_EXP_OPQ_TYP_EVENT()
pt: DBMS_EXPORT_EXTENSION
fn: SET_EXP_SORTSIZE
fs: SET_EXP_SORTSIZE()
pt: DBMS_EXPORT_EXTENSION
fn: SET_EXP_TIMEZONE
fs: SET_EXP_TIMEZONE()
pt: DBMS_EXPORT_EXTENSION
fn: SET_IMP_EVENTS
fs: SET_IMP_EVENTS()
pt: DBMS_EXPORT_EXTENSION
fn: SET_IMP_FLUSH_SHARED_POOL
fs: SET_IMP_FLUSH_SHARED_POOL()
pt: DBMS_EXPORT_EXTENSION
fn: SET_IMP_SKIP_INDEXES_OFF
fs: SET_IMP_SKIP_INDEXES_OFF()
pt: DBMS_EXPORT_EXTENSION
fn: SET_IMP_SKIP_INDEXES_ON
fs: SET_IMP_SKIP_INDEXES_ON()
pt: DBMS_EXPORT_EXTENSION
fn: SET_IMP_TIMEZONE
fs: SET_IMP_TIMEZONE(TIMEZONE VARCHAR2 IN)
pt: DBMS_EXPORT_EXTENSION
fn: SET_IOT_EVENT
fs: SET_IOT_EVENT()
pt: DBMS_EXPORT_EXTENSION
fn: SET_NLS_NUMERIC_CHAR
fs: SET_NLS_NUMERIC_CHAR()
pt: DBMS_EXPORT_EXTENSION
fn: SET_NO_OUTLINES
fs: SET_NO_OUTLINES()
pt: DBMS_EXPORT_EXTENSION
fn: SET_RESUM
fs: SET_RESUM()
pt: DBMS_EXPORT_EXTENSION
fn: SET_RESUMNAM
fs: SET_RESUMNAM(NAME VARCHAR2 IN)
pt: DBMS_EXPORT_EXTENSION
fn: SET_RESUMNAMTIM
fs: SET_RESUMNAMTIM(NAME VARCHAR2 IN,TIME NUMBER IN)
pt: DBMS_EXPORT_EXTENSION
fn: SET_RESUMTIM
fs: SET_RESUMTIM(TIME NUMBER IN)
pt: DBMS_EXPORT_EXTENSION
fn: SET_SECONDARYOBJ_EVENT
fs: SET_SECONDARYOBJ_EVENT()
pt: DBMS_EXPORT_EXTENSION
fn: SET_STATSON
fs: SET_STATSON()
pt: DBMS_EXPORT_EXTENSION
fn: SET_TRACEON
fs: SET_TRACEON()
pt: DBMS_EXPORT_EXTENSION
fn: FBT_ANALYZE
fs: FBT_ANALYZE(TABLE_NAME VARCHAR2 IN,FLASHBACK_SCN NUMBER IN,TMPTBCUR REF CURSOR RETURN,TABLE_NAME VARCHAR2 IN,FLASHBACK_TIME TIMESTAMP IN,TMPTBCUR REF CURSOR RETURN)
pt: DBMS_FBT
fn: FBT_DISCARD
fs: FBT_DISCARD()
pt: DBMS_FBT
fn: FBT_EXECUTE
fs: FBT_EXECUTE(TABLE_NAMES VARRAY IN, VARCHAR2 IN,FLASHBACK_SCN NUMBER IN,TABLE_NAMES VARRAY IN, VARCHAR2 IN,FLASHBACK_TIME TIMESTAMP IN)
pt: DBMS_FBT
fn: ADD_FILE
fs: ADD_FILE(CANON_FILE_GROUP_NAME VARCHAR2 IN,FILE_NAME VARCHAR2 IN,FILE_TYPE VARCHAR2 IN,CANON_DIRECTORY VARCHAR2 IN,CANON_VERSION_NAME VARCHAR2 IN,VERSION_GUID VARCHAR2 IN,COMMENTS VARCHAR2 IN,FILE_SIZE NUMBER IN,FILE_BLOCKSIZE NUMBER IN,CANON_CREATOR VARCHAR2 IN,CREATION_TIME TIMESTAMP WITH TIME ZONE IN)
pt: DBMS_FILE_GROUP_IMP
fn: CREATE_FILE_GROUP
fs: CREATE_FILE_GROUP(CANON_FILE_GROUP_NAME VARCHAR2 IN,CANON_KEEP_FILES VARCHAR2 IN,MIN_VERSIONS NUMBER IN,MAX_VERSIONS NUMBER IN,RETENTION_DAYS NUMBER IN,CANON_DEFAULT_DIRECTORY VARCHAR2 IN,COMMENTS VARCHAR2 IN,CANON_CREATOR VARCHAR2 IN,CREATION_TIME TIMESTAMP WITH TIME ZONE IN)
pt: DBMS_FILE_GROUP_IMP
fn: CREATE_VERSION
fs: CREATE_VERSION(CANON_FILE_GROUP_NAME VARCHAR2 IN,CANON_VERSION_NAME VARCHAR2 IN,VERSION_GUID VARCHAR2 IN,CANON_DEFAULT_DIRECTORY VARCHAR2 IN,COMMENTS VARCHAR2 IN,CANON_CREATOR VARCHAR2 IN,CREATION_TIME TIMESTAMP WITH TIME ZONE IN)
pt: DBMS_FILE_GROUP_IMP
fn: GRANT_OBJECT_PRIVILEGE
fs: GRANT_OBJECT_PRIVILEGE(CANON_FILE_GROUP_OWNER VARCHAR2 IN,CANON_FILE_GROUP_NAME VARCHAR2 IN,PRIVILEGE BINARY_INTEGER IN,CANON_GRANTEE VARCHAR2 IN,GRANT_OPTION PL/SQL BOOLEAN IN)
pt: DBMS_FILE_GROUP_IMP
fn: SET_TABLESPACE_INFO
fs: SET_TABLESPACE_INFO(CANON_FILE_GROUP_NAME VARCHAR2 IN,CANON_VERSION_NAME VARCHAR2 IN,VERSION_GUID VARCHAR2 IN,CANON_TABLESPACE_NAME VARCHAR2 IN)
pt: DBMS_FILE_GROUP_IMP
fn: SET_TABLE_INFO
fs: SET_TABLE_INFO(CANON_FILE_GROUP_NAME VARCHAR2 IN,CANON_VERSION_NAME VARCHAR2 IN,VERSION_GUID VARCHAR2 IN,CANON_SCHEMA_NAME VARCHAR2 IN,CANON_TABLE_NAME VARCHAR2 IN,CANON_TABLESPACE_NAME VARCHAR2 IN,SCN NUMBER IN)
pt: DBMS_FILE_GROUP_IMP
fn: SET_VERSION_EXPORT_INFO
fs: SET_VERSION_EXPORT_INFO(CANON_FILE_GROUP_NAME VARCHAR2 IN,CANON_VERSION_NAME VARCHAR2 IN,VERSION_GUID VARCHAR2 IN,EXPORT_VERSION VARCHAR2 IN,EXPORT_PLATFORM VARCHAR2 IN,EXPORT_TIME DATE IN,EXPORT_SCN NUMBER IN,SOURCE_DB_NAME VARCHAR2 IN)
pt: DBMS_FILE_GROUP_IMP
fn: CLEAR_REDIRECTION
fs: CLEAR_REDIRECTION()
pt: DBMS_IAS_SESSION
fn: SET_REDIRECTION
fs: SET_REDIRECTION()
pt: DBMS_IAS_SESSION
fn: BUILD_INDEXES
fs: BUILD_INDEXES(LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN,NUM_ERRORS BINARY_INTEGER RETURN,LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN)
pt: DBMS_INDEX_UTL
fn: BUILD_INDEX_COMPONENTS
fs: BUILD_INDEX_COMPONENTS(LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN,NUM_ERRORS BINARY_INTEGER RETURN,LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN)
pt: DBMS_INDEX_UTL
fn: BUILD_SCHEMA_INDEXES
fs: BUILD_SCHEMA_INDEXES(LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN,NUM_ERRORS BINARY_INTEGER RETURN,LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN)
pt: DBMS_INDEX_UTL
fn: BUILD_TABLE_COMPONENT_INDEXES
fs: BUILD_TABLE_COMPONENT_INDEXES(LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN,NUM_ERRORS BINARY_INTEGER RETURN,LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN)
pt: DBMS_INDEX_UTL
fn: BUILD_TABLE_INDEXES
fs: BUILD_TABLE_INDEXES(LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN,NUM_ERRORS BINARY_INTEGER RETURN,LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN)
pt: DBMS_INDEX_UTL
fn: MULTI_LEVEL_BUILD
fs: MULTI_LEVEL_BUILD(SCHEMA_LIST VARCHAR2 IN,TABLE_LIST VARCHAR2 IN,INDEX_LIST VARCHAR2 IN,IDX_COMP_LIST VARCHAR2 IN,TAB_COMP_LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN,NUM_ERRORS BINARY_INTEGER RETURN,SCHEMA_LIST VARCHAR2 IN,TABLE_LIST VARCHAR2 IN,INDEX_LIST VARCHAR2 IN,IDX_COMP_LIST VARCHAR2 IN,TAB_COMP_LIST VARCHAR2 IN,JUST_UNUSABLE PL/SQL BOOLEAN IN,LOCALITY VARCHAR2 IN,CONCURRENT PL/SQL BOOLEAN IN,CONT_AFTER_ERR PL/SQL BOOLEAN IN,MAX_SLAVES NUMBER IN)
pt: DBMS_INDEX_UTL
fn: SYNC_UP_SCDC
fs: SYNC_UP_SCDC(CANON_SNAME VARCHAR2 IN,CANON_ONAME VARCHAR2 IN)
pt: DBMS_ITRIGGER_UTL
fn: BROKEN
fs: BROKEN(JOB BINARY_INTEGER IN,BROKEN PL/SQL BOOLEAN IN,NEXT_DATE DATE IN)
pt: DBMS_JOB
fn: CHANGE
fs: CHANGE(JOB BINARY_INTEGER IN,WHAT VARCHAR2 IN,NEXT_DATE DATE IN,INTERVAL VARCHAR2 IN,INSTANCE BINARY_INTEGER IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_JOB
fn: INSTANCE
fs: INSTANCE(JOB BINARY_INTEGER IN,INSTANCE BINARY_INTEGER IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_JOB
fn: INTERVAL
fs: INTERVAL(JOB BINARY_INTEGER IN,INTERVAL VARCHAR2 IN)
pt: DBMS_JOB
fn: ISUBMIT
fs: ISUBMIT(JOB BINARY_INTEGER IN,WHAT VARCHAR2 IN,NEXT_DATE DATE IN,INTERVAL VARCHAR2 IN,NO_PARSE PL/SQL BOOLEAN IN)
pt: DBMS_JOB
fn: NEXT_DATE
fs: NEXT_DATE(JOB BINARY_INTEGER IN,NEXT_DATE DATE IN)
pt: DBMS_JOB
fn: REMOVE
fs: REMOVE(JOB BINARY_INTEGER IN)
pt: DBMS_JOB
fn: RUN
fs: RUN(JOB BINARY_INTEGER IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_JOB
fn: SUBMIT
fs: SUBMIT(JOB BINARY_INTEGER OUT,WHAT VARCHAR2 IN,NEXT_DATE DATE IN,INTERVAL VARCHAR2 IN,NO_PARSE PL/SQL BOOLEAN IN,INSTANCE BINARY_INTEGER IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_JOB
fn: USER_EXPORT
fs: USER_EXPORT(JOB BINARY_INTEGER IN,MYCALL VARCHAR2 IN/OUT,JOB BINARY_INTEGER IN,MYCALL VARCHAR2 IN/OUT,MYINST VARCHAR2 IN/OUT,RG# BINARY_INTEGER IN,MYCALL VARCHAR2 IN/OUT)
pt: DBMS_JOB
fn: WHAT
fs: WHAT(JOB BINARY_INTEGER IN,WHAT VARCHAR2 IN)
pt: DBMS_JOB
fn: BER_FREE
fs: BER_FREE(BER RAW IN,FREEBUF BINARY_INTEGER IN)
pt: DBMS_LDAP
fn: FREE_MOD_ARRAY
fs: FREE_MOD_ARRAY(MODPTR RAW IN)
pt: DBMS_LDAP
fn: POPULATE_MOD_ARRAY
fs: POPULATE_MOD_ARRAY(MODPTR RAW IN,MOD_OP BINARY_INTEGER IN,MOD_TYPE VARCHAR2 IN,MODVAL PL/SQL TABLE IN, VARCHAR2 IN,MODPTR RAW IN,MOD_OP BINARY_INTEGER IN,MOD_TYPE VARCHAR2 IN,MODBVAL PL/SQL TABLE IN, RAW IN,MODPTR RAW IN,MOD_OP BINARY_INTEGER IN,MOD_TYPE VARCHAR2 IN,MODBVAL PL/SQL TABLE IN, BLOB IN)
pt: DBMS_LDAP
fn: SET_TRACE_LEVEL
fs: SET_TRACE_LEVEL(NEW_TRACE_LEVEL BINARY_INTEGER IN)
pt: DBMS_LDAP
fn: VALUE_FREE_BLOB
fs: VALUE_FREE_BLOB(VALS PL/SQL TABLE IN/OUT)
pt: DBMS_LDAP
fn: FREE_HANDLE
fs: FREE_HANDLE(HANDLE RAW IN/OUT)
pt: DBMS_LDAP_UTL
fn: FREE_MOD_PROPERTYSET
fs: FREE_MOD_PROPERTYSET(MOD_PSET RAW IN/OUT)
pt: DBMS_LDAP_UTL
fn: FREE_PROPERTYSET_COLLECTION
fs: FREE_PROPERTYSET_COLLECTION(PSET_COLLECTION PL/SQL TABLE IN/OUT)
pt: DBMS_LDAP_UTL
fn: PROPERTY_VALUE_FREE_BLOB
fs: PROPERTY_VALUE_FREE_BLOB(VALS PL/SQL TABLE IN/OUT)
pt: DBMS_LDAP_UTL
fn: APPEND
fs: APPEND(DEST_LOB BLOB IN/OUT,SRC_LOB BLOB IN,DEST_LOB CLOB IN/OUT,SRC_LOB CLOB IN)
pt: DBMS_LOB
fn: CLOSE
fs: CLOSE(LOB_LOC BLOB IN/OUT,LOB_LOC CLOB IN/OUT,FILE_LOC BFILE IN/OUT,HANDLE NUMBER IN)
pt: DBMS_LOB
fn: CONVERTTOBLOB
fs: CONVERTTOBLOB(DEST_LOB BLOB IN/OUT,SRC_CLOB CLOB IN,AMOUNT NUMBER IN,DEST_OFFSET NUMBER IN/OUT,SRC_OFFSET NUMBER IN/OUT,BLOB_CSID NUMBER IN,LANG_CONTEXT NUMBER IN/OUT,WARNING NUMBER OUT)
pt: DBMS_LOB
fn: CONVERTTOCLOB
fs: CONVERTTOCLOB(DEST_LOB CLOB IN/OUT,SRC_BLOB BLOB IN,AMOUNT NUMBER IN,DEST_OFFSET NUMBER IN/OUT,SRC_OFFSET NUMBER IN/OUT,BLOB_CSID NUMBER IN,LANG_CONTEXT NUMBER IN/OUT,WARNING NUMBER OUT)
pt: DBMS_LOB
fn: COPY
fs: COPY(DEST_LOB BLOB IN/OUT,SRC_LOB BLOB IN,AMOUNT NUMBER IN,DEST_OFFSET NUMBER IN,SRC_OFFSET NUMBER IN,DEST_LOB CLOB IN/OUT,SRC_LOB CLOB IN,AMOUNT NUMBER IN,DEST_OFFSET NUMBER IN,SRC_OFFSET NUMBER IN)
pt: DBMS_LOB
fn: CREATETEMPORARY
fs: CREATETEMPORARY(LOB_LOC BLOB IN/OUT,CACHE PL/SQL BOOLEAN IN,DUR BINARY_INTEGER IN,LOB_LOC CLOB IN/OUT,CACHE PL/SQL BOOLEAN IN,DUR BINARY_INTEGER IN)
pt: DBMS_LOB
fn: ERASE
fs: ERASE(LOB_LOC BLOB IN/OUT,AMOUNT NUMBER IN/OUT,OFFSET NUMBER IN,LOB_LOC CLOB IN/OUT,AMOUNT NUMBER IN/OUT,OFFSET NUMBER IN)
pt: DBMS_LOB
fn: FILECLOSE
fs: FILECLOSE(FILE_LOC BFILE IN/OUT)
pt: DBMS_LOB
fn: FILECLOSEALL
fs: FILECLOSEALL()
pt: DBMS_LOB
fn: FILEGETNAME
fs: FILEGETNAME(FILE_LOC BFILE IN,DIR_ALIAS VARCHAR2 OUT,FILENAME VARCHAR2 OUT)
pt: DBMS_LOB
fn: FILEOPEN
fs: FILEOPEN(FILE_LOC BFILE IN/OUT,OPEN_MODE BINARY_INTEGER IN)
pt: DBMS_LOB
fn: FREETEMPORARY
fs: FREETEMPORARY(LOB_LOC BLOB IN/OUT,LOB_LOC CLOB IN/OUT)
pt: DBMS_LOB
fn: LOADBLOBFROMFILE
fs: LOADBLOBFROMFILE(DEST_LOB BLOB IN/OUT,SRC_BFILE BFILE IN,AMOUNT NUMBER IN,DEST_OFFSET NUMBER IN/OUT,SRC_OFFSET NUMBER IN/OUT)
pt: DBMS_LOB
fn: LOADCLOBFROMFILE
fs: LOADCLOBFROMFILE(DEST_LOB CLOB IN/OUT,SRC_BFILE BFILE IN,AMOUNT NUMBER IN,DEST_OFFSET NUMBER IN/OUT,SRC_OFFSET NUMBER IN/OUT,BFILE_CSID NUMBER IN,LANG_CONTEXT NUMBER IN/OUT,WARNING NUMBER OUT)
pt: DBMS_LOB
fn: LOADFROMFILE
fs: LOADFROMFILE(DEST_LOB BLOB IN/OUT,SRC_LOB BFILE IN,AMOUNT NUMBER IN,DEST_OFFSET NUMBER IN,SRC_OFFSET NUMBER IN,DEST_LOB CLOB IN/OUT,SRC_LOB BFILE IN,AMOUNT NUMBER IN,DEST_OFFSET NUMBER IN,SRC_OFFSET NUMBER IN)
pt: DBMS_LOB
fn: OPEN
fs: OPEN(LOB_LOC BLOB IN/OUT,OPEN_MODE BINARY_INTEGER IN,LOB_LOC CLOB IN/OUT,OPEN_MODE BINARY_INTEGER IN,FILE_LOC BFILE IN/OUT,OPEN_MODE BINARY_INTEGER IN, NUMBER RESULT, NUMBER RESULT,OPERATION VARCHAR2 IN,OBJECT_TYPE VARCHAR2 IN,JOB_MODE VARCHAR2 IN,VERSION VARCHAR2 IN,MODEL VARCHAR2 IN,REMOTE_LINK VARCHAR2 IN,JOB_NAME VARCHAR2 IN,NETWORK_LINK VARCHAR2 IN,VERSION VARCHAR2 IN,COMPRESSION NUMBER IN)
pt: DBMS_LOB
fn: READ
fs: READ(LOB_LOC BLOB IN,AMOUNT NUMBER IN/OUT,OFFSET NUMBER IN,BUFFER RAW RETURN,LOB_LOC CLOB IN,AMOUNT NUMBER IN/OUT,OFFSET NUMBER IN,BUFFER VARCHAR2 RETURN,FILE_LOC BFILE IN,AMOUNT NUMBER IN/OUT,OFFSET NUMBER IN,BUFFER RAW RETURN)
pt: DBMS_LOB
fn: TRIM
fs: TRIM( VARCHAR2 RESULT,COLLECTION VARRAY IN/OUT,LOB_LOC BLOB IN/OUT,NEWLEN NUMBER IN,V VARCHAR2 IN, CHAR IN/OUT,N BINARY_INTEGER IN, CLOB RESULT,COLLECTION TABLE IN/OUT,LOB_LOC CLOB IN/OUT,NEWLEN NUMBER IN,V CLOB IN, CHAR IN/OUT,N BINARY_INTEGER IN)
pt: DBMS_LOB
fn: WRITE
fs: WRITE(LOB_LOC BLOB IN/OUT,AMOUNT NUMBER IN,OFFSET NUMBER IN,BUFFER RAW IN,LOB_LOC CLOB IN/OUT,AMOUNT NUMBER IN,OFFSET NUMBER IN,BUFFER VARCHAR2 IN)
pt: DBMS_LOB
fn: WRITEAPPEND
fs: WRITEAPPEND(LOB_LOC BLOB IN/OUT,AMOUNT NUMBER IN,BUFFER RAW IN,LOB_LOC CLOB IN/OUT,AMOUNT NUMBER IN,BUFFER VARCHAR2 IN)
pt: DBMS_LOB
fn: APPLY_ERROR
fs: APPLY_ERROR(LOCAL_TID VARCHAR2 IN,SOURCE_TID VARCHAR2 IN,SOURCE_DB VARCHAR2 IN,QUEUE_OWNER VARCHAR2 IN,QUEUE_NAME VARCHAR2 IN,APPLY_NAME VARCHAR2 IN,MESSAGE_NUMBER NUMBER IN,MESSAGE_COUNT NUMBER IN,MIN_STEP_NO NUMBER IN,RECIPIENT_NAME VARCHAR2 IN,SOURCE_COMMIT_SCN NUMBER IN,ERROR_NUMBER NUMBER IN,ERROR_MESSAGE VARCHAR2 IN,AQ_TID VARCHAR2 IN,SPARE1 NUMBER IN,SPARE2 NUMBER IN,SPARE3 NUMBER IN,ERROR_CREATION_TIME DATE IN)
pt: DBMS_LOGREP_IMP
fn: APPLY_ERROR_TXN
fs: APPLY_ERROR_TXN(LOCAL_TID VARCHAR2 IN,MSGID RAW IN,TXN_MESSAGE_NUMBER NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: APPLY_MILESTONE
fs: APPLY_MILESTONE(APPLY_NAME VARCHAR2 IN,SOURCE_DB VARCHAR2 IN,OLDEST_SCN NUMBER IN,COMMIT_SCN NUMBER IN,SYNCH_SCN NUMBER IN,EPOCH NUMBER IN,PROCESSED_SCN NUMBER IN,APPLY_TIME VARCHAR2 IN,MSG_CREATE_TIME VARCHAR2 IN,SPARE1 NUMBER IN,START_SCN NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: APPLY_PROGRESS
fs: APPLY_PROGRESS(APPLY_NAME VARCHAR2 IN,SOURCE_DB VARCHAR2 IN,XIDUSN NUMBER IN,XIDSLT NUMBER IN,XIDSQN NUMBER IN,COMMIT_SCN NUMBER IN,SPARE1 NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: BUMP_SCN
fs: BUMP_SCN(SCN NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: CREATE_APPLY
fs: CREATE_APPLY(APPLY_NAME VARCHAR2 IN,QUEUE_OWNER VARCHAR2 IN,QUEUE_NAME VARCHAR2 IN,APPLY_CAPTURED BINARY_INTEGER IN,RULESET_OWNER VARCHAR2 IN,RULESET_NAME VARCHAR2 IN,APPLY_USER VARCHAR2 IN,APPLY_DBLINK VARCHAR2 IN,APPLY_TAG VARCHAR2 IN,DDL_HANDLER VARCHAR2 IN,MESSAGE_HANDLER VARCHAR2 IN,PRECOMMIT_HANDLER VARCHAR2 IN,START_DATE DATE IN,END_DATE DATE IN,NEGATIVE_RULESET_OWNER VARCHAR2 IN,NEGATIVE_RULESET_NAME VARCHAR2 IN,ERROR_NUMBER NUMBER IN,ERROR_MESSAGE VARCHAR2 IN,I_CUSTOMER_ID BINARY_INTEGER IN,UAN_HANDLER VARCHAR2 IN,UA_RULESET_OWNER VARCHAR2 IN,UA_RULESET_NAME VARCHAR2 IN)
pt: DBMS_LOGREP_IMP
fn: CREATE_CAPTURE
fs: CREATE_CAPTURE(QUEUE_OWNER VARCHAR2 IN,QUEUE_NAME VARCHAR2 IN,CAPTURE_NAME VARCHAR2 IN,RULESET_OWNER VARCHAR2 IN,RULESET_NAME VARCHAR2 IN,CAPTURE_USERNAME VARCHAR2 IN,START_DATE DATE IN,END_DATE DATE IN,SOURCE_DATABASE VARCHAR2 IN,LOGFILE_ASSIGNMENT VARCHAR2 IN,USE_DATABASE_LINK VARCHAR2 IN,NEGATIVE_RULESET_OWNER VARCHAR2 IN,NEGATIVE_RULESET_NAME VARCHAR2 IN,I_CUSTOMER_ID BINARY_INTEGER IN)
pt: DBMS_LOGREP_IMP
fn: CREATE_PROPAGATION
fs: CREATE_PROPAGATION(PROPAGATION_NAME VARCHAR2 IN,SRC_QUEUE_OWNER VARCHAR2 IN,SRC_QUEUE_NAME VARCHAR2 IN,DEST_QUEUE_OWNER VARCHAR2 IN,DEST_QUEUE_NAME VARCHAR2 IN,DEST_DBLINK VARCHAR2 IN,RULESET_OWNER VARCHAR2 IN,RULESET_NAME VARCHAR2 IN,NEGATIVE_RULESET_OWNER VARCHAR2 IN,NEGATIVE_RULESET_NAME VARCHAR2 IN,QUEUE_TO_QUEUE PL/SQL BOOLEAN IN)
pt: DBMS_LOGREP_IMP
fn: INCLUDE_EXTRA_ATTRIBUTE
fs: INCLUDE_EXTRA_ATTRIBUTE(CAPTURE_NAME VARCHAR2 IN,ATTRIBUTE_NAME VARCHAR2 IN,INCLUDE VARCHAR2 IN)
pt: DBMS_LOGREP_IMP
fn: INSTANTIATE
fs: INSTANTIATE(OBJECT_OWNER VARCHAR2 IN,OBJECT_NAME VARCHAR2 IN,OBJECT_TYPE BINARY_INTEGER IN,EXPORT_DB_NAME VARCHAR2 IN,INST_SCN NUMBER IN,IGNORE_SCN NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: INSTANTIATE_SCHEMA
fs: INSTANTIATE_SCHEMA(SCHEMA_NAME VARCHAR2 IN,EXPORT_DB_NAME VARCHAR2 IN,INST_SCN NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: MESSAGE_CONSUMERS
fs: MESSAGE_CONSUMERS(CANON_STREAMS_NAME VARCHAR2 IN,CANON_QUEUE_OWNER VARCHAR2 IN,CANON_QUEUE_NAME VARCHAR2 IN,CANON_RSET_OWNER VARCHAR2 IN,CANON_RSET_NAME VARCHAR2 IN,CANON_NEG_RSET_OWNER VARCHAR2 IN,CANON_NEG_RSET_NAME VARCHAR2 IN)
pt: DBMS_LOGREP_IMP
fn: MESSAGE_RULES
fs: MESSAGE_RULES(CANON_STREAMS_NAME VARCHAR2 IN,STREAMS_TYPE NUMBER IN,CANON_MSG_TYPE_OWNER VARCHAR2 IN,CANON_MSG_TYPE_NAME VARCHAR2 IN,CANON_MSG_RULE_VAR VARCHAR2 IN,CANON_RULE_OWNER VARCHAR2 IN,CANON_RULE_NAME VARCHAR2 IN,RULE_CONDITION VARCHAR2 IN)
pt: DBMS_LOGREP_IMP
fn: PREPARE_DDL
fs: PREPARE_DDL(SCHEMA_NAME VARCHAR2 IN,FLAGS BINARY_INTEGER IN)
pt: DBMS_LOGREP_IMP
fn: PREPARE_OBJECT
fs: PREPARE_OBJECT(TABLE_OWNER VARCHAR2 IN,TABLE_NAME VARCHAR2 IN,FLAGS BINARY_INTEGER IN)
pt: DBMS_LOGREP_IMP
fn: PRIVILEGED_USER
fs: PRIVILEGED_USER(CANON_USERNAME VARCHAR2 IN,PRIVS NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: SET_APPLY_PARAM
fs: SET_APPLY_PARAM(APPLY_NAME VARCHAR2 IN,PARAMETER_NAME VARCHAR2 IN,PARAMETER_VALUE VARCHAR2 IN)
pt: DBMS_LOGREP_IMP
fn: SET_APPLY_SOURCE_OBJ
fs: SET_APPLY_SOURCE_OBJ(SOURCE_DB VARCHAR2 IN,OWNER VARCHAR2 IN,NAME VARCHAR2 IN,TYPE BINARY_INTEGER IN,INST_SCN NUMBER IN,IGNORE_SCN NUMBER IN,DBLINK VARCHAR2 IN,SPARE1 NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: SET_APPLY_SOURCE_SCHEMA
fs: SET_APPLY_SOURCE_SCHEMA(SOURCE_DB VARCHAR2 IN,GLOBAL_FLAG BINARY_INTEGER IN,NAME VARCHAR2 IN,DBLINK VARCHAR2 IN,INST_SCN NUMBER IN,SPARE1 NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: SET_CAPTURE_PARAM
fs: SET_CAPTURE_PARAM(CAPTURE_NAME VARCHAR2 IN,PARAMETER_NAME VARCHAR2 IN,PARAMETER_VALUE VARCHAR2 IN)
pt: DBMS_LOGREP_IMP
fn: SET_DML_HANDLER
fs: SET_DML_HANDLER(OBJECT_OWNER VARCHAR2 IN,OBJECT_NAME VARCHAR2 IN,OPERATION_NAME VARCHAR2 IN,USER_PROCEDURE VARCHAR2 IN,ERROR_HANDLER NUMBER IN,APPLY_DBLINK VARCHAR2 IN,APPLY_NAME VARCHAR2 IN,ASSEMBLE_LOBS NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: SET_IMPORT_MODE
fs: SET_IMPORT_MODE(IMPORT_MODE BINARY_INTEGER IN)
pt: DBMS_LOGREP_IMP
fn: SET_KEY_COLUMNS
fs: SET_KEY_COLUMNS(OBJECT_OWNER VARCHAR2 IN,OBJECT_NAME VARCHAR2 IN,COLUMN_NAME VARCHAR2 IN,APPLY_DBLINK VARCHAR2 IN)
pt: DBMS_LOGREP_IMP
fn: SET_UPDATE_CONFLICT_HANDLER
fs: SET_UPDATE_CONFLICT_HANDLER(OBJECT_OWNER VARCHAR2 IN,OBJECT_NAME VARCHAR2 IN,RESOLUTION_ID BINARY_INTEGER IN,METHOD_NAME VARCHAR2 IN,RESOLUTION_COLUMN VARCHAR2 IN,COLUMN_NAME VARCHAR2 IN,DBLINK VARCHAR2 IN)
pt: DBMS_LOGREP_IMP
fn: START_APPLY
fs: START_APPLY(APPLY_NAME VARCHAR2 IN)
pt: DBMS_LOGREP_IMP
fn: START_CAPTURE
fs: START_CAPTURE(CAPTURE_NAME VARCHAR2 IN)
pt: DBMS_LOGREP_IMP
fn: START_QUEUE
fs: START_QUEUE(QUEUE_OWNER VARCHAR2 IN,QUEUE_NAME VARCHAR2 IN,ENQUEUE_ENABLED BINARY_INTEGER IN,DEQUEUE_ENABLED BINARY_INTEGER IN)
pt: DBMS_LOGREP_IMP
fn: STREAMS_RULES
fs: STREAMS_RULES(STREAMS_NAME VARCHAR2 IN,STREAMS_TYPE BINARY_INTEGER IN,RULE_TYPE BINARY_INTEGER IN,INCLUDE_TAGGED_LCR BINARY_INTEGER IN,SOURCE_DATABASE VARCHAR2 IN,RULE_OWNER VARCHAR2 IN,RULE_NAME VARCHAR2 IN,RULE_CONDITION VARCHAR2 IN,DML_CONDITION VARCHAR2 IN,SUBSETTING_OPERATION BINARY_INTEGER IN,SCHEMA_NAME VARCHAR2 IN,OBJECT_NAME VARCHAR2 IN,OBJECT_TYPE BINARY_INTEGER IN,SPARE1 NUMBER IN,SPARE2 NUMBER IN,SPARE3 NUMBER IN)
pt: DBMS_LOGREP_IMP
fn: CHECK_TYPE
fs: CHECK_TYPE(SCHEMA VARCHAR2 IN,TYPE_NAME VARCHAR2 IN,VERSION VARCHAR2 IN,HASHCODE VARCHAR2 IN,TYPEID VARCHAR2 IN)
pt: DBMS_METADATA
fn: CLOSE
fs: CLOSE(HANDLE NUMBER IN)
pt: DBMS_METADATA
fn: FETCH_XML_CLOB
fs: FETCH_XML_CLOB(HANDLE NUMBER IN,DOC CLOB IN/OUT,PARSED_ITEMS TABLE IN/OUT, SYS.KU$_PARSED_ITEM IN/OUT,OBJECT_TYPE_PATH VARCHAR2 RETURN,HANDLE NUMBER IN,DOC CLOB IN/OUT,PARSED_ITEMS TABLE IN/OUT, SYS.KU$_PARSED_ITEM IN/OUT,OBJECT_TYPE_PATH VARCHAR2 RETURN,SEQNO NUMBER RETURN,PROCOBJ_ERRORS TABLE RETURN, VARCHAR2 RETURN)
pt: DBMS_METADATA
fn: FREE_CONTEXT_ENTRY
fs: FREE_CONTEXT_ENTRY(IND NUMBER IN)
pt: DBMS_METADATA
fn: GET_DPSTRM_MD
fs: GET_DPSTRM_MD(SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN,MDVERSION VARCHAR2 IN,DPAPIVERSION NUMBER IN,DOC CLOB IN/OUT,NETWORK_LINK VARCHAR2 IN,FORCE_LOB_BE PL/SQL BOOLEAN IN,FORCE_NO_ENCRYPT PL/SQL BOOLEAN IN)
pt: DBMS_METADATA
fn: NETWORK_CALLOUTS
fs: NETWORK_CALLOUTS(HANDLE NUMBER IN)
pt: DBMS_METADATA
fn: NET_SET_DEBUG
fs: NET_SET_DEBUG(ON_OFF NUMBER IN)
pt: DBMS_METADATA
fn: PATCH_TYPEID
fs: PATCH_TYPEID(SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN,TYPEID VARCHAR2 IN,HASHCODE VARCHAR2 IN)
pt: DBMS_METADATA
fn: SET_COUNT
fs: SET_COUNT(HANDLE NUMBER IN,VALUE NUMBER IN,OBJECT_TYPE_PATH VARCHAR2 IN)
pt: DBMS_METADATA
fn: SET_DEBUG
fs: SET_DEBUG(ON_OFF PL/SQL BOOLEAN IN,IP_ADDR VARCHAR2 IN)
pt: DBMS_METADATA
fn: SET_FILTER
fs: SET_FILTER(HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE VARCHAR2 IN,OBJECT_TYPE_PATH VARCHAR2 IN,HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL BOOLEAN IN,OBJECT_TYPE_PATH VARCHAR2 IN,HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE NUMBER IN,OBJECT_TYPE_PATH VARCHAR2 IN)
pt: DBMS_METADATA
fn: SET_PARSE_ITEM
fs: SET_PARSE_ITEM(HANDLE NUMBER IN,NAME VARCHAR2 IN,OBJECT_TYPE VARCHAR2 IN)
pt: DBMS_METADATA
fn: SET_REMAP_PARAM
fs: SET_REMAP_PARAM(TRANSFORM_HANDLE NUMBER IN,NAME VARCHAR2 IN,OLD_VALUE VARCHAR2 IN,NEW_VALUE VARCHAR2 IN,OBJECT_TYPE VARCHAR2 IN)
pt: DBMS_METADATA
fn: SET_TRANSFORM_PARAM
fs: SET_TRANSFORM_PARAM(TRANSFORM_HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE VARCHAR2 IN,OBJECT_TYPE VARCHAR2 IN,TRANSFORM_HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL BOOLEAN IN,OBJECT_TYPE VARCHAR2 IN,TRANSFORM_HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE NUMBER IN,OBJECT_TYPE VARCHAR2 IN)
pt: DBMS_METADATA
fn: SET_XMLFORMAT
fs: SET_XMLFORMAT(HANDLE NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL BOOLEAN IN)
pt: DBMS_METADATA
fn: RESTOREREFCURSOR
fs: RESTOREREFCURSOR(RC REF CURSOR OUT,CURNUM NUMBER IN)
pt: DBMS_ODCI
fn: SAVEREFCURSOR
fs: SAVEREFCURSOR(RC REF CURSOR IN,CURNUM NUMBER OUT)
pt: DBMS_ODCI
fn: UPGRADE_SECOBJ
fs: UPGRADE_SECOBJ(OBJLIST TABLE IN)
pt: DBMS_ODCI
fn: ADD_CONFLICT_OFFLINE
fs: ADD_CONFLICT_OFFLINE(SNAME VARCHAR2 IN,ONAME VARCHAR2 IN,CONFLICT_TYPE_ID NUMBER IN,REFERENCE_NAME VARCHAR2 IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_FLAVOR_OBJECT_OFFLINE
fs: ADD_FLAVOR_OBJECT_OFFLINE(FLAVOR_ID NUMBER IN,SNAME VARCHAR2 IN,ONAME VARCHAR2 IN,TYPE NUMBER IN,COLUMNS_PRESENT VARCHAR2 IN,GROUP_NAME VARCHAR2 IN,GROUP_OWNER VARCHAR2 IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_FLAVOR_OFFLINE
fs: ADD_FLAVOR_OFFLINE(GROUP_NAME VARCHAR2 IN,GROUP_OWNER VARCHAR2 IN,FLAVOR_ID NUMBER IN,FLAVOR_NAME VARCHAR2 IN,F_CREATION_DATE VARCHAR2 IN,F_CREATED_BY VARCHAR2 IN,F_PUBLISHED VARCHAR2 IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_GROUPED_COLUMN_OFFLINE
fs: ADD_GROUPED_COLUMN_OFFLINE(SNAME VARCHAR2 IN,ONAME VARCHAR2 IN,GROUP_NAME VARCHAR2 IN,COLUMN_NAME VARCHAR2 IN,GROUP_COMMENT VARCHAR2 IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_INTERNAL_PKG
fs: ADD_INTERNAL_PKG(SNAME VARCHAR2 IN,ONAME VARCHAR2 IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_MASTER_OFFLINE
fs: ADD_MASTER_OFFLINE(SNAME VARCHAR2 IN,DBLINK VARCHAR2 IN,MASTER VARCHAR2 IN,MASTERDEF VARCHAR2 IN,SNAPMASTER VARCHAR2 IN,MASTER_COMMENT VARCHAR2 IN,SCHEMA_COMMENT VARCHAR2 IN,STATUS NUMBER IN,GROUP_OWNER VARCHAR2 IN,FLAVOR_ID NUMBER IN,SOURCE_DBVERSION NUMBER IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_PARAMETER_COLUMN_OFFLINE
fs: ADD_PARAMETER_COLUMN_OFFLINE(SNAME VARCHAR2 IN,ONAME VARCHAR2 IN,CONFLICT_TYPE_ID NUMBER IN,REFERENCE_NAME VARCHAR2 IN,SEQUENCE_NO NUMBER IN,PARAMETER_TABLE_NAME VARCHAR2 IN,PARAMETER_COLUMN_NAME VARCHAR2 IN,PARAMETER_SEQUENCE_NO NUMBER IN,COLUMN_POS NUMBER IN,ATTRIBUTE_SEQUENCE_NO NUMBER IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_PRIORITY_GROUP_OFFLINE
fs: ADD_PRIORITY_GROUP_OFFLINE(SNAME VARCHAR2 IN,PRIORITY_GROUP VARCHAR2 IN,DATA_TYPE_ID NUMBER IN,FIXED_DATA_LEN NUMBER IN,PRIORITY_COMMENT VARCHAR2 IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_PRIORITY_OFFLINE
fs: ADD_PRIORITY_OFFLINE(SNAME VARCHAR2 IN,PRIORITY_GROUP VARCHAR2 IN,PRIORITY NUMBER IN,RAW_VALUE RAW IN,CHAR_VALUE CHAR IN,NUMBER_VALUE NUMBER IN,DATE_VALUE DATE IN,VARCHAR2_VALUE VARCHAR2 IN,NCHAR_VALUE NCHAR IN,NVARCHAR2_VALUE NVARCHAR2 IN,LARGE_CHAR_VALUE CHAR IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_REPCOLUMN_OFFLINE
fs: ADD_REPCOLUMN_OFFLINE(SNAME VARCHAR2 IN,ONAME VARCHAR2 IN,TYPE NUMBER IN,CNAME VARCHAR2 IN,ID NUMBER IN,POS NUMBER IN,FLAG VARCHAR2 IN,CTYPE VARCHAR2 IN,LENGTH VARCHAR2 IN,PRECISION# VARCHAR2 IN,SCALE VARCHAR2 IN,C_NULL VARCHAR2 IN,C_CHARSETID VARCHAR2 IN,C_CHARSETFORM VARCHAR2 IN,CLENGTH VARCHAR2 IN,SEMANTICS VARCHAR2 IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_REPOBJECT_OFFLINE
fs: ADD_REPOBJECT_OFFLINE(SNAME VARCHAR2 IN,ONAME VARCHAR2 IN,TYPE NUMBER IN,OBJECT_COMMENT VARCHAR2 IN,STATUS NUMBER IN,GNAME VARCHAR2 IN,FLAG VARCHAR2 IN,GROUP_OWNER VARCHAR2 IN,DBLINK VARCHAR2 IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_RESOLUTION_OFFLINE
fs: ADD_RESOLUTION_OFFLINE(SNAME VARCHAR2 IN,ONAME VARCHAR2 IN,CONFLICT_TYPE_ID NUMBER IN,REFERENCE_NAME VARCHAR2 IN,SEQUENCE_NO NUMBER IN,METHOD_NAME VARCHAR2 IN,FUNCTION_NAME VARCHAR2 IN,PRIORITY_GROUP VARCHAR2 IN,RESOLUTION_COMMENT VARCHAR2 IN)
pt: DBMS_OFFLINE_RGT
fn: ADD_SNAPMASTER_OFFLINE
fs: ADD_SNAPMASTER_OFFLINE(SNAME VARCHAR2 IN,MASTER_COMMENT VARCHAR2 IN,GROUP_OWNER VARCHAR2 IN,LINK_QUALIFIER VARCHAR2 IN)
pt: DBMS_OFFLINE_RGT
fn: UPDATE_COLUMN_ID_OFFLINE
fs: UPDATE_COLUMN_ID_OFFLINE(CANON_SNAME VARCHAR2 IN,CANON_ONAME VARCHAR2 IN,TYPE_ID NUMBER IN)
pt: DBMS_OFFLINE_RGT
fn: DISABLE
fs: DISABLE(NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_OUTPUT
fn: ENABLE
fs: ENABLE(BUFFER_SIZE NUMBER IN)
pt: DBMS_OUTPUT
fn: GET_LINE
fs: GET_LINE(LINE VARCHAR2 OUT,STATUS NUMBER OUT)
pt: DBMS_OUTPUT
fn: GET_LINES
fs: GET_LINES(LINES PL/SQL TABLE RETURN, VARCHAR2 RETURN,NUMLINES NUMBER IN/OUT,LINES VARRAY RETURN, VARCHAR2 RETURN,NUMLINES NUMBER IN/OUT)
pt: DBMS_OUTPUT
fn: NEW_LINE
fs: NEW_LINE()
pt: DBMS_OUTPUT
fn: PUT
fs: PUT(A VARCHAR2 IN)
pt: DBMS_OUTPUT
fn: PUT_LINE
fs: PUT_LINE(A VARCHAR2 IN)
pt: DBMS_OUTPUT
fn: BUILD_PART_INDEX
fs: BUILD_PART_INDEX(JOBS_PER_BATCH NUMBER IN,PROCS_PER_JOB NUMBER IN,TAB_NAME VARCHAR2 IN,IDX_NAME VARCHAR2 IN,FORCE_OPT PL/SQL BOOLEAN IN)
pt: DBMS_PCLXUTIL
fn: KCP_PD
fs: KCP_PD(STR1 VARCHAR2 IN,STR2 VARCHAR2 IN,STR3 VARCHAR2 IN,STR4 VARCHAR2 IN,STR5 VARCHAR2 IN,STR6 VARCHAR2 IN,STR7 VARCHAR2 IN,BIN1 BINARY_INTEGER IN)
pt: DBMS_PLUGTSP
fn: KCP_PTMD
fs: KCP_PTMD(SCHEMANAME VARCHAR2 IN,TABLENAME VARCHAR2 IN,MDCLOB CLOB IN,EXPSRVRENDIAN BINARY_INTEGER IN,IMPSRVRENDIAN BINARY_INTEGER IN)
pt: DBMS_PLUGTSP
fn: PATCHDICTIONARY
fs: PATCHDICTIONARY(STR1 VARCHAR2 IN,STR2 VARCHAR2 IN,STR3 VARCHAR2 IN,STR4 VARCHAR2 IN,STR5 VARCHAR2 IN,STR6 VARCHAR2 IN,STR7 VARCHAR2 IN,BIN1 BINARY_INTEGER IN)
pt: DBMS_PLUGTSP
fn: PATCHTABLEMETADATA
fs: PATCHTABLEMETADATA(SCHEMANAME VARCHAR2 IN,TABLENAME VARCHAR2 IN,MDCLOB CLOB IN,EXPSRVRENDIAN BINARY_INTEGER IN,IMPSRVRENDIAN BINARY_INTEGER IN)
pt: DBMS_PLUGTSP
fn: PRINT_POST_PROCESSED_SOURCE
fs: PRINT_POST_PROCESSED_SOURCE(OBJECT_TYPE VARCHAR2 IN,SCHEMA_NAME VARCHAR2 IN,OBJECT_NAME VARCHAR2 IN,SOURCE VARCHAR2 IN,SOURCE PL/SQL TABLE IN, VARCHAR2 IN)
pt: DBMS_PREPROCESSOR
fn: GET_VERSION
fs: GET_VERSION(MAJOR BINARY_INTEGER OUT,MINOR BINARY_INTEGER OUT)
pt: DBMS_PROFILER
fn: ROLLUP_RUN
fs: ROLLUP_RUN(RUN_NUMBER NUMBER IN)
pt: DBMS_PROFILER
fn: ROLLUP_UNIT
fs: ROLLUP_UNIT(RUN_NUMBER NUMBER IN,UNIT NUMBER IN)
pt: DBMS_PROFILER
fn: ADD_IN_MEMORY_PAGE
fs: ADD_IN_MEMORY_PAGE(NAME VARCHAR2 IN,CONTENT PL/SQL TABLE IN)
pt: DBMS_PSP
fn: ADD_IN_MEMORY_PAGES
fs: ADD_IN_MEMORY_PAGES(NAMES PL/SQL TABLE IN,CONTENTS PL/SQL TABLE IN,LENGTHS PL/SQL TABLE IN)
pt: DBMS_PSP
fn: CLEAR_IN_MEMORY_PAGES
fs: CLEAR_IN_MEMORY_PAGES()
pt: DBMS_PSP
fn: SET_DOCUMENT_TABLE
fs: SET_DOCUMENT_TABLE(DOC_TABLE VARCHAR2 IN,NAME_COL VARCHAR2 IN,CONTENT_COL VARCHAR2 IN)
pt: DBMS_PSP
fn: INITIALIZE
fs: INITIALIZE(VAL BINARY_INTEGER IN)
pt: DBMS_RANDOM
fn: SEED
fs: SEED(VAL BINARY_INTEGER IN,VAL VARCHAR2 IN)
pt: DBMS_RANDOM
fn: TERMINATE
fs: TERMINATE()
pt: DBMS_RANDOM
fn: ADD
fs: ADD(NAME VARCHAR2 IN,LIST VARCHAR2 IN,LAX PL/SQL BOOLEAN IN,SITEID BINARY_INTEGER IN,EXPORT_DB VARCHAR2 IN,NAME VARCHAR2 IN,TAB PL/SQL TABLE IN, VARCHAR2 IN,LAX PL/SQL BOOLEAN IN,SITEID BINARY_INTEGER IN,EXPORT_DB VARCHAR2 IN)
pt: DBMS_REFRESH
fn: CHANGE
fs: CHANGE(NAME VARCHAR2 IN,NEXT_DATE DATE IN,INTERVAL VARCHAR2 IN,IMPLICIT_DESTROY PL/SQL BOOLEAN IN,ROLLBACK_SEG VARCHAR2 IN,PUSH_DEFERRED_RPC PL/SQL BOOLEAN IN,REFRESH_AFTER_ERRORS PL/SQL BOOLEAN IN,PURGE_OPTION BINARY_INTEGER IN,PARALLELISM BINARY_INTEGER IN,HEAP_SIZE BINARY_INTEGER IN)
pt: DBMS_REFRESH
fn: DESTROY
fs: DESTROY(NAME VARCHAR2 IN)
pt: DBMS_REFRESH
fn: MAKE
fs: MAKE(NAME VARCHAR2 IN,LIST VARCHAR2 IN,NEXT_DATE DATE IN,INTERVAL VARCHAR2 IN,IMPLICIT_DESTROY PL/SQL BOOLEAN IN,LAX PL/SQL BOOLEAN IN,JOB BINARY_INTEGER IN,ROLLBACK_SEG VARCHAR2 IN,PUSH_DEFERRED_RPC PL/SQL BOOLEAN IN,REFRESH_AFTER_ERRORS PL/SQL BOOLEAN IN,PURGE_OPTION BINARY_INTEGER IN,PARALLELISM BINARY_INTEGER IN,HEAP_SIZE BINARY_INTEGER IN,NAME VARCHAR2 IN,TAB PL/SQL TABLE IN, VARCHAR2 IN,NEXT_DATE DATE IN,INTERVAL VARCHAR2 IN,IMPLICIT_DESTROY PL/SQL BOOLEAN IN,LAX PL/SQL BOOLEAN IN,JOB BINARY_INTEGER IN,ROLLBACK_SEG VARCHAR2 IN,PUSH_DEFERRED_RPC PL/SQL BOOLEAN IN,REFRESH_AFTER_ERRORS PL/SQL BOOLEAN IN,PURGE_OPTION BINARY_INTEGER IN,PARALLELISM BINARY_INTEGER IN,HEAP_SIZE BINARY_INTEGER IN)
pt: DBMS_REFRESH
fn: MAKE_REPAPI
fs: MAKE_REPAPI(REFGROUP BINARY_INTEGER IN,NAME VARCHAR2 IN,SITEID BINARY_INTEGER IN,REFRESH_SEQ BINARY_INTEGER IN,EXPORT_DB VARCHAR2 IN,FLAG BINARY_INTEGER IN)
pt: DBMS_REFRESH
fn: REFRESH
fs: REFRESH(NAME VARCHAR2 IN)
pt: DBMS_REFRESH
fn: SUBTRACT
fs: SUBTRACT(NAME VARCHAR2 IN,LIST VARCHAR2 IN,LAX PL/SQL BOOLEAN IN,NAME VARCHAR2 IN,TAB PL/SQL TABLE IN, VARCHAR2 IN,LAX PL/SQL BOOLEAN IN)
pt: DBMS_REFRESH
fn: USER_EXPORT
fs: USER_EXPORT(RG# BINARY_INTEGER IN,MYCALL VARCHAR2 IN/OUT)
pt: DBMS_REFRESH
fn: USER_EXPORT_CHILD
fs: USER_EXPORT_CHILD(MYOWNER VARCHAR2 IN,MYNAME VARCHAR2 IN,MYTYPE VARCHAR2 IN,MYCALL VARCHAR2 IN/OUT,MYSITE BINARY_INTEGER IN)
pt: DBMS_REFRESH
fn: ADD_LWM
fs: ADD_LWM(EXPORT_DB VARCHAR2 IN,SOURCE_SITE_ID BINARY_INTEGER IN,LAST_TRAN_ID BINARY_INTEGER IN,DISABLED VARCHAR2 IN)
pt: DBMS_REFRESH_EXP_LWM
fn: ADD_SITE
fs: ADD_SITE(EXPORT_DB VARCHAR2 IN,SITE_ID BINARY_INTEGER IN,SITE_NAME VARCHAR2 IN)
pt: DBMS_REFRESH_EXP_SITES
fn: DROP_SITE_INSTANTIATION
fs: DROP_SITE_INSTANTIATION(REFRESH_TEMPLATE_NAME VARCHAR2 IN,SITE_NAME VARCHAR2 IN)
pt: DBMS_REPCAT_INSTANTIATE
fn: ADD_SITE_INST
fs: ADD_SITE_INST(EXPORT_DB VARCHAR2 IN,TEMPLATE_SITE_ID BINARY_INTEGER IN,REFRESH_TEMPLATE_NAME VARCHAR2 IN,REFRESH_GROUP_NAME VARCHAR2 IN,TEMPLATE_OWNER VARCHAR2 IN,USER_NAME VARCHAR2 IN,REPAPI_SITE_ID BINARY_INTEGER IN,STATUS BINARY_INTEGER IN)
pt: DBMS_REPCAT_RGT_EXP
fn: CANONICALIZE
fs: CANONICALIZE(NAME VARCHAR2 IN,CANON_NAME VARCHAR2 OUT,CANON_LEN NUMBER IN)
pt: DBMS_REPUTIL
fn: ENSURE_NORMAL_STATUS
fs: ENSURE_NORMAL_STATUS(CANON_GNAME VARCHAR2 IN,CANON_GOWNER VARCHAR2 IN)
pt: DBMS_REPUTIL
fn: ENTER_STATISTICS
fs: ENTER_STATISTICS(SNAME VARCHAR2 IN,ONAME VARCHAR2 IN,CONFLICT_TYPE VARCHAR2 IN,REFERENCE_NAME VARCHAR2 IN,METHOD_NAME VARCHAR2 IN,FUNCTION_NAME VARCHAR2 IN,PRIORITY_GROUP VARCHAR2 IN,PRIMARY_KEY_VALUE VARCHAR2 IN,RESOLVED_DATE DATE IN)
pt: DBMS_REPUTIL
fn: MAKE_INTERNAL_PKG
fs: MAKE_INTERNAL_PKG(CANON_SNAME VARCHAR2 IN,CANON_ONAME VARCHAR2 IN)
pt: DBMS_REPUTIL
fn: RAW_TO_VARCHAR2
fs: RAW_TO_VARCHAR2(R RAW IN,OFFSET BINARY_INTEGER IN,V VARCHAR2 OUT)
pt: DBMS_REPUTIL
fn: RECURSION_OFF
fs: RECURSION_OFF()
pt: DBMS_REPUTIL
fn: RECURSION_ON
fs: RECURSION_ON()
pt: DBMS_REPUTIL
fn: REPLICATION_OFF
fs: REPLICATION_OFF()
pt: DBMS_REPUTIL
fn: REPLICATION_ON
fs: REPLICATION_ON()
pt: DBMS_REPUTIL
fn: REP_BEGIN
fs: REP_BEGIN(SITE_NAME VARCHAR2 IN)
pt: DBMS_REPUTIL
fn: REP_END
fs: REP_END()
pt: DBMS_REPUTIL
fn: SET_GLOBAL_NAME
fs: SET_GLOBAL_NAME(GDBNAME VARCHAR2 IN)
pt: DBMS_REPUTIL
fn: SYNC_UP_REP
fs: SYNC_UP_REP(CANON_SNAME VARCHAR2 IN,CANON_ONAME VARCHAR2 IN)
pt: DBMS_REPUTIL
fn: BIC
fs: BIC(FLAG RAW IN/OUT,BIT_OFFSET NUMBER IN)
pt: DBMS_REPUTIL2
fn: BIS
fs: BIS(FLAG RAW IN/OUT,BIT_OFFSET NUMBER IN)
pt: DBMS_REPUTIL2
fn: CLEAR_PENDING_AREA
fs: CLEAR_PENDING_AREA()
pt: DBMS_RESOURCE_MANAGER
fn: CREATE_CONSUMER_GROUP
fs: CREATE_CONSUMER_GROUP(CONSUMER_GROUP VARCHAR2 IN,COMMENT VARCHAR2 IN,CPU_MTH VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: CREATE_PENDING_AREA
fs: CREATE_PENDING_AREA()
pt: DBMS_RESOURCE_MANAGER
fn: CREATE_PLAN
fs: CREATE_PLAN(PLAN VARCHAR2 IN,COMMENT VARCHAR2 IN,CPU_MTH VARCHAR2 IN,ACTIVE_SESS_POOL_MTH VARCHAR2 IN,PARALLEL_DEGREE_LIMIT_MTH VARCHAR2 IN,QUEUEING_MTH VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: CREATE_PLAN_DIRECTIVE
fs: CREATE_PLAN_DIRECTIVE(PLAN VARCHAR2 IN,GROUP_OR_SUBPLAN VARCHAR2 IN,COMMENT VARCHAR2 IN,CPU_P1 NUMBER IN,CPU_P2 NUMBER IN,CPU_P3 NUMBER IN,CPU_P4 NUMBER IN,CPU_P5 NUMBER IN,CPU_P6 NUMBER IN,CPU_P7 NUMBER IN,CPU_P8 NUMBER IN,ACTIVE_SESS_POOL_P1 NUMBER IN,QUEUEING_P1 NUMBER IN,PARALLEL_DEGREE_LIMIT_P1 NUMBER IN,SWITCH_GROUP VARCHAR2 IN,SWITCH_TIME NUMBER IN,SWITCH_ESTIMATE PL/SQL BOOLEAN IN,MAX_EST_EXEC_TIME NUMBER IN,UNDO_POOL NUMBER IN,MAX_IDLE_TIME NUMBER IN,MAX_IDLE_BLOCKER_TIME NUMBER IN,SWITCH_TIME_IN_CALL NUMBER IN)
pt: DBMS_RESOURCE_MANAGER
fn: CREATE_SIMPLE_PLAN
fs: CREATE_SIMPLE_PLAN(SIMPLE_PLAN VARCHAR2 IN,CONSUMER_GROUP1 VARCHAR2 IN,GROUP1_CPU NUMBER IN,CONSUMER_GROUP2 VARCHAR2 IN,GROUP2_CPU NUMBER IN,CONSUMER_GROUP3 VARCHAR2 IN,GROUP3_CPU NUMBER IN,CONSUMER_GROUP4 VARCHAR2 IN,GROUP4_CPU NUMBER IN,CONSUMER_GROUP5 VARCHAR2 IN,GROUP5_CPU NUMBER IN,CONSUMER_GROUP6 VARCHAR2 IN,GROUP6_CPU NUMBER IN,CONSUMER_GROUP7 VARCHAR2 IN,GROUP7_CPU NUMBER IN,CONSUMER_GROUP8 VARCHAR2 IN,GROUP8_CPU NUMBER IN)
pt: DBMS_RESOURCE_MANAGER
fn: DELETE_CONSUMER_GROUP
fs: DELETE_CONSUMER_GROUP(CONSUMER_GROUP VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: DELETE_PLAN
fs: DELETE_PLAN(PLAN VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: DELETE_PLAN_CASCADE
fs: DELETE_PLAN_CASCADE(PLAN VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: DELETE_PLAN_DIRECTIVE
fs: DELETE_PLAN_DIRECTIVE(PLAN VARCHAR2 IN,GROUP_OR_SUBPLAN VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: SET_CONSUMER_GROUP_MAPPING
fs: SET_CONSUMER_GROUP_MAPPING(ATTRIBUTE VARCHAR2 IN,VALUE VARCHAR2 IN,CONSUMER_GROUP VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: SET_CONSUMER_GROUP_MAPPING_PRI
fs: SET_CONSUMER_GROUP_MAPPING_PRI(EXPLICIT NUMBER IN,ORACLE_USER NUMBER IN,SERVICE_NAME NUMBER IN,CLIENT_OS_USER NUMBER IN,CLIENT_PROGRAM NUMBER IN,CLIENT_MACHINE NUMBER IN,MODULE_NAME NUMBER IN,MODULE_NAME_ACTION NUMBER IN,SERVICE_MODULE NUMBER IN,SERVICE_MODULE_ACTION NUMBER IN)
pt: DBMS_RESOURCE_MANAGER
fn: SET_INITIAL_CONSUMER_GROUP
fs: SET_INITIAL_CONSUMER_GROUP(USER VARCHAR2 IN,CONSUMER_GROUP VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: SUBMIT_PENDING_AREA
fs: SUBMIT_PENDING_AREA()
pt: DBMS_RESOURCE_MANAGER
fn: SWITCH_CONSUMER_GROUP_FOR_SESS
fs: SWITCH_CONSUMER_GROUP_FOR_SESS(SESSION_ID NUMBER IN,SESSION_SERIAL NUMBER IN,CONSUMER_GROUP VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: SWITCH_CONSUMER_GROUP_FOR_USER
fs: SWITCH_CONSUMER_GROUP_FOR_USER(USER VARCHAR2 IN,CONSUMER_GROUP VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: SWITCH_PLAN
fs: SWITCH_PLAN(PLAN_NAME VARCHAR2 IN,SID VARCHAR2 IN,ALLOW_SCHEDULER_PLAN_SWITCHES PL/SQL BOOLEAN IN)
pt: DBMS_RESOURCE_MANAGER
fn: UPDATE_CONSUMER_GROUP
fs: UPDATE_CONSUMER_GROUP(CONSUMER_GROUP VARCHAR2 IN,NEW_COMMENT VARCHAR2 IN,NEW_CPU_MTH VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: UPDATE_PLAN
fs: UPDATE_PLAN(PLAN VARCHAR2 IN,NEW_COMMENT VARCHAR2 IN,NEW_CPU_MTH VARCHAR2 IN,NEW_ACTIVE_SESS_POOL_MTH VARCHAR2 IN,NEW_PARALLEL_DEGREE_LIMIT_MTH VARCHAR2 IN,NEW_QUEUEING_MTH VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER
fn: UPDATE_PLAN_DIRECTIVE
fs: UPDATE_PLAN_DIRECTIVE(PLAN VARCHAR2 IN,GROUP_OR_SUBPLAN VARCHAR2 IN,NEW_COMMENT VARCHAR2 IN,NEW_CPU_P1 NUMBER IN,NEW_CPU_P2 NUMBER IN,NEW_CPU_P3 NUMBER IN,NEW_CPU_P4 NUMBER IN,NEW_CPU_P5 NUMBER IN,NEW_CPU_P6 NUMBER IN,NEW_CPU_P7 NUMBER IN,NEW_CPU_P8 NUMBER IN,NEW_ACTIVE_SESS_POOL_P1 NUMBER IN,NEW_QUEUEING_P1 NUMBER IN,NEW_PARALLEL_DEGREE_LIMIT_P1 NUMBER IN,NEW_SWITCH_GROUP VARCHAR2 IN,NEW_SWITCH_TIME NUMBER IN,NEW_SWITCH_ESTIMATE PL/SQL BOOLEAN IN,NEW_MAX_EST_EXEC_TIME NUMBER IN,NEW_UNDO_POOL NUMBER IN,NEW_MAX_IDLE_TIME NUMBER IN,NEW_MAX_IDLE_BLOCKER_TIME NUMBER IN,NEW_SWITCH_TIME_IN_CALL NUMBER IN)
pt: DBMS_RESOURCE_MANAGER
fn: VALIDATE_PENDING_AREA
fs: VALIDATE_PENDING_AREA()
pt: DBMS_RESOURCE_MANAGER
fn: GRANT_SWITCH_CONSUMER_GROUP
fs: GRANT_SWITCH_CONSUMER_GROUP(GRANTEE_NAME VARCHAR2 IN,CONSUMER_GROUP VARCHAR2 IN,GRANT_OPTION PL/SQL BOOLEAN IN)
pt: DBMS_RESOURCE_MANAGER_PRIVS
fn: GRANT_SYSTEM_PRIVILEGE
fs: GRANT_SYSTEM_PRIVILEGE(GRANTEE_NAME VARCHAR2 IN,PRIVILEGE_NAME VARCHAR2 IN,ADMIN_OPTION PL/SQL BOOLEAN IN)
pt: DBMS_RESOURCE_MANAGER_PRIVS
fn: REVOKE_SWITCH_CONSUMER_GROUP
fs: REVOKE_SWITCH_CONSUMER_GROUP(REVOKEE_NAME VARCHAR2 IN,CONSUMER_GROUP VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER_PRIVS
fn: REVOKE_SYSTEM_PRIVILEGE
fs: REVOKE_SYSTEM_PRIVILEGE(REVOKEE_NAME VARCHAR2 IN,PRIVILEGE_NAME VARCHAR2 IN)
pt: DBMS_RESOURCE_MANAGER_PRIVS
fn: INSTALL
fs: INSTALL()
pt: DBMS_RMIN
fn: RM$_CLRPAREA
fs: RM$_CLRPAREA(INSTALL PL/SQL BOOLEAN IN)
pt: DBMS_RMIN
fn: RM$_CONSUMER_GROUP_MAPPING_PRI
fs: RM$_CONSUMER_GROUP_MAPPING_PRI(EXPLICIT NUMBER IN,ORACLE_USER NUMBER IN,SERVICE_NAME NUMBER IN,CLIENT_OS_USER NUMBER IN,CLIENT_PROGRAM NUMBER IN,CLIENT_MACHINE NUMBER IN,MODULE_NAME NUMBER IN,MODULE_NAME_ACTION NUMBER IN,SERVICE_MODULE NUMBER IN,SERVICE_MODULE_ACTION NUMBER IN,CLIENT_ID NUMBER IN)
pt: DBMS_RMIN
fn: RM$_CRTPAREA
fs: RM$_CRTPAREA(INSTALL PL/SQL BOOLEAN IN)
pt: DBMS_RMIN
fn: RM$_CRT_PLAN_DIRECTIVE
fs: RM$_CRT_PLAN_DIRECTIVE(PLAN VARCHAR2 IN,GROUP_OR_SUBPLAN VARCHAR2 IN,COMMENT VARCHAR2 IN,CPU_P1 NUMBER IN,CPU_P2 NUMBER IN,CPU_P3 NUMBER IN,CPU_P4 NUMBER IN,CPU_P5 NUMBER IN,CPU_P6 NUMBER IN,CPU_P7 NUMBER IN,CPU_P8 NUMBER IN,ACTIVE_SESS_POOL_P1 NUMBER IN,QUEUEING_P1 NUMBER IN,PARALLEL_DEGREE_LIMIT_P1 NUMBER IN,SWITCH_GROUP VARCHAR2 IN,SWITCH_TIME NUMBER IN,SWITCH_ESTIMATE PL/SQL BOOLEAN IN,MAX_EST_EXEC_TIME NUMBER IN,UNDO_POOL NUMBER IN,MAX_IDLE_TIME NUMBER IN,MAX_IDLE_BLOCKER_TIME NUMBER IN,SWITCH_BACK_AT_CALL_END PL/SQL BOOLEAN IN,CRT_OPTION PL/SQL BOOLEAN IN,MANDATORY PL/SQL BOOLEAN IN)
pt: DBMS_RMIN
fn: RM$_CUP_GROUP
fs: RM$_CUP_GROUP(CONSUMER_GROUP VARCHAR2 IN,COMMENT VARCHAR2 IN,CPU_MTH VARCHAR2 IN,CRT_OPTION PL/SQL BOOLEAN IN,MANDATORY PL/SQL BOOLEAN IN)
pt: DBMS_RMIN
fn: RM$_CUP_PLAN
fs: RM$_CUP_PLAN(PLAN VARCHAR2 IN,COMMENT VARCHAR2 IN,CPU_MTH VARCHAR2 IN,ACTIVE_SESS_POOL_MTH VARCHAR2 IN,PARALLEL_DEGREE_LIMIT_MTH VARCHAR2 IN,QUEUEING_MTH VARCHAR2 IN,CRT_OPTION PL/SQL BOOLEAN IN,MANDATORY PL/SQL BOOLEAN IN)
pt: DBMS_RMIN
fn: RM$_CUP_PLAN_DIRECTIVE
fs: RM$_CUP_PLAN_DIRECTIVE(PLAN VARCHAR2 IN,GROUP_OR_SUBPLAN VARCHAR2 IN,COMMENT VARCHAR2 IN,CPU_P1 NUMBER IN,CPU_P2 NUMBER IN,CPU_P3 NUMBER IN,CPU_P4 NUMBER IN,CPU_P5 NUMBER IN,CPU_P6 NUMBER IN,CPU_P7 NUMBER IN,CPU_P8 NUMBER IN,ACTIVE_SESS_POOL_P1 NUMBER IN,QUEUEING_P1 NUMBER IN,PARALLEL_DEGREE_LIMIT_P1 NUMBER IN,SWITCH_GROUP VARCHAR2 IN,SWITCH_TIME NUMBER IN,SWITCH_ESTIMATE PL/SQL BOOLEAN IN,MAX_EST_EXEC_TIME NUMBER IN,UNDO_POOL NUMBER IN,MAX_IDLE_TIME NUMBER IN,MAX_IDLE_BLOCKER_TIME NUMBER IN,SWITCH_BACK_AT_CALL_END PL/SQL BOOLEAN IN,CRT_OPTION PL/SQL BOOLEAN IN,MANDATORY PL/SQL BOOLEAN IN)
pt: DBMS_RMIN
fn: RM$_DRP_GROUP
fs: RM$_DRP_GROUP(CONSUMER_GROUP VARCHAR2 IN,MANDATORY_DRP PL/SQL BOOLEAN IN)
pt: DBMS_RMIN
fn: RM$_DRP_PLAN
fs: RM$_DRP_PLAN(PLAN VARCHAR2 IN,MANDATORY_DRP PL/SQL BOOLEAN IN)
pt: DBMS_RMIN
fn: RM$_DRP_PLAN_CSD
fs: RM$_DRP_PLAN_CSD(PLAN VARCHAR2 IN)
pt: DBMS_RMIN
fn: RM$_DRP_PLAN_DIRECTIVE
fs: RM$_DRP_PLAN_DIRECTIVE(PLAN VARCHAR2 IN,GROUP_OR_SUBPLAN VARCHAR2 IN,MANDATORY_DRP PL/SQL BOOLEAN IN)
pt: DBMS_RMIN
fn: RM$_PROCESS_PRIV
fs: RM$_PROCESS_PRIV(USERNAME VARCHAR2 IN,IS_SYSPRIV BINARY_INTEGER IN,ISGRANT BINARY_INTEGER IN,CLASS VARCHAR2 IN,GRANT_OR_ADMIN_OPTION BINARY_INTEGER IN,PRIV_CODE BINARY_INTEGER IN)
pt: DBMS_RMIN
fn: RM$_SET_CONSUMER_GROUP_MAPPING
fs: RM$_SET_CONSUMER_GROUP_MAPPING(ATTRIBUTE VARCHAR2 IN,NAME VARCHAR2 IN,CONSUMER_GROUP VARCHAR2 IN)
pt: DBMS_RMIN
fn: RM$_SET_INITIAL_GROUP
fs: RM$_SET_INITIAL_GROUP(USER VARCHAR2 IN,CONSUMER_GROUP VARCHAR2 IN)
pt: DBMS_RMIN
fn: RM$_SUBPAREA
fs: RM$_SUBPAREA()
pt: DBMS_RMIN
fn: RM$_SWTCH_SESSION_GROUP
fs: RM$_SWTCH_SESSION_GROUP(SESSION_ID NUMBER IN,SESSION_SERIAL NUMBER IN,CONSUMER_GROUP VARCHAR2 IN)
pt: DBMS_RMIN
fn: RM$_SWTCH_USR_GROUP
fs: RM$_SWTCH_USR_GROUP(USER VARCHAR2 IN,CONSUMER_GROUP VARCHAR2 IN)
pt: DBMS_RMIN
fn: RM$_VLDPAREA
fs: RM$_VLDPAREA()
pt: DBMS_RMIN
fn: UNINSTALL
fs: UNINSTALL()
pt: DBMS_RMIN
fn: ROWID_INFO
fs: ROWID_INFO(ROWID_IN ROWID IN,ROWID_TYPE NUMBER OUT,OBJECT_NUMBER NUMBER OUT,RELATIVE_FNO NUMBER OUT,BLOCK_NUMBER NUMBER OUT,ROW_NUMBER NUMBER OUT,TS_TYPE_IN VARCHAR2 IN)
pt: DBMS_ROWID
fn: CLOSE_ITERATOR
fs: CLOSE_ITERATOR(ITERATOR BINARY_INTEGER IN)
pt: DBMS_RULE
fn: EVALUATE
fs: EVALUATE(RULE_SET_NAME VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,EVENT_CONTEXT SYS.RE$NV_LIST IN,TABLE_VALUES VARRAY IN, SYS.RE$TABLE_VALUE IN,COLUMN_VALUES VARRAY IN, SYS.RE$COLUMN_VALUE IN,VARIABLE_VALUES VARRAY IN, SYS.RE$VARIABLE_VALUE IN,ATTRIBUTE_VALUES VARRAY IN, SYS.RE$ATTRIBUTE_VALUE IN,STOP_ON_FIRST_HIT PL/SQL BOOLEAN IN,SIMPLE_RULES_ONLY PL/SQL BOOLEAN IN,TRUE_RULES VARRAY RETURN, SYS.RE$RULE_HIT RETURN,MAYBE_RULES VARRAY RETURN, SYS.RE$RULE_HIT RETURN,RULE_SET_NAME VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,EVENT_CONTEXT SYS.RE$NV_LIST IN,TABLE_VALUES VARRAY IN, SYS.RE$TABLE_VALUE IN,COLUMN_VALUES VARRAY IN, SYS.RE$COLUMN_VALUE IN,VARIABLE_VALUES VARRAY IN, SYS.RE$VARIABLE_VALUE IN,ATTRIBUTE_VALUES VARRAY IN, SYS.RE$ATTRIBUTE_VALUE IN,SIMPLE_RULES_ONLY PL/SQL BOOLEAN IN,TRUE_RULES_ITERATOR BINARY_INTEGER RETURN,MAYBE_RULES_ITERATOR BINARY_INTEGER RETURN)
pt: DBMS_RULE
fn: I_ALTER_RULE
fs: I_ALTER_RULE(RULE_NAME VARCHAR2 IN,CONDITION VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,REMOVE_EVALUATION_CONTEXT PL/SQL BOOLEAN IN,ACTION_CONTEXT OBJECT IN,REMOVE_ACTION_CONTEXT PL/SQL BOOLEAN IN,RULE_COMMENT VARCHAR2 IN,REMOVE_RULE_COMMENT PL/SQL BOOLEAN IN,INTERNAL_ACTX_CLIENT VARCHAR2 IN,INTERNAL_ACTION_CONTEXT OBJECT IN,REMOVE_INT_ACTX PL/SQL BOOLEAN IN)
pt: DBMS_RULEADM_INTERNAL
fn: I_CREATE_EVAL_CTX
fs: I_CREATE_EVAL_CTX(EVALUATION_CONTEXT_NAME VARCHAR2 IN,TABLE_ALIASES VARRAY IN,VARIABLE_TYPES VARRAY IN,EVALUATION_FUNCTION VARCHAR2 IN,EVALUATION_CONTEXT_COMMENT VARCHAR2 IN,EVAL_CTX_PROPERTIES NUMBER IN)
pt: DBMS_RULEADM_INTERNAL
fn: I_CREATE_RULE
fs: I_CREATE_RULE(RULE_NAME VARCHAR2 IN,CONDITION VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,ACTION_CONTEXT OBJECT IN,RULE_COMMENT VARCHAR2 IN,RULE_PROPERTIES NUMBER IN,INTERNAL_ACTX_CLIENT VARCHAR2 IN,INTERNAL_ACTION_CONTEXT OBJECT IN)
pt: DBMS_RULEADM_INTERNAL
fn: I_CREATE_RULE_SET
fs: I_CREATE_RULE_SET(RULE_SET_NAME VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,RULE_SET_COMMENT VARCHAR2 IN,RULE_SET_PROPERTIES NUMBER IN)
pt: DBMS_RULEADM_INTERNAL
fn: PATCH_RULE_PRIV
fs: PATCH_RULE_PRIV(BTAB_SCHEMA VARCHAR2 IN,BTAB_NAME VARCHAR2 IN,CONDITION VARCHAR2 IN)
pt: DBMS_RULEADM_INTERNAL
fn: REGISTER_INTERNAL_ACTX
fs: REGISTER_INTERNAL_ACTX(CLIENT_NAME VARCHAR2 IN,EXPORT_FUNCTION VARCHAR2 IN,CLIENT_COMMENT VARCHAR2 IN)
pt: DBMS_RULEADM_INTERNAL
fn: UNREGISTER_INTERNAL_ACTX
fs: UNREGISTER_INTERNAL_ACTX(CLIENT_NAME VARCHAR2 IN)
pt: DBMS_RULEADM_INTERNAL
fn: VALIDATE_RE_OBJECT
fs: VALIDATE_RE_OBJECT(OBJECT_NAME VARCHAR2 IN,OBJECT_NAMESPACE BINARY_INTEGER IN)
pt: DBMS_RULEADM_INTERNAL
fn: ADD_RULE
fs: ADD_RULE(RULE_NAME VARCHAR2 IN,RULE_SET_NAME VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,RULE_COMMENT VARCHAR2 IN)
pt: DBMS_RULE_ADM
fn: ALTER_EVALUATION_CONTEXT
fs: ALTER_EVALUATION_CONTEXT(EVALUATION_CONTEXT_NAME VARCHAR2 IN,TABLE_ALIASES VARRAY IN,REMOVE_TABLE_ALIASES PL/SQL BOOLEAN IN,VARIABLE_TYPES VARRAY IN,REMOVE_VARIABLE_TYPES PL/SQL BOOLEAN IN,EVALUATION_FUNCTION VARCHAR2 IN,REMOVE_EVALUATION_FUNCTION PL/SQL BOOLEAN IN,EVALUATION_CONTEXT_COMMENT VARCHAR2 IN,REMOVE_EVAL_CONTEXT_COMMENT PL/SQL BOOLEAN IN)
pt: DBMS_RULE_ADM
fn: ALTER_RULE
fs: ALTER_RULE(RULE_NAME VARCHAR2 IN,CONDITION VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,REMOVE_EVALUATION_CONTEXT PL/SQL BOOLEAN IN,ACTION_CONTEXT OBJECT IN,REMOVE_ACTION_CONTEXT PL/SQL BOOLEAN IN,RULE_COMMENT VARCHAR2 IN,REMOVE_RULE_COMMENT PL/SQL BOOLEAN IN)
pt: DBMS_RULE_ADM
fn: CREATE_EVALUATION_CONTEXT
fs: CREATE_EVALUATION_CONTEXT(EVALUATION_CONTEXT_NAME VARCHAR2 IN,TABLE_ALIASES VARRAY IN,VARIABLE_TYPES VARRAY IN,EVALUATION_FUNCTION VARCHAR2 IN,EVALUATION_CONTEXT_COMMENT VARCHAR2 IN)
pt: DBMS_RULE_ADM
fn: CREATE_RULE
fs: CREATE_RULE(RULE_NAME VARCHAR2 IN,CONDITION VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,ACTION_CONTEXT OBJECT IN,RULE_COMMENT VARCHAR2 IN)
pt: DBMS_RULE_ADM
fn: CREATE_RULE_SET
fs: CREATE_RULE_SET(RULE_SET_NAME VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,RULE_SET_COMMENT VARCHAR2 IN)
pt: DBMS_RULE_ADM
fn: DROP_EVALUATION_CONTEXT
fs: DROP_EVALUATION_CONTEXT(EVALUATION_CONTEXT_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_RULE_ADM
fn: DROP_RULE
fs: DROP_RULE(RULE_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_RULE_ADM
fn: DROP_RULE_SET
fs: DROP_RULE_SET(RULE_SET_NAME VARCHAR2 IN,DELETE_RULES PL/SQL BOOLEAN IN)
pt: DBMS_RULE_ADM
fn: GRANT_OBJECT_PRIVILEGE
fs: GRANT_OBJECT_PRIVILEGE(PRIVILEGE BINARY_INTEGER IN,OBJECT_NAME VARCHAR2 IN,GRANTEE VARCHAR2 IN,GRANT_OPTION PL/SQL BOOLEAN IN)
pt: DBMS_RULE_ADM
fn: GRANT_SYSTEM_PRIVILEGE
fs: GRANT_SYSTEM_PRIVILEGE(PRIVILEGE BINARY_INTEGER IN,GRANTEE VARCHAR2 IN,GRANT_OPTION PL/SQL BOOLEAN IN)
pt: DBMS_RULE_ADM
fn: REMOVE_RULE
fs: REMOVE_RULE(RULE_NAME VARCHAR2 IN,RULE_SET_NAME VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,ALL_EVALUATION_CONTEXTS PL/SQL BOOLEAN IN)
pt: DBMS_RULE_ADM
fn: REVOKE_OBJECT_PRIVILEGE
fs: REVOKE_OBJECT_PRIVILEGE(PRIVILEGE BINARY_INTEGER IN,OBJECT_NAME VARCHAR2 IN,REVOKEE VARCHAR2 IN)
pt: DBMS_RULE_ADM
fn: REVOKE_SYSTEM_PRIVILEGE
fs: REVOKE_SYSTEM_PRIVILEGE(PRIVILEGE BINARY_INTEGER IN,REVOKEE VARCHAR2 IN)
pt: DBMS_RULE_ADM
fn: INSTANCE_CALLOUT
fs: INSTANCE_CALLOUT(NAME VARCHAR2 IN,SCHEMA VARCHAR2 IN,PREPOST BINARY_INTEGER IN,ISDBA BINARY_INTEGER IN,VERSION VARCHAR2 IN)
pt: DBMS_RULE_EXP_RULES
fn: SCHEMA_CALLOUT
fs: SCHEMA_CALLOUT(SCHEMA VARCHAR2 IN,PREPOST BINARY_INTEGER IN,ISDBA BINARY_INTEGER IN,VERSION VARCHAR2 IN)
pt: DBMS_RULE_EXP_RULES
fn: SYSTEM_CALLOUT
fs: SYSTEM_CALLOUT(PREPOST BINARY_INTEGER IN,VERSION VARCHAR2 IN)
pt: DBMS_RULE_EXP_RULES
fn: CHECK_PRIV
fs: CHECK_PRIV(SCHEMA VARCHAR2 IN)
pt: DBMS_RULE_EXP_UTLI
fn: IMPORT_ADD_RULE
fs: IMPORT_ADD_RULE(RULE_NAME VARCHAR2 IN,RULE_SET_NAME VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,RULE_COMMENT VARCHAR2 IN,RULE_PROPERTIES BINARY_INTEGER IN)
pt: DBMS_RULE_IMP_OBJ
fn: IMPORT_EVALUATION_CONTEXT
fs: IMPORT_EVALUATION_CONTEXT(EVALUATION_CONTEXT_NAME VARCHAR2 IN,TABLE_ALIASES VARRAY IN,VARIABLE_TYPES VARRAY IN,EVALUATION_FUNCTION VARCHAR2 IN,EVALUATION_CONTEXT_COMMENT VARCHAR2 IN,EVAL_CTX_PROPERTIES NUMBER IN)
pt: DBMS_RULE_IMP_OBJ
fn: IMPORT_RULE
fs: IMPORT_RULE(EXSCH VARCHAR2 IN,RULE_NAME VARCHAR2 IN,CONDITION VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,RULE_COMMENT VARCHAR2 IN,RULE_PROPERTIES NUMBER IN,INTERNAL_ACTX_CLIENT VARCHAR2 IN)
pt: DBMS_RULE_IMP_OBJ
fn: IMPORT_RULE_SET
fs: IMPORT_RULE_SET(RULE_SET_NAME VARCHAR2 IN,EVALUATION_CONTEXT VARCHAR2 IN,RULE_SET_COMMENT VARCHAR2 IN,RULE_SET_PROPERTIES NUMBER IN)
pt: DBMS_RULE_IMP_OBJ
fn: ADD_EVENT_QUEUE_SUBSCRIBER
fs: ADD_EVENT_QUEUE_SUBSCRIBER(SUBSCRIBER_NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: ADD_WINDOW_GROUP_MEMBER
fs: ADD_WINDOW_GROUP_MEMBER(GROUP_NAME VARCHAR2 IN,WINDOW_LIST VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: ALTER_CHAIN
fs: ALTER_CHAIN(CHAIN_NAME VARCHAR2 IN,STEP_NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: ALTER_RUNNING_CHAIN
fs: ALTER_RUNNING_CHAIN(JOB_NAME VARCHAR2 IN,STEP_NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE PL/SQL BOOLEAN IN,JOB_NAME VARCHAR2 IN,STEP_NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: ANALYZE_CHAIN
fs: ANALYZE_CHAIN(CHAIN_NAME VARCHAR2 IN,RULES TABLE IN,STEPS TABLE IN,STEP_PAIRS TABLE OUT)
pt: DBMS_SCHEDULER
fn: AUTO_PURGE
fs: AUTO_PURGE()
pt: DBMS_SCHEDULER
fn: CLOSE_WINDOW
fs: CLOSE_WINDOW(WINDOW_NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: COPY_JOB
fs: COPY_JOB(OLD_JOB VARCHAR2 IN,NEW_JOB VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: CREATE_CALENDAR_STRING
fs: CREATE_CALENDAR_STRING(FREQUENCY BINARY_INTEGER IN,INTERVAL BINARY_INTEGER IN,BYSECOND VARRAY IN,BYMINUTE VARRAY IN,BYHOUR VARRAY IN,BYDAY_DAYS VARRAY IN,BYDAY_OCCURRENCE VARRAY IN,BYMONTHDAY VARRAY IN,BYYEARDAY VARRAY IN,BYWEEKNO VARRAY IN,BYMONTH VARRAY IN,CALENDAR_STRING VARCHAR2 OUT)
pt: DBMS_SCHEDULER
fn: CREATE_CHAIN
fs: CREATE_CHAIN(CHAIN_NAME VARCHAR2 IN,RULE_SET_NAME VARCHAR2 IN,EVALUATION_INTERVAL INTERVAL DAY TO SECOND IN,COMMENTS VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: CREATE_EVENT_SCHEDULE
fs: CREATE_EVENT_SCHEDULE(SCHEDULE_NAME VARCHAR2 IN,START_DATE TIMESTAMP WITH TIME ZONE IN,EVENT_CONDITION VARCHAR2 IN,QUEUE_SPEC VARCHAR2 IN,END_DATE TIMESTAMP WITH TIME ZONE IN,COMMENTS VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: CREATE_JOB
fs: CREATE_JOB(JOB_NAME VARCHAR2 IN,JOB_TYPE VARCHAR2 IN,JOB_ACTION VARCHAR2 IN,NUMBER_OF_ARGUMENTS BINARY_INTEGER IN,START_DATE TIMESTAMP WITH TIME ZONE IN,REPEAT_INTERVAL VARCHAR2 IN,END_DATE TIMESTAMP WITH TIME ZONE IN,JOB_CLASS VARCHAR2 IN,ENABLED PL/SQL BOOLEAN IN,AUTO_DROP PL/SQL BOOLEAN IN,COMMENTS VARCHAR2 IN,JOB_NAME VARCHAR2 IN,JOB_TYPE VARCHAR2 IN,JOB_ACTION VARCHAR2 IN,NUMBER_OF_ARGUMENTS BINARY_INTEGER IN,START_DATE TIMESTAMP WITH TIME ZONE IN,EVENT_CONDITION VARCHAR2 IN,QUEUE_SPEC VARCHAR2 IN,END_DATE TIMESTAMP WITH TIME ZONE IN,JOB_CLASS VARCHAR2 IN,ENABLED PL/SQL BOOLEAN IN,AUTO_DROP PL/SQL BOOLEAN IN,COMMENTS VARCHAR2 IN,JOB_NAME VARCHAR2 IN,PROGRAM_NAME VARCHAR2 IN,SCHEDULE_NAME VARCHAR2 IN,JOB_CLASS VARCHAR2 IN,ENABLED PL/SQL BOOLEAN IN,AUTO_DROP PL/SQL BOOLEAN IN,COMMENTS VARCHAR2 IN,JOB_NAME VARCHAR2 IN,PROGRAM_NAME VARCHAR2 IN,START_DATE TIMESTAMP WITH TIME ZONE IN,REPEAT_INTERVAL VARCHAR2 IN,END_DATE TIMESTAMP WITH TIME ZONE IN,JOB_CLASS VARCHAR2 IN,ENABLED PL/SQL BOOLEAN IN,AUTO_DROP PL/SQL BOOLEAN IN,COMMENTS VARCHAR2 IN,JOB_NAME VARCHAR2 IN,PROGRAM_NAME VARCHAR2 IN,START_DATE TIMESTAMP WITH TIME ZONE IN,EVENT_CONDITION VARCHAR2 IN,QUEUE_SPEC VARCHAR2 IN,END_DATE TIMESTAMP WITH TIME ZONE IN,JOB_CLASS VARCHAR2 IN,ENABLED PL/SQL BOOLEAN IN,AUTO_DROP PL/SQL BOOLEAN IN,COMMENTS VARCHAR2 IN,JOB_NAME VARCHAR2 IN,SCHEDULE_NAME VARCHAR2 IN,JOB_TYPE VARCHAR2 IN,JOB_ACTION VARCHAR2 IN,NUMBER_OF_ARGUMENTS BINARY_INTEGER IN,JOB_CLASS VARCHAR2 IN,ENABLED PL/SQL BOOLEAN IN,AUTO_DROP PL/SQL BOOLEAN IN,COMMENTS VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: CREATE_JOB_CLASS
fs: CREATE_JOB_CLASS(JOB_CLASS_NAME VARCHAR2 IN,RESOURCE_CONSUMER_GROUP VARCHAR2 IN,SERVICE VARCHAR2 IN,LOGGING_LEVEL BINARY_INTEGER IN,LOG_HISTORY BINARY_INTEGER IN,COMMENTS VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: CREATE_PROGRAM
fs: CREATE_PROGRAM(PROGRAM_NAME VARCHAR2 IN,PROGRAM_TYPE VARCHAR2 IN,PROGRAM_ACTION VARCHAR2 IN,NUMBER_OF_ARGUMENTS BINARY_INTEGER IN,ENABLED PL/SQL BOOLEAN IN,COMMENTS VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: CREATE_SCHEDULE
fs: CREATE_SCHEDULE(SCHEDULE_NAME VARCHAR2 IN,START_DATE TIMESTAMP WITH TIME ZONE IN,REPEAT_INTERVAL VARCHAR2 IN,END_DATE TIMESTAMP WITH TIME ZONE IN,COMMENTS VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: CREATE_WINDOW
fs: CREATE_WINDOW(WINDOW_NAME VARCHAR2 IN,RESOURCE_PLAN VARCHAR2 IN,SCHEDULE_NAME VARCHAR2 IN,DURATION INTERVAL DAY TO SECOND IN,WINDOW_PRIORITY VARCHAR2 IN,COMMENTS VARCHAR2 IN,WINDOW_NAME VARCHAR2 IN,RESOURCE_PLAN VARCHAR2 IN,START_DATE TIMESTAMP WITH TIME ZONE IN,REPEAT_INTERVAL VARCHAR2 IN,END_DATE TIMESTAMP WITH TIME ZONE IN,DURATION INTERVAL DAY TO SECOND IN,WINDOW_PRIORITY VARCHAR2 IN,COMMENTS VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: CREATE_WINDOW_GROUP
fs: CREATE_WINDOW_GROUP(GROUP_NAME VARCHAR2 IN,WINDOW_LIST VARCHAR2 IN,COMMENTS VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: DEFINE_ANYDATA_ARGUMENT
fs: DEFINE_ANYDATA_ARGUMENT(PROGRAM_NAME VARCHAR2 IN,ARGUMENT_POSITION BINARY_INTEGER IN,ARGUMENT_NAME VARCHAR2 IN,ARGUMENT_TYPE VARCHAR2 IN,DEFAULT_VALUE UNDEFINED IN,OUT_ARGUMENT PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DEFINE_CHAIN_EVENT_STEP
fs: DEFINE_CHAIN_EVENT_STEP(CHAIN_NAME VARCHAR2 IN,STEP_NAME VARCHAR2 IN,EVENT_SCHEDULE_NAME VARCHAR2 IN,TIMEOUT INTERVAL DAY TO SECOND IN,CHAIN_NAME VARCHAR2 IN,STEP_NAME VARCHAR2 IN,EVENT_CONDITION VARCHAR2 IN,QUEUE_SPEC VARCHAR2 IN,TIMEOUT INTERVAL DAY TO SECOND IN)
pt: DBMS_SCHEDULER
fn: DEFINE_CHAIN_RULE
fs: DEFINE_CHAIN_RULE(CHAIN_NAME VARCHAR2 IN,CONDITION VARCHAR2 IN,ACTION VARCHAR2 IN,RULE_NAME VARCHAR2 IN,COMMENTS VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: DEFINE_CHAIN_STEP
fs: DEFINE_CHAIN_STEP(CHAIN_NAME VARCHAR2 IN,STEP_NAME VARCHAR2 IN,PROGRAM_NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: DEFINE_METADATA_ARGUMENT
fs: DEFINE_METADATA_ARGUMENT(PROGRAM_NAME VARCHAR2 IN,METADATA_ATTRIBUTE VARCHAR2 IN,ARGUMENT_POSITION BINARY_INTEGER IN,ARGUMENT_NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: DEFINE_PROGRAM_ARGUMENT
fs: DEFINE_PROGRAM_ARGUMENT(PROGRAM_NAME VARCHAR2 IN,ARGUMENT_POSITION BINARY_INTEGER IN,ARGUMENT_NAME VARCHAR2 IN,ARGUMENT_TYPE VARCHAR2 IN,DEFAULT_VALUE VARCHAR2 IN,OUT_ARGUMENT PL/SQL BOOLEAN IN,PROGRAM_NAME VARCHAR2 IN,ARGUMENT_POSITION BINARY_INTEGER IN,ARGUMENT_NAME VARCHAR2 IN,ARGUMENT_TYPE VARCHAR2 IN,OUT_ARGUMENT PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DISABLE
fs: DISABLE(NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DISABLE1_CALENDAR_CHECK
fs: DISABLE1_CALENDAR_CHECK()
pt: DBMS_SCHEDULER
fn: DROP_CHAIN
fs: DROP_CHAIN(CHAIN_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DROP_CHAIN_RULE
fs: DROP_CHAIN_RULE(CHAIN_NAME VARCHAR2 IN,RULE_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DROP_CHAIN_STEP
fs: DROP_CHAIN_STEP(CHAIN_NAME VARCHAR2 IN,STEP_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DROP_JOB
fs: DROP_JOB(JOB_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DROP_JOB_CLASS
fs: DROP_JOB_CLASS(JOB_CLASS_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DROP_PROGRAM
fs: DROP_PROGRAM(PROGRAM_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DROP_PROGRAM_ARGUMENT
fs: DROP_PROGRAM_ARGUMENT(PROGRAM_NAME VARCHAR2 IN,ARGUMENT_POSITION BINARY_INTEGER IN,PROGRAM_NAME VARCHAR2 IN,ARGUMENT_NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: DROP_SCHEDULE
fs: DROP_SCHEDULE(SCHEDULE_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DROP_WINDOW
fs: DROP_WINDOW(WINDOW_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: DROP_WINDOW_GROUP
fs: DROP_WINDOW_GROUP(GROUP_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: ENABLE
fs: ENABLE(NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: EVALUATE_CALENDAR_STRING
fs: EVALUATE_CALENDAR_STRING(CALENDAR_STRING VARCHAR2 IN,START_DATE TIMESTAMP WITH TIME ZONE IN,RETURN_DATE_AFTER TIMESTAMP WITH TIME ZONE IN,NEXT_RUN_DATE TIMESTAMP WITH TIME ZONE OUT)
pt: DBMS_SCHEDULER
fn: EVALUATE_RUNNING_CHAIN
fs: EVALUATE_RUNNING_CHAIN(JOB_NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: GET_ATTRIBUTE
fs: GET_ATTRIBUTE(NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE BINARY_INTEGER RETURN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE PL/SQL BOOLEAN RETURN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE DATE RETURN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE TIMESTAMP RETURN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE TIMESTAMP WITH TIME ZONE RETURN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE TIMESTAMP WITH LOCAL TIME ZONE RETURN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE INTERVAL DAY TO SECOND RETURN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE VARCHAR2 RETURN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE VARCHAR2 RETURN,VALUE2 VARCHAR2 RETURN)
pt: DBMS_SCHEDULER
fn: GET_SCHEDULER_ATTRIBUTE
fs: GET_SCHEDULER_ATTRIBUTE(ATTRIBUTE VARCHAR2 IN,VALUE VARCHAR2 OUT)
pt: DBMS_SCHEDULER
fn: OPEN_WINDOW
fs: OPEN_WINDOW(WINDOW_NAME VARCHAR2 IN,DURATION INTERVAL DAY TO SECOND IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: PURGE_LOG
fs: PURGE_LOG(LOG_HISTORY BINARY_INTEGER IN,WHICH_LOG VARCHAR2 IN,JOB_NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: REMOVE_EVENT_QUEUE_SUBSCRIBER
fs: REMOVE_EVENT_QUEUE_SUBSCRIBER(SUBSCRIBER_NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: REMOVE_WINDOW_GROUP_MEMBER
fs: REMOVE_WINDOW_GROUP_MEMBER(GROUP_NAME VARCHAR2 IN,WINDOW_LIST VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: RESET_JOB_ARGUMENT_VALUE
fs: RESET_JOB_ARGUMENT_VALUE(JOB_NAME VARCHAR2 IN,ARGUMENT_POSITION BINARY_INTEGER IN,JOB_NAME VARCHAR2 IN,ARGUMENT_NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: RESOLVE_CALENDAR_STRING
fs: RESOLVE_CALENDAR_STRING(CALENDAR_STRING VARCHAR2 IN,FREQUENCY BINARY_INTEGER RETURN,INTERVAL BINARY_INTEGER RETURN,CALENDARS_USED PL/SQL BOOLEAN RETURN,BYSECOND VARRAY RETURN, NUMBER RETURN,BYMINUTE VARRAY RETURN, NUMBER RETURN,BYHOUR VARRAY RETURN, NUMBER RETURN,BYDAY_DAYS VARRAY RETURN, NUMBER RETURN,BYDAY_OCCURRENCE VARRAY RETURN, NUMBER RETURN,BYDATE_Y VARRAY RETURN, NUMBER RETURN,BYDATE_MD VARRAY RETURN, NUMBER RETURN,BYMONTHDAY VARRAY RETURN, NUMBER RETURN,BYYEARDAY VARRAY RETURN, NUMBER RETURN,BYWEEKNO VARRAY RETURN, NUMBER RETURN,BYMONTH VARRAY RETURN, NUMBER RETURN,BYSETPOS VARRAY RETURN, NUMBER RETURN,CALENDAR_STRING VARCHAR2 IN,FREQUENCY BINARY_INTEGER RETURN,INTERVAL BINARY_INTEGER RETURN,BYSECOND VARRAY RETURN, BINARY_INTEGER RETURN,BYMINUTE VARRAY RETURN, BINARY_INTEGER RETURN,BYHOUR VARRAY RETURN, BINARY_INTEGER RETURN,BYDAY_DAYS VARRAY RETURN, BINARY_INTEGER RETURN,BYDAY_OCCURRENCE VARRAY RETURN, BINARY_INTEGER RETURN,BYMONTHDAY VARRAY RETURN, BINARY_INTEGER RETURN,BYYEARDAY VARRAY RETURN, BINARY_INTEGER RETURN,BYWEEKNO VARRAY RETURN, BINARY_INTEGER RETURN,BYMONTH VARRAY RETURN, BINARY_INTEGER RETURN)
pt: DBMS_SCHEDULER
fn: RUN_CHAIN
fs: RUN_CHAIN(CHAIN_NAME VARCHAR2 IN,START_STEPS VARCHAR2 IN,JOB_NAME VARCHAR2 IN,CHAIN_NAME VARCHAR2 IN,STEP_STATE_LIST TABLE IN, SYS.SCHEDULER$_STEP_TYPE IN,JOB_NAME VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: RUN_JOB
fs: RUN_JOB(JOB_NAME VARCHAR2 IN,USE_CURRENT_SESSION PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: SET_ATTRIBUTE
fs: SET_ATTRIBUTE(NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE PL/SQL BOOLEAN IN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE VARCHAR2 IN,VALUE2 VARCHAR2 IN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE DATE IN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE TIMESTAMP IN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE TIMESTAMP WITH TIME ZONE IN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE TIMESTAMP WITH LOCAL TIME ZONE IN,NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE INTERVAL DAY TO SECOND IN)
pt: DBMS_SCHEDULER
fn: SET_ATTRIBUTE_NULL
fs: SET_ATTRIBUTE_NULL(NAME VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: SET_JOB_ANYDATA_VALUE
fs: SET_JOB_ANYDATA_VALUE(JOB_NAME VARCHAR2 IN,ARGUMENT_POSITION BINARY_INTEGER IN,ARGUMENT_VALUE UNDEFINED IN,JOB_NAME VARCHAR2 IN,ARGUMENT_NAME VARCHAR2 IN,ARGUMENT_VALUE UNDEFINED IN)
pt: DBMS_SCHEDULER
fn: SET_JOB_ARGUMENT_VALUE
fs: SET_JOB_ARGUMENT_VALUE(JOB_NAME VARCHAR2 IN,ARGUMENT_POSITION BINARY_INTEGER IN,ARGUMENT_VALUE VARCHAR2 IN,JOB_NAME VARCHAR2 IN,ARGUMENT_NAME VARCHAR2 IN,ARGUMENT_VALUE VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: SET_SCHEDULER_ATTRIBUTE
fs: SET_SCHEDULER_ATTRIBUTE(ATTRIBUTE VARCHAR2 IN,VALUE VARCHAR2 IN)
pt: DBMS_SCHEDULER
fn: STOP_JOB
fs: STOP_JOB(JOB_NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_SCHEDULER
fn: SCHEMA_CALLOUT
fs: SCHEMA_CALLOUT(SCHEMA VARCHAR2 IN,PREPOST BINARY_INTEGER IN,ISDBA BINARY_INTEGER IN,VERSION VARCHAR2 IN)
pt: DBMS_SCHED_EXPORT_CALLOUTS
fn: CHECK_PRIV
fs: CHECK_PRIV(SCHEMA VARCHAR2 IN)
pt: DBMS_SCHED_JOB_EXPORT
fn: CLEAR_ALL_CONTEXT
fs: CLEAR_ALL_CONTEXT(NAMESPACE VARCHAR2 IN)
pt: DBMS_SESSION
fn: CLEAR_CONTEXT
fs: CLEAR_CONTEXT(NAMESPACE VARCHAR2 IN,CLIENT_ID VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN)
pt: DBMS_SESSION
fn: CLEAR_IDENTIFIER
fs: CLEAR_IDENTIFIER()
pt: DBMS_SESSION
fn: CLOSE_DATABASE_LINK
fs: CLOSE_DATABASE_LINK(DBLINK VARCHAR2 IN)
pt: DBMS_SESSION
fn: FREE_UNUSED_USER_MEMORY
fs: FREE_UNUSED_USER_MEMORY()
pt: DBMS_SESSION
fn: LIST_CONTEXT
fs: LIST_CONTEXT(LIST PL/SQL TABLE OUT,LSIZE NUMBER OUT)
pt: DBMS_SESSION
fn: MODIFY_PACKAGE_STATE
fs: MODIFY_PACKAGE_STATE(ACTION_FLAGS BINARY_INTEGER IN)
pt: DBMS_SESSION
fn: RESET_PACKAGE
fs: RESET_PACKAGE()
pt: DBMS_SESSION
fn: SESSION_TRACE_DISABLE
fs: SESSION_TRACE_DISABLE()
pt: DBMS_SESSION
fn: SESSION_TRACE_ENABLE
fs: SESSION_TRACE_ENABLE(WAITS PL/SQL BOOLEAN IN,BINDS PL/SQL BOOLEAN IN)
pt: DBMS_SESSION
fn: SET_CLOSE_CACHED_OPEN_CURSORS
fs: SET_CLOSE_CACHED_OPEN_CURSORS(CLOSE_CURSORS PL/SQL BOOLEAN IN)
pt: DBMS_SESSION
fn: SET_CONTEXT
fs: SET_CONTEXT(NAMESPACE VARCHAR2 IN,ATTRIBUTE VARCHAR2 IN,VALUE VARCHAR2 IN,USERNAME VARCHAR2 IN,CLIENT_ID VARCHAR2 IN)
pt: DBMS_SESSION
fn: SET_IDENTIFIER
fs: SET_IDENTIFIER(CLIENT_ID VARCHAR2 IN)
pt: DBMS_SESSION
fn: SET_NLS
fs: SET_NLS(PARAM VARCHAR2 IN,VALUE VARCHAR2 IN)
pt: DBMS_SESSION
fn: SET_ROLE
fs: SET_ROLE(ROLE_CMD VARCHAR2 IN)
pt: DBMS_SESSION
fn: SET_SQL_TRACE
fs: SET_SQL_TRACE(SQL_TRACE PL/SQL BOOLEAN IN)
pt: DBMS_SESSION
fn: SWITCH_CURRENT_CONSUMER_GROUP
fs: SWITCH_CURRENT_CONSUMER_GROUP(NEW_CONSUMER_GROUP VARCHAR2 IN,OLD_CONSUMER_GROUP VARCHAR2 OUT,INITIAL_GROUP_ON_ERROR PL/SQL BOOLEAN IN)
pt: DBMS_SESSION
fn: BEGIN_TABLE_REORGANIZATION
fs: BEGIN_TABLE_REORGANIZATION(TABOWNER VARCHAR2 IN,TABNAME VARCHAR2 IN)
pt: DBMS_SNAPSHOT
fn: DROP_SNAPSHOT
fs: DROP_SNAPSHOT(MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,SNAPSHOT DATE IN)
pt: DBMS_SNAPSHOT
fn: END_TABLE_REORGANIZATION
fs: END_TABLE_REORGANIZATION(TABOWNER VARCHAR2 IN,TABNAME VARCHAR2 IN)
pt: DBMS_SNAPSHOT
fn: ESTIMATE_MVIEW_SIZE
fs: ESTIMATE_MVIEW_SIZE(STMT_ID VARCHAR2 IN,SELECT_CLAUSE VARCHAR2 IN,NUM_ROWS NUMBER OUT,NUM_BYTES NUMBER OUT)
pt: DBMS_SNAPSHOT
fn: EXPLAIN_MVIEW
fs: EXPLAIN_MVIEW(MV VARCHAR2 IN,STMT_ID VARCHAR2 IN,MV CLOB IN,STMT_ID VARCHAR2 IN,MV VARCHAR2 IN,MSG_ARRAY VARRAY IN/OUT, SYS.EXPLAINMVMESSAGE IN/OUT,MV CLOB IN,MSG_ARRAY VARRAY IN/OUT, SYS.EXPLAINMVMESSAGE IN/OUT)
pt: DBMS_SNAPSHOT
fn: EXPLAIN_REWRITE
fs: EXPLAIN_REWRITE(QUERY VARCHAR2 IN,MV VARCHAR2 IN,STATEMENT_ID VARCHAR2 IN,QUERY CLOB IN,MV VARCHAR2 IN,STATEMENT_ID VARCHAR2 IN,QUERY VARCHAR2 IN,MV VARCHAR2 IN,MSG_ARRAY VARRAY IN/OUT, SYS.REWRITEMESSAGE IN/OUT,QUERY CLOB IN,MV VARCHAR2 IN,MSG_ARRAY VARRAY IN/OUT, SYS.REWRITEMESSAGE IN/OUT)
pt: DBMS_SNAPSHOT
fn: GET_LOG_AGE
fs: GET_LOG_AGE(OLDEST DATE IN/OUT,MOW VARCHAR2 IN,MAS VARCHAR2 IN)
pt: DBMS_SNAPSHOT
fn: GET_MV_DEPENDENCIES
fs: GET_MV_DEPENDENCIES(LIST VARCHAR2 IN,DEPLIST VARCHAR2 OUT)
pt: DBMS_SNAPSHOT
fn: PURGE_DIRECT_LOAD_LOG
fs: PURGE_DIRECT_LOAD_LOG()
pt: DBMS_SNAPSHOT
fn: PURGE_LOG
fs: PURGE_LOG(MASTER VARCHAR2 IN,NUM BINARY_INTEGER IN,FLAG VARCHAR2 IN)
pt: DBMS_SNAPSHOT
fn: PURGE_MVIEW_FROM_LOG
fs: PURGE_MVIEW_FROM_LOG(MVIEW_ID BINARY_INTEGER IN,MVIEWOWNER VARCHAR2 IN,MVIEWNAME VARCHAR2 IN,MVIEWSITE VARCHAR2 IN)
pt: DBMS_SNAPSHOT
fn: PURGE_SNAPSHOT_FROM_LOG
fs: PURGE_SNAPSHOT_FROM_LOG(SNAPSHOT_ID BINARY_INTEGER IN,SNAPOWNER VARCHAR2 IN,SNAPNAME VARCHAR2 IN,SNAPSITE VARCHAR2 IN)
pt: DBMS_SNAPSHOT
fn: REFRESH
fs: REFRESH(LIST VARCHAR2 IN,METHOD VARCHAR2 IN,ROLLBACK_SEG VARCHAR2 IN,PUSH_DEFERRED_RPC PL/SQL BOOLEAN IN,REFRESH_AFTER_ERRORS PL/SQL BOOLEAN IN,PURGE_OPTION BINARY_INTEGER IN,PARALLELISM BINARY_INTEGER IN,HEAP_SIZE BINARY_INTEGER IN,ATOMIC_REFRESH PL/SQL BOOLEAN IN,NESTED PL/SQL BOOLEAN IN,TAB PL/SQL TABLE IN/OUT, VARCHAR2 IN/OUT,METHOD VARCHAR2 IN,ROLLBACK_SEG VARCHAR2 IN,PUSH_DEFERRED_RPC PL/SQL BOOLEAN IN,REFRESH_AFTER_ERRORS PL/SQL BOOLEAN IN,PURGE_OPTION BINARY_INTEGER IN,PARALLELISM BINARY_INTEGER IN,HEAP_SIZE BINARY_INTEGER IN,ATOMIC_REFRESH PL/SQL BOOLEAN IN,NESTED PL/SQL BOOLEAN IN,NAME VARCHAR2 IN)
pt: DBMS_SNAPSHOT
fn: REFRESH_ALL
fs: REFRESH_ALL()
pt: DBMS_SNAPSHOT
fn: REFRESH_ALL_MVIEWS
fs: REFRESH_ALL_MVIEWS(NUMBER_OF_FAILURES BINARY_INTEGER OUT,METHOD VARCHAR2 IN,ROLLBACK_SEG VARCHAR2 IN,REFRESH_AFTER_ERRORS PL/SQL BOOLEAN IN,ATOMIC_REFRESH PL/SQL BOOLEAN IN)
pt: DBMS_SNAPSHOT
fn: REFRESH_DEPENDENT
fs: REFRESH_DEPENDENT(NUMBER_OF_FAILURES BINARY_INTEGER RETURN,LIST VARCHAR2 IN,METHOD VARCHAR2 IN,ROLLBACK_SEG VARCHAR2 IN,REFRESH_AFTER_ERRORS PL/SQL BOOLEAN IN,ATOMIC_REFRESH PL/SQL BOOLEAN IN,NESTED PL/SQL BOOLEAN IN,NUMBER_OF_FAILURES BINARY_INTEGER RETURN,TAB PL/SQL TABLE IN, VARCHAR2 IN,METHOD VARCHAR2 IN,ROLLBACK_SEG VARCHAR2 IN,REFRESH_AFTER_ERRORS PL/SQL BOOLEAN IN,ATOMIC_REFRESH PL/SQL BOOLEAN IN,NESTED PL/SQL BOOLEAN IN)
pt: DBMS_SNAPSHOT
fn: REFRESH_MV
fs: REFRESH_MV(PIPENAME VARCHAR2 IN,MV_INDEX BINARY_INTEGER IN,OWNER VARCHAR2 IN,NAME VARCHAR2 IN,METHOD VARCHAR2 IN,ROLLSEG VARCHAR2 IN,ATOMIC_REFRESH BINARY_INTEGER IN,ENV BINARY_INTEGER IN,RESOURCES BINARY_INTEGER IN)
pt: DBMS_SNAPSHOT
fn: REGISTER_MVIEW
fs: REGISTER_MVIEW(MVIEWOWNER VARCHAR2 IN,MVIEWNAME VARCHAR2 IN,MVIEWSITE VARCHAR2 IN,MVIEW_ID DATE IN,FLAG BINARY_INTEGER IN,QRY_TXT VARCHAR2 IN,REP_TYPE BINARY_INTEGER IN,MVIEWOWNER VARCHAR2 IN,MVIEWNAME VARCHAR2 IN,MVIEWSITE VARCHAR2 IN,MVIEW_ID BINARY_INTEGER IN,FLAG BINARY_INTEGER IN,QRY_TXT VARCHAR2 IN,REP_TYPE BINARY_INTEGER IN)
pt: DBMS_SNAPSHOT
fn: REGISTER_SNAPSHOT
fs: REGISTER_SNAPSHOT(SNAPOWNER VARCHAR2 IN,SNAPNAME VARCHAR2 IN,SNAPSITE VARCHAR2 IN,SNAPSHOT_ID DATE IN,FLAG BINARY_INTEGER IN,QRY_TXT VARCHAR2 IN,REP_TYPE BINARY_INTEGER IN,SNAPOWNER VARCHAR2 IN,SNAPNAME VARCHAR2 IN,SNAPSITE VARCHAR2 IN,SNAPSHOT_ID BINARY_INTEGER IN,FLAG BINARY_INTEGER IN,QRY_TXT VARCHAR2 IN,REP_TYPE BINARY_INTEGER IN,SNAPOWNER VARCHAR2 IN,SNAPNAME VARCHAR2 IN,SNAPSITE VARCHAR2 IN,SNAPSHOT_ID BINARY_INTEGER IN,FLAG BINARY_INTEGER IN,QRY_TXT VARCHAR2 IN,REP_TYPE BINARY_INTEGER IN,ROLLBACK_SEG VARCHAR2 IN)
pt: DBMS_SNAPSHOT
fn: SET_I_AM_A_REFRESH
fs: SET_I_AM_A_REFRESH(VALUE PL/SQL BOOLEAN IN)
pt: DBMS_SNAPSHOT
fn: SET_UP
fs: SET_UP(MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,LOG VARCHAR2 IN/OUT,SNAPSHOT DATE IN/OUT,SNAPTIME DATE IN/OUT)
pt: DBMS_SNAPSHOT
fn: TESTING
fs: TESTING()
pt: DBMS_SNAPSHOT
fn: UNREGISTER_MVIEW
fs: UNREGISTER_MVIEW(MVIEWOWNER VARCHAR2 IN,MVIEWNAME VARCHAR2 IN,MVIEWSITE VARCHAR2 IN)
pt: DBMS_SNAPSHOT
fn: UNREGISTER_SNAPSHOT
fs: UNREGISTER_SNAPSHOT(SNAPOWNER VARCHAR2 IN,SNAPNAME VARCHAR2 IN,SNAPSITE VARCHAR2 IN)
pt: DBMS_SNAPSHOT
fn: WRAP_UP
fs: WRAP_UP(MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,SSHOT DATE IN,STIME DATE IN)
pt: DBMS_SNAPSHOT
fn: CHECK_REFERENTIAL_CONSTRAINT
fs: CHECK_REFERENTIAL_CONSTRAINT(BASE_OWNER VARCHAR2 IN,BASE_NAME VARCHAR2 IN,BASE_COLUMNS VARCHAR2 IN,COL_COUNT NUMBER IN,REF_COLUMNS VARCHAR2 IN,REF_OWNER VARCHAR2 IN,REF_NAME VARCHAR2 IN,RESULT NUMBER OUT)
pt: DBMS_SNAPSHOT_UTL
fn: CLEANUP_SNAPSHOT_IMPORT
fs: CLEANUP_SNAPSHOT_IMPORT(DUMP_VERSION NUMBER IN,SNAME VARCHAR2 IN,EXPSEAL VARCHAR2 IN,SNAME VARCHAR2 IN)
pt: DBMS_SNAPSHOT_UTL
fn: CLEANUP_SUBSCRIPTION
fs: CLEANUP_SUBSCRIPTION(HDL BINARY_INTEGER IN,RBSEG VARCHAR2 IN,STAT BINARY_INTEGER OUT)
pt: DBMS_SNAPSHOT_UTL
fn: DROP_SNAPSHOT
fs: DROP_SNAPSHOT(MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,SNAPID BINARY_INTEGER IN,ROLLBACK_SEG VARCHAR2 IN)
pt: DBMS_SNAPSHOT_UTL
fn: GET_FULLY_QUALIFIED_NAME
fs: GET_FULLY_QUALIFIED_NAME(TOBJN_COL PL/SQL TABLE IN,COLNO_COL PL/SQL TABLE IN,FQNAME_COL PL/SQL TABLE OUT)
pt: DBMS_SNAPSHOT_UTL
fn: GET_LOB_COLUMNS_INFO
fs: GET_LOB_COLUMNS_INFO(MASOWN VARCHAR2 IN,MASNAM VARCHAR2 IN,SNAPCOLS VARCHAR2 IN,LOBCNT NUMBER OUT,LOBCOLS VARCHAR2 OUT,LOBPOSITIONS VARCHAR2 OUT,LOBVECMASK RAW OUT)
pt: DBMS_SNAPSHOT_UTL
fn: GET_LOG_AGE
fs: GET_LOG_AGE(LOG_AGE DATE IN/OUT,MOW VARCHAR2 IN,MAS VARCHAR2 IN,SNAPTYPE NUMBER IN)
pt: DBMS_SNAPSHOT_UTL
fn: GET_LOG_NAME
fs: GET_LOG_NAME(MASTER VARCHAR2 IN,MOWNER VARCHAR2 IN,LOGNM VARCHAR2 RETURN,CHKFLG BINARY_INTEGER IN,STATUS BINARY_INTEGER RETURN,MASOBJID BINARY_INTEGER RETURN,SNAME VARCHAR2 IN,SOWNER VARCHAR2 IN,LOGNM VARCHAR2 IN/OUT,CHKPK BINARY_INTEGER IN,STATUS BINARY_INTEGER RETURN)
pt: DBMS_SNAPSHOT_UTL
fn: GET_LOG_TYPE
fs: GET_LOG_TYPE(MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,MASOBJNUM BINARY_INTEGER OUT,LOG_TYPE BINARY_INTEGER OUT)
pt: DBMS_SNAPSHOT_UTL
fn: GET_MAX_BYTES_PER_CHAR
fs: GET_MAX_BYTES_PER_CHAR(NBYTES BINARY_INTEGER OUT)
pt: DBMS_SNAPSHOT_UTL
fn: GET_MLOG_FLAG
fs: GET_MLOG_FLAG(OUTFLAG BINARY_INTEGER IN/OUT,INMOWNER VARCHAR2 IN,INTABLE VARCHAR2 IN)
pt: DBMS_SNAPSHOT_UTL
fn: GET_OBJECT_NAME
fs: GET_OBJECT_NAME(OBJN_COL PL/SQL TABLE IN,OWNER_COL PL/SQL TABLE OUT,NAME_COL PL/SQL TABLE OUT)
pt: DBMS_SNAPSHOT_UTL
fn: GET_PK_BY_EOID
fs: GET_PK_BY_EOID(EOID_COL PL/SQL TABLE IN,TOBJNUM_COL PL/SQL TABLE OUT,TPKCT_COL PL/SQL TABLE OUT,TPKINTCOL_COL PL/SQL TABLE OUT,TPKCOLNAM_COL PL/SQL TABLE OUT,TPKFLG_COL PL/SQL TABLE OUT)
pt: DBMS_SNAPSHOT_UTL
fn: GET_PK_CONSTRAINT_INFO
fs: GET_PK_CONSTRAINT_INFO(OWNER VARCHAR2 IN,TABLENAME VARCHAR2 IN,PK_NAME VARCHAR2 OUT,PK_TYPE BINARY_INTEGER OUT,PK_COLS VARCHAR2 OUT,PK_IDX_NAME VARCHAR2 OUT,IDX_COLS VARCHAR2 OUT)
pt: DBMS_SNAPSHOT_UTL
fn: GET_RELATIONAL_COLUMNS
fs: GET_RELATIONAL_COLUMNS(OWNER VARCHAR2 IN,TABLENAME VARCHAR2 IN,COLNAME VARCHAR2 IN,RCOLS PL/SQL TABLE OUT,NUMCOLS BINARY_INTEGER OUT)
pt: DBMS_SNAPSHOT_UTL
fn: GET_TYPEINFO_BY_TOID
fs: GET_TYPEINFO_BY_TOID(TYPEOID_COL PL/SQL TABLE IN,OWNERNAME_COL PL/SQL TABLE OUT,TYPENAME_COL PL/SQL TABLE OUT,HASHCODE_COL PL/SQL TABLE OUT)
pt: DBMS_SNAPSHOT_UTL
fn: MASTER_LOG_TYPE
fs: MASTER_LOG_TYPE(MOWN_COL PL/SQL TABLE IN,MAS_COL PL/SQL TABLE IN,LOGT_COL PL/SQL TABLE OUT)
pt: DBMS_SNAPSHOT_UTL
fn: REGISTER_SNAPSHOT
fs: REGISTER_SNAPSHOT(SNAPOWNER VARCHAR2 IN,SNAPNAME VARCHAR2 IN,SNAPSITE VARCHAR2 IN,SNAPSHOT_ID BINARY_INTEGER IN,FLAG BINARY_INTEGER IN,QRY_TXT VARCHAR2 IN,REP_TYPE BINARY_INTEGER IN,ROLLBACK_SEG VARCHAR2 IN)
pt: DBMS_SNAPSHOT_UTL
fn: SETUP
fs: SETUP(HDL_COL PL/SQL TABLE IN,IDX_COL PL/SQL TABLE IN,MOWN_COL PL/SQL TABLE IN,MAS_COL PL/SQL TABLE IN,RBSEG_COL PL/SQL TABLE IN,INFLAG_COL PL/SQL TABLE IN,RCSCN NUMBER OUT)
pt: DBMS_SNAPSHOT_UTL
fn: SET_UP
fs: SET_UP(MOWN_COL PL/SQL TABLE IN, VARCHAR2 IN,MAS_COL PL/SQL TABLE IN, VARCHAR2 IN,ROLLSEG_COL PL/SQL TABLE IN, VARCHAR2 IN,FLAG_COL PL/SQL TABLE IN, NUMBER IN,OUTFLAG_COL PL/SQL TABLE RETURN, NUMBER RETURN,SNAPTIME_COL PL/SQL TABLE RETURN, DATE RETURN,LOADERTIME_COL PL/SQL TABLE RETURN, DATE RETURN,NUM_SID BINARY_INTEGER IN,SNAPID_TAB PL/SQL TABLE RETURN, NUMBER RETURN,MAX_TAB_SCN_COL PL/SQL TABLE RETURN, NUMBER RETURN,MAX_DL_SCN_COL PL/SQL TABLE RETURN, NUMBER RETURN,MAX_PMOP_SCN_COL PL/SQL TABLE RETURN, NUMBER RETURN,TRUNC_SCN_COL PL/SQL TABLE RETURN, NUMBER RETURN,MAX_INS_TIM_COL PL/SQL TABLE RETURN, DATE RETURN,MAX_UPD_TIM_COL PL/SQL TABLE RETURN, DATE RETURN,MAX_DEL_TIM_COL PL/SQL TABLE RETURN, DATE RETURN,MAX_INS_SCN_COL PL/SQL TABLE RETURN, NUMBER RETURN,MAX_UPD_SCN_COL PL/SQL TABLE RETURN, NUMBER RETURN,MAX_DEL_SCN_COL PL/SQL TABLE RETURN, NUMBER RETURN,HDL_COL PL/SQL TABLE IN, NUMBER IN,HDL_INDX_COL PL/SQL TABLE IN, NUMBER IN,RSCN NUMBER RETURN,MOWN_COL PL/SQL TABLE IN, VARCHAR2 IN,MAS_COL PL/SQL TABLE IN, VARCHAR2 IN,MASOBJ_COL PL/SQL TABLE IN, NUMBER IN,ROLLSEG_COL PL/SQL TABLE IN, VARCHAR2 IN,FLAG_COL PL/SQL TABLE IN, NUMBER IN,SNAPTIME_COL PL/SQL TABLE RETURN, DATE RETURN,LOADERTIME_COL PL/SQL TABLE RETURN, DATE RETURN,NUM_SID BINARY_INTEGER IN,SNAPID_TAB PL/SQL TABLE RETURN, NUMBER RETURN,MOWN_COL PL/SQL TABLE IN, VARCHAR2 IN,MAS_COL PL/SQL TABLE IN, VARCHAR2 IN,MASOBJ_COL PL/SQL TABLE IN, NUMBER IN,ROLLSEG_COL PL/SQL TABLE IN, VARCHAR2 IN,FLAG_COL PL/SQL TABLE IN, NUMBER IN,SNAPTIME_COL PL/SQL TABLE RETURN, DATE RETURN,LOADERTIME_COL PL/SQL TABLE RETURN, DATE RETURN,NUM_SID BINARY_INTEGER IN,SNAPID_TAB PL/SQL TABLE RETURN, NUMBER RETURN,SU_SCN_COL PL/SQL TABLE RETURN, NUMBER RETURN,NR_FLAG BINARY_INTEGER IN,MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,LOG VARCHAR2 IN/OUT,SNAPID BINARY_INTEGER IN/OUT,SNAPTIME DATE IN/OUT,SNAPTYPE BINARY_INTEGER IN,ROLLBACK_SEG VARCHAR2 IN,MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,MASOBJNUM BINARY_INTEGER IN,LOG VARCHAR2 IN/OUT,SNAPID BINARY_INTEGER IN/OUT,SNAPTIME DATE IN/OUT,LOADERTIME DATE IN/OUT,SNAPTYPE BINARY_INTEGER IN,ROLLBACK_SEG VARCHAR2 IN,MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,LOG VARCHAR2 IN/OUT,SNAPSHOT DATE IN/OUT,SNAPTIME DATE IN/OUT)
pt: DBMS_SNAPSHOT_UTL
fn: SUBSCRIBE
fs: SUBSCRIBE(CSET VARCHAR2 IN,MOWN VARCHAR2 IN,MAS VARCHAR2 IN,MVFLG BINARY_INTEGER IN,SCVEC RAW IN,ACT BINARY_INTEGER IN,LRSCN NUMBER IN,HDL BINARY_INTEGER IN/OUT,CVNAM VARCHAR2 OUT,STAT BINARY_INTEGER OUT)
pt: DBMS_SNAPSHOT_UTL
fn: SYNC_UP_LOG
fs: SYNC_UP_LOG(CANON_SNAME VARCHAR2 IN,CANON_ONAME VARCHAR2 IN)
pt: DBMS_SNAPSHOT_UTL
fn: SYNC_UP_UPD
fs: SYNC_UP_UPD(CANON_SNAME VARCHAR2 IN,CANON_ONAME VARCHAR2 IN)
pt: DBMS_SNAPSHOT_UTL
fn: UNREGISTER_SNAPSHOT
fs: UNREGISTER_SNAPSHOT(SNAPOWNER VARCHAR2 IN,SNAPNAME VARCHAR2 IN,SNAPSITE VARCHAR2 IN,ROLLBACK_SEG VARCHAR2 IN)
pt: DBMS_SNAPSHOT_UTL
fn: VALIDATE
fs: VALIDATE(HDL_COL PL/SQL TABLE IN,IDX_COL PL/SQL TABLE IN,MOWN_COL PL/SQL TABLE IN,MAS_COL PL/SQL TABLE IN,LRSCN_COL PL/SQL TABLE IN,STAT_COL PL/SQL TABLE OUT)
pt: DBMS_SNAPSHOT_UTL
fn: VALIDATE_REFRESH
fs: VALIDATE_REFRESH(MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,SNAPTYPE BINARY_INTEGER IN,CHECK_COLS VARCHAR2 IN)
pt: DBMS_SNAPSHOT_UTL
fn: VALIDATE_ROLLBACK_SEGMENT
fs: VALIDATE_ROLLBACK_SEGMENT(SEGMENT_NAME VARCHAR2 IN,SEGMENT_STATUS BINARY_INTEGER OUT)
pt: DBMS_SNAPSHOT_UTL
fn: VERIFY_FC_AGE
fs: VERIFY_FC_AGE(MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,FC_VEC RAW IN,SNAPTIME DATE IN,FLAG BINARY_INTEGER OUT)
pt: DBMS_SNAPSHOT_UTL
fn: VERIFY_LOG
fs: VERIFY_LOG(MOWN_COL PL/SQL TABLE IN, VARCHAR2 IN,MAS_COL PL/SQL TABLE IN, VARCHAR2 IN,MASOBJ_COL PL/SQL TABLE RETURN, NUMBER RETURN,FLAG_COL PL/SQL TABLE IN, NUMBER IN,OUTFLAG_COL PL/SQL TABLE RETURN, NUMBER RETURN,LOGNM_COL PL/SQL TABLE RETURN, VARCHAR2 RETURN,OLDEST_COL PL/SQL TABLE RETURN, DATE RETURN,OLDESTPK_COL PL/SQL TABLE RETURN, DATE RETURN,OLDLOADER_COL PL/SQL TABLE RETURN, DATE RETURN,OLDEST_OID_COL PL/SQL TABLE RETURN, DATE RETURN,OLDESTNEW_COL PL/SQL TABLE RETURN, DATE RETURN,FCVEC_COL PL/SQL TABLE RETURN, RAW RETURN,YOUNGEST_FC_COL PL/SQL TABLE RETURN, DATE RETURN,HDL_COL PL/SQL TABLE IN, NUMBER IN,HDL_INDX_COL PL/SQL TABLE IN, NUMBER IN,LRSCN_COL PL/SQL TABLE IN, NUMBER IN,STAT_COL PL/SQL TABLE RETURN, NUMBER RETURN,TYP_OWN_COL PL/SQL TABLE IN, VARCHAR2 IN,TYP_NAM_COL PL/SQL TABLE IN, VARCHAR2 IN,TOID_COL PL/SQL TABLE RETURN, RAW RETURN,HASHCODE_COL PL/SQL TABLE RETURN, RAW RETURN,MOWN_COL PL/SQL TABLE IN, VARCHAR2 IN,MAS_COL PL/SQL TABLE IN, VARCHAR2 IN,MASOBJ_COL PL/SQL TABLE RETURN, NUMBER RETURN,FLAG_COL PL/SQL TABLE IN, NUMBER IN,OUTFLAG_COL PL/SQL TABLE RETURN, NUMBER RETURN,LOGNM_COL PL/SQL TABLE RETURN, VARCHAR2 RETURN,OLDEST_COL PL/SQL TABLE RETURN, DATE RETURN,OLDESTPK_COL PL/SQL TABLE RETURN, DATE RETURN,OLDLOADER_COL PL/SQL TABLE RETURN, DATE RETURN,OLDEST_OID_COL PL/SQL TABLE RETURN, DATE RETURN,OLDESTNEW_COL PL/SQL TABLE RETURN, DATE RETURN,FCVEC_COL PL/SQL TABLE RETURN, RAW RETURN,YOUNGEST_FC_COL PL/SQL TABLE RETURN, DATE RETURN,HDL_COL PL/SQL TABLE IN, NUMBER IN,HDL_INDX_COL PL/SQL TABLE IN, NUMBER IN,LRSCN_COL PL/SQL TABLE IN, NUMBER IN,STAT_COL PL/SQL TABLE RETURN, NUMBER RETURN,TYP_OWN_COL PL/SQL TABLE IN, VARCHAR2 IN,TYP_NAM_COL PL/SQL TABLE IN, VARCHAR2 IN,TOID_COL PL/SQL TABLE RETURN, RAW RETURN,HASHCODE_COL PL/SQL TABLE RETURN, RAW RETURN,OLDESTSEQ_COL PL/SQL TABLE RETURN, DATE RETURN,MOWN_COL PL/SQL TABLE IN, VARCHAR2 IN,MAS_COL PL/SQL TABLE IN, VARCHAR2 IN,MASOBJ_COL PL/SQL TABLE IN, NUMBER IN,FLAG_COL PL/SQL TABLE IN, NUMBER IN,OUTFLAG_COL PL/SQL TABLE RETURN, NUMBER RETURN,LOGNM_COL PL/SQL TABLE RETURN, VARCHAR2 RETURN,OLDEST_COL PL/SQL TABLE RETURN, DATE RETURN,OLDESTPK_COL PL/SQL TABLE RETURN, DATE RETURN,OLDLOADER_COL PL/SQL TABLE RETURN, DATE RETURN,FCVEC_COL PL/SQL TABLE RETURN, RAW RETURN,YOUNGEST_FC_COL PL/SQL TABLE RETURN, DATE RETURN,MOD_SCN_COL PL/SQL TABLE RETURN, NUMBER RETURN,NR_FLAG BINARY_INTEGER IN,MOW VARCHAR2 IN,MAS VARCHAR2 IN,STIME DATE IN,STYPE NUMBER IN,FCVEC RAW IN,EQCVEC RAW IN,IN_VEC BINARY_INTEGER IN,OUT_VEC BINARY_INTEGER IN/OUT)
pt: DBMS_SNAPSHOT_UTL
fn: WRAPUP
fs: WRAPUP(HDL_COL PL/SQL TABLE IN,RBSEG_COL PL/SQL TABLE IN)
pt: DBMS_SNAPSHOT_UTL
fn: WRAP_UP
fs: WRAP_UP(MOWN_COL PL/SQL TABLE IN, VARCHAR2 IN,MAS_COL PL/SQL TABLE IN, VARCHAR2 IN,MASOBJ_COL PL/SQL TABLE IN, NUMBER IN,ROLLSEG_COL PL/SQL TABLE IN, VARCHAR2 IN,FLAG_COL PL/SQL TABLE IN, NUMBER IN,SNAPTIME_COL PL/SQL TABLE IN, DATE IN,LOADERTIME_COL PL/SQL TABLE IN, DATE IN,SNAPID_COL PL/SQL TABLE IN, NUMBER IN,SNAPTYPE_COL PL/SQL TABLE IN, NUMBER IN,MASIDX_COL PL/SQL TABLE IN, NUMBER IN,SNAPID_COL PL/SQL TABLE IN, NUMBER IN,SNAPTYPE_COL PL/SQL TABLE IN, NUMBER IN,MASIDX_COL PL/SQL TABLE IN, NUMBER IN,MOWN_COL PL/SQL TABLE IN, VARCHAR2 IN,MAS_COL PL/SQL TABLE IN, VARCHAR2 IN,MASOBJ_COL PL/SQL TABLE IN, NUMBER IN,ROLLSEG_COL PL/SQL TABLE IN, VARCHAR2 IN,FLAG_COL PL/SQL TABLE IN, NUMBER IN,SNAPTIME_COL PL/SQL TABLE IN, DATE IN,LOADERTIME_COL PL/SQL TABLE IN, DATE IN,MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,SNAPID BINARY_INTEGER IN,SNAPTIME DATE IN,REGISTRATION_STATUS BINARY_INTEGER RETURN,SNAPTYPE BINARY_INTEGER IN,ROLLBACK_SEG VARCHAR2 IN,MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,MASOBJNUM BINARY_INTEGER IN,SNAPID BINARY_INTEGER IN,SNAPTIME DATE IN,LOADERTIME DATE IN,REGISTRATION_STATUS BINARY_INTEGER RETURN,SNAPTYPE BINARY_INTEGER IN,ROLLBACK_SEG VARCHAR2 IN,MOWNER VARCHAR2 IN,MASTER VARCHAR2 IN,SSHOT DATE IN,STIME DATE IN)
pt: DBMS_SNAPSHOT_UTL
fn: AUTO_SPACE_ADVISOR_JOB_PROC
fs: AUTO_SPACE_ADVISOR_JOB_PROC()
pt: DBMS_SPACE
fn: CREATE_INDEX_COST
fs: CREATE_INDEX_COST(DDL VARCHAR2 IN,USED_BYTES NUMBER OUT,ALLOC_BYTES NUMBER OUT,PLAN_TABLE VARCHAR2 IN)
pt: DBMS_SPACE
fn: CREATE_TABLE_COST
fs: CREATE_TABLE_COST(TABLESPACE_NAME VARCHAR2 IN,AVG_ROW_SIZE NUMBER IN,ROW_COUNT NUMBER IN,PCT_FREE NUMBER IN,USED_BYTES NUMBER RETURN,ALLOC_BYTES NUMBER RETURN,TABLESPACE_NAME VARCHAR2 IN,COLINFOS VARRAY IN, SYS.CREATE_TABLE_COST_COLINFO IN,ROW_COUNT NUMBER IN,PCT_FREE NUMBER IN,USED_BYTES NUMBER RETURN,ALLOC_BYTES NUMBER RETURN)
pt: DBMS_SPACE
fn: DATABASE_LEVEL_SHRINK
fs: DATABASE_LEVEL_SHRINK()
pt: DBMS_SPACE
fn: FREE_BLOCKS
fs: FREE_BLOCKS(SEGMENT_OWNER VARCHAR2 IN,SEGMENT_NAME VARCHAR2 IN,SEGMENT_TYPE VARCHAR2 IN,FREELIST_GROUP_ID NUMBER IN,FREE_BLKS NUMBER OUT,SCAN_LIMIT NUMBER IN,PARTITION_NAME VARCHAR2 IN)
pt: DBMS_SPACE
fn: ISDATAFILEDROPPABLE_NAME
fs: ISDATAFILEDROPPABLE_NAME(FILENAME VARCHAR2 IN,VALUE NUMBER OUT)
pt: DBMS_SPACE
fn: OBJECT_SPACE_USAGE
fs: OBJECT_SPACE_USAGE(OBJECT_OWNER VARCHAR2 IN,OBJECT_NAME VARCHAR2 IN,OBJECT_TYPE VARCHAR2 IN,SAMPLE_CONTROL NUMBER IN,SPACE_USED NUMBER OUT,SPACE_ALLOCATED NUMBER OUT,CHAIN_PCENT NUMBER OUT,PARTITION_NAME VARCHAR2 IN,PRESERVE_RESULT PL/SQL BOOLEAN IN,TIMEOUT_SECONDS NUMBER IN)
pt: DBMS_SPACE
fn: PARSE_SPACE_ADV_INFO
fs: PARSE_SPACE_ADV_INFO(INFO VARCHAR2 IN,USED_SPACE VARCHAR2 OUT,ALLOCATED_SPACE VARCHAR2 OUT,RECLAIMABLE_SPACE VARCHAR2 OUT)
pt: DBMS_SPACE
fn: SPACE_USAGE
fs: SPACE_USAGE(SEGMENT_OWNER VARCHAR2 IN,SEGMENT_NAME VARCHAR2 IN,SEGMENT_TYPE VARCHAR2 IN,UNFORMATTED_BLOCKS NUMBER OUT,UNFORMATTED_BYTES NUMBER OUT,FS1_BLOCKS NUMBER OUT,FS1_BYTES NUMBER OUT,FS2_BLOCKS NUMBER OUT,FS2_BYTES NUMBER OUT,FS3_BLOCKS NUMBER OUT,FS3_BYTES NUMBER OUT,FS4_BLOCKS NUMBER OUT,FS4_BYTES NUMBER OUT,FULL_BLOCKS NUMBER OUT,FULL_BYTES NUMBER OUT,PARTITION_NAME VARCHAR2 IN)
pt: DBMS_SPACE
fn: TABLESPACE_LEVEL_SHRINK
fs: TABLESPACE_LEVEL_SHRINK(TS_NAME VARCHAR2 IN)
pt: DBMS_SPACE
fn: UNUSED_SPACE
fs: UNUSED_SPACE(SEGMENT_OWNER VARCHAR2 IN,SEGMENT_NAME VARCHAR2 IN,SEGMENT_TYPE VARCHAR2 IN,TOTAL_BLOCKS NUMBER OUT,TOTAL_BYTES NUMBER OUT,UNUSED_BLOCKS NUMBER OUT,UNUSED_BYTES NUMBER OUT,LAST_USED_EXTENT_FILE_ID NUMBER OUT,LAST_USED_EXTENT_BLOCK_ID NUMBER OUT,LAST_USED_BLOCK NUMBER OUT,PARTITION_NAME VARCHAR2 IN)
pt: DBMS_SPACE
fn: BIND_ARRAY
fs: BIND_ARRAY(C NUMBER IN,NAME VARCHAR2 IN,N_TAB PL/SQL TABLE IN, NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,BL_TAB PL/SQL TABLE IN, BLOB IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,CL_TAB PL/SQL TABLE IN, CLOB IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,BF_TAB PL/SQL TABLE IN, BFILE IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,UR_TAB PL/SQL TABLE IN, UROWID IN,C NUMBER IN,NAME VARCHAR2 IN,UR_TAB PL/SQL TABLE IN, UROWID IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,TM_TAB PL/SQL TABLE IN, TIME IN,C NUMBER IN,NAME VARCHAR2 IN,TM_TAB PL/SQL TABLE IN, TIME IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,TMS_TAB PL/SQL TABLE IN, TIMESTAMP IN,C NUMBER IN,NAME VARCHAR2 IN,TMS_TAB PL/SQL TABLE IN, TIMESTAMP IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,TTZ_TAB PL/SQL TABLE IN, TIME WITH TIME ZONE IN,C NUMBER IN,NAME VARCHAR2 IN,C_TAB PL/SQL TABLE IN, VARCHAR2 IN,C NUMBER IN,NAME VARCHAR2 IN,TTZ_TAB PL/SQL TABLE IN, TIME WITH TIME ZONE IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,TSTZ_TAB PL/SQL TABLE IN, TIMESTAMP WITH TIME ZONE IN,C NUMBER IN,NAME VARCHAR2 IN,TSTZ_TAB PL/SQL TABLE IN, TIMESTAMP WITH TIME ZONE IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,TSTZ_TAB PL/SQL TABLE IN, TIMESTAMP WITH LOCAL TIME ZONE IN,C NUMBER IN,NAME VARCHAR2 IN,TSTZ_TAB PL/SQL TABLE IN, TIMESTAMP WITH LOCAL TIME ZONE IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,IYM_TAB PL/SQL TABLE IN, INTERVAL YEAR TO MONTH IN,C NUMBER IN,NAME VARCHAR2 IN,IYM_TAB PL/SQL TABLE IN, INTERVAL YEAR TO MONTH IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,IDS_TAB PL/SQL TABLE IN, INTERVAL DAY TO SECOND IN,C NUMBER IN,NAME VARCHAR2 IN,IDS_TAB PL/SQL TABLE IN, INTERVAL DAY TO SECOND IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,BFLT_TAB PL/SQL TABLE IN, BINARY_FLOAT IN,C NUMBER IN,NAME VARCHAR2 IN,D_TAB PL/SQL TABLE IN, DATE IN,C NUMBER IN,NAME VARCHAR2 IN,BFLT_TAB PL/SQL TABLE IN, BINARY_FLOAT IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,BDBL_TAB PL/SQL TABLE IN, BINARY_DOUBLE IN,C NUMBER IN,NAME VARCHAR2 IN,BDBL_TAB PL/SQL TABLE IN, BINARY_DOUBLE IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,BL_TAB PL/SQL TABLE IN, BLOB IN,C NUMBER IN,NAME VARCHAR2 IN,CL_TAB PL/SQL TABLE IN, CLOB IN,C NUMBER IN,NAME VARCHAR2 IN,BF_TAB PL/SQL TABLE IN, BFILE IN,C NUMBER IN,NAME VARCHAR2 IN,N_TAB PL/SQL TABLE IN, NUMBER IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,C_TAB PL/SQL TABLE IN, VARCHAR2 IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,D_TAB PL/SQL TABLE IN, DATE IN,INDEX1 NUMBER IN,INDEX2 NUMBER IN)
pt: DBMS_SQL
fn: BIND_VARIABLE
fs: BIND_VARIABLE(C NUMBER IN,NAME VARCHAR2 IN,VALUE NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE TIMESTAMP IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE TIME WITH TIME ZONE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE TIMESTAMP WITH TIME ZONE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE TIMESTAMP WITH LOCAL TIME ZONE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE INTERVAL YEAR TO MONTH IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE INTERVAL DAY TO SECOND IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE BINARY_FLOAT IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE BINARY_DOUBLE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE VARCHAR2 IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE VARCHAR2 IN,OUT_VALUE_SIZE NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE DATE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE BLOB IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE CLOB IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE BFILE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE UROWID IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE TIME IN)
pt: DBMS_SQL
fn: BIND_VARIABLE_CHAR
fs: BIND_VARIABLE_CHAR(C NUMBER IN,NAME VARCHAR2 IN,VALUE CHAR IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE CHAR IN,OUT_VALUE_SIZE NUMBER IN)
pt: DBMS_SQL
fn: BIND_VARIABLE_RAW
fs: BIND_VARIABLE_RAW(C NUMBER IN,NAME VARCHAR2 IN,VALUE RAW IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE RAW IN,OUT_VALUE_SIZE NUMBER IN)
pt: DBMS_SQL
fn: BIND_VARIABLE_ROWID
fs: BIND_VARIABLE_ROWID(C NUMBER IN,NAME VARCHAR2 IN,VALUE ROWID IN)
pt: DBMS_SQL
fn: CLOSE_CURSOR
fs: CLOSE_CURSOR(C NUMBER IN/OUT)
pt: DBMS_SQL
fn: COLUMN_VALUE
fs: COLUMN_VALUE(C NUMBER IN,POSITION NUMBER IN,VALUE NUMBER RETURN,C NUMBER IN,POSITION NUMBER IN,N_TAB PL/SQL TABLE IN, NUMBER IN,C NUMBER IN,POSITION NUMBER IN,C_TAB PL/SQL TABLE IN, VARCHAR2 IN,C NUMBER IN,POSITION NUMBER IN,D_TAB PL/SQL TABLE IN, DATE IN,C NUMBER IN,POSITION NUMBER IN,BL_TAB PL/SQL TABLE IN, BLOB IN,C NUMBER IN,POSITION NUMBER IN,CL_TAB PL/SQL TABLE IN, CLOB IN,C NUMBER IN,POSITION NUMBER IN,BF_TAB PL/SQL TABLE IN, BFILE IN,C NUMBER IN,POSITION NUMBER IN,VALUE UROWID RETURN,C NUMBER IN,POSITION NUMBER IN,UR_TAB PL/SQL TABLE IN, UROWID IN,C NUMBER IN,POSITION NUMBER IN,VALUE TIME RETURN,C NUMBER IN,POSITION NUMBER IN,TM_TAB PL/SQL TABLE IN, TIME IN,C NUMBER IN,POSITION NUMBER IN,VALUE VARCHAR2 RETURN,C NUMBER IN,POSITION NUMBER IN,VALUE TIMESTAMP RETURN,C NUMBER IN,POSITION NUMBER IN,TMS_TAB PL/SQL TABLE IN, TIMESTAMP IN,C NUMBER IN,POSITION NUMBER IN,VALUE TIME WITH TIME ZONE RETURN,C NUMBER IN,POSITION NUMBER IN,TTZ_TAB PL/SQL TABLE IN, TIME WITH TIME ZONE IN,C NUMBER IN,POSITION NUMBER IN,VALUE TIMESTAMP WITH TIME ZONE RETURN,C NUMBER IN,POSITION NUMBER IN,TSTZ_TAB PL/SQL TABLE IN, TIMESTAMP WITH TIME ZONE IN,C NUMBER IN,POSITION NUMBER IN,VALUE TIMESTAMP WITH LOCAL TIME ZONE RETURN,C NUMBER IN,POSITION NUMBER IN,TSTZ_TAB PL/SQL TABLE IN, TIMESTAMP WITH LOCAL TIME ZONE IN,C NUMBER IN,POSITION NUMBER IN,VALUE INTERVAL YEAR TO MONTH RETURN,C NUMBER IN,POSITION NUMBER IN,IYM_TAB PL/SQL TABLE IN, INTERVAL YEAR TO MONTH IN,C NUMBER IN,POSITION NUMBER IN,VALUE DATE RETURN,C NUMBER IN,POSITION NUMBER IN,VALUE INTERVAL DAY TO SECOND RETURN,C NUMBER IN,POSITION NUMBER IN,IDS_TAB PL/SQL TABLE IN, INTERVAL DAY TO SECOND IN,C NUMBER IN,POSITION NUMBER IN,VALUE BINARY_FLOAT RETURN,C NUMBER IN,POSITION NUMBER IN,BFLT_TAB PL/SQL TABLE IN, BINARY_FLOAT IN,C NUMBER IN,POSITION NUMBER IN,VALUE BINARY_DOUBLE RETURN,C NUMBER IN,POSITION NUMBER IN,BDBL_TAB PL/SQL TABLE IN, BINARY_DOUBLE IN,C NUMBER IN,POSITION NUMBER IN,VALUE BLOB RETURN,C NUMBER IN,POSITION NUMBER IN,VALUE CLOB RETURN,C NUMBER IN,POSITION NUMBER IN,VALUE BFILE RETURN,C NUMBER IN,POSITION NUMBER IN,VALUE NUMBER RETURN,COLUMN_ERROR NUMBER RETURN,ACTUAL_LENGTH NUMBER RETURN,C NUMBER IN,POSITION NUMBER IN,VALUE VARCHAR2 RETURN,COLUMN_ERROR NUMBER RETURN,ACTUAL_LENGTH NUMBER RETURN,C NUMBER IN,POSITION NUMBER IN,VALUE DATE RETURN,COLUMN_ERROR NUMBER RETURN,ACTUAL_LENGTH NUMBER RETURN)
pt: DBMS_SQL
fn: COLUMN_VALUE_CHAR
fs: COLUMN_VALUE_CHAR(C NUMBER IN,POSITION NUMBER IN,VALUE CHAR RETURN,C NUMBER IN,POSITION NUMBER IN,VALUE CHAR RETURN,COLUMN_ERROR NUMBER RETURN,ACTUAL_LENGTH NUMBER RETURN)
pt: DBMS_SQL
fn: COLUMN_VALUE_LONG
fs: COLUMN_VALUE_LONG(C NUMBER IN,POSITION NUMBER IN,LENGTH NUMBER IN,OFFSET NUMBER IN,VALUE VARCHAR2 OUT,VALUE_LENGTH NUMBER OUT)
pt: DBMS_SQL
fn: COLUMN_VALUE_RAW
fs: COLUMN_VALUE_RAW(C NUMBER IN,POSITION NUMBER IN,VALUE RAW RETURN,C NUMBER IN,POSITION NUMBER IN,VALUE RAW RETURN,COLUMN_ERROR NUMBER RETURN,ACTUAL_LENGTH NUMBER RETURN)
pt: DBMS_SQL
fn: COLUMN_VALUE_ROWID
fs: COLUMN_VALUE_ROWID(C NUMBER IN,POSITION NUMBER IN,VALUE ROWID RETURN,C NUMBER IN,POSITION NUMBER IN,VALUE ROWID RETURN,COLUMN_ERROR NUMBER RETURN,ACTUAL_LENGTH NUMBER RETURN)
pt: DBMS_SQL
fn: DEFINE_ARRAY
fs: DEFINE_ARRAY(C NUMBER IN,POSITION NUMBER IN,N_TAB PL/SQL TABLE IN, NUMBER IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,TTZ_TAB PL/SQL TABLE IN, TIME WITH TIME ZONE IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,TSTZ_TAB PL/SQL TABLE IN, TIMESTAMP WITH TIME ZONE IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,TSTZ_TAB PL/SQL TABLE IN, TIMESTAMP WITH LOCAL TIME ZONE IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,IYM_TAB PL/SQL TABLE IN, INTERVAL YEAR TO MONTH IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,IDS_TAB PL/SQL TABLE IN, INTERVAL DAY TO SECOND IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,BFLT_TAB PL/SQL TABLE IN, BINARY_FLOAT IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,BDBL_TAB PL/SQL TABLE IN, BINARY_DOUBLE IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,C_TAB PL/SQL TABLE IN, VARCHAR2 IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,D_TAB PL/SQL TABLE IN, DATE IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,BL_TAB PL/SQL TABLE IN, BLOB IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,CL_TAB PL/SQL TABLE IN, CLOB IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,BF_TAB PL/SQL TABLE IN, BFILE IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,UR_TAB PL/SQL TABLE IN, UROWID IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,TM_TAB PL/SQL TABLE IN, TIME IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN,C NUMBER IN,POSITION NUMBER IN,TMS_TAB PL/SQL TABLE IN, TIMESTAMP IN,CNT NUMBER IN,LOWER_BOUND NUMBER IN)
pt: DBMS_SQL
fn: DEFINE_COLUMN
fs: DEFINE_COLUMN(C NUMBER IN,POSITION NUMBER IN,COLUMN NUMBER IN,C NUMBER IN,POSITION NUMBER IN,COLUMN TIME WITH TIME ZONE IN,C NUMBER IN,POSITION NUMBER IN,COLUMN TIMESTAMP WITH TIME ZONE IN,C NUMBER IN,POSITION NUMBER IN,COLUMN TIMESTAMP WITH LOCAL TIME ZONE IN,C NUMBER IN,POSITION NUMBER IN,COLUMN INTERVAL YEAR TO MONTH IN,C NUMBER IN,POSITION NUMBER IN,COLUMN INTERVAL DAY TO SECOND IN,C NUMBER IN,POSITION NUMBER IN,COLUMN BINARY_FLOAT IN,C NUMBER IN,POSITION NUMBER IN,COLUMN BINARY_DOUBLE IN,C NUMBER IN,POSITION NUMBER IN,COLUMN VARCHAR2 IN,COLUMN_SIZE NUMBER IN,C NUMBER IN,POSITION NUMBER IN,COLUMN DATE IN,C NUMBER IN,POSITION NUMBER IN,COLUMN BLOB IN,C NUMBER IN,POSITION NUMBER IN,COLUMN CLOB IN,C NUMBER IN,POSITION NUMBER IN,COLUMN BFILE IN,C NUMBER IN,POSITION NUMBER IN,COLUMN UROWID IN,C NUMBER IN,POSITION NUMBER IN,COLUMN TIME IN,C NUMBER IN,POSITION NUMBER IN,COLUMN TIMESTAMP IN)
pt: DBMS_SQL
fn: DEFINE_COLUMN_CHAR
fs: DEFINE_COLUMN_CHAR(C NUMBER IN,POSITION NUMBER IN,COLUMN CHAR IN,COLUMN_SIZE NUMBER IN)
pt: DBMS_SQL
fn: DEFINE_COLUMN_LONG
fs: DEFINE_COLUMN_LONG(C NUMBER IN,POSITION NUMBER IN)
pt: DBMS_SQL
fn: DEFINE_COLUMN_RAW
fs: DEFINE_COLUMN_RAW(C NUMBER IN,POSITION NUMBER IN,COLUMN RAW IN,COLUMN_SIZE NUMBER IN)
pt: DBMS_SQL
fn: DEFINE_COLUMN_ROWID
fs: DEFINE_COLUMN_ROWID(C NUMBER IN,POSITION NUMBER IN,COLUMN ROWID IN)
pt: DBMS_SQL
fn: DESCRIBE_COLUMNS
fs: DESCRIBE_COLUMNS(C NUMBER IN,COL_CNT NUMBER OUT,DESC_T PL/SQL TABLE OUT)
pt: DBMS_SQL
fn: DESCRIBE_COLUMNS2
fs: DESCRIBE_COLUMNS2(C NUMBER IN,COL_CNT NUMBER OUT,DESC_T PL/SQL TABLE OUT)
pt: DBMS_SQL
fn: PARSE
fs: PARSE(C NUMBER IN,STATEMENT VARCHAR2 IN,LANGUAGE_FLAG NUMBER IN,C NUMBER IN,STATEMENT PL/SQL TABLE IN, VARCHAR2 IN,LB NUMBER IN,UB NUMBER IN,LFFLG PL/SQL BOOLEAN IN,LANGUAGE_FLAG NUMBER IN,C NUMBER IN,STATEMENT PL/SQL TABLE IN, VARCHAR2 IN,LB NUMBER IN,UB NUMBER IN,LFFLG PL/SQL BOOLEAN IN,LANGUAGE_FLAG NUMBER IN)
pt: DBMS_SQL
fn: VARIABLE_VALUE
fs: VARIABLE_VALUE(C NUMBER IN,NAME VARCHAR2 IN,VALUE NUMBER RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, BLOB IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, CLOB IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, BFILE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE UROWID RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, UROWID IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE TIME RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, TIME IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE TIMESTAMP RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, TIMESTAMP IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE TIME WITH TIME ZONE RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE VARCHAR2 RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, TIME WITH TIME ZONE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE TIMESTAMP WITH TIME ZONE RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, TIMESTAMP WITH TIME ZONE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE TIMESTAMP WITH LOCAL TIME ZONE RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, TIMESTAMP WITH LOCAL TIME ZONE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE INTERVAL YEAR TO MONTH RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, INTERVAL YEAR TO MONTH IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE INTERVAL DAY TO SECOND RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, INTERVAL DAY TO SECOND IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE BINARY_FLOAT RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE DATE RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, BINARY_FLOAT IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE BINARY_DOUBLE RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, BINARY_DOUBLE IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE BLOB RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE CLOB RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE BFILE RETURN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, NUMBER IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, VARCHAR2 IN,C NUMBER IN,NAME VARCHAR2 IN,VALUE PL/SQL TABLE IN, DATE IN)
pt: DBMS_SQL
fn: VARIABLE_VALUE_CHAR
fs: VARIABLE_VALUE_CHAR(C NUMBER IN,NAME VARCHAR2 IN,VALUE CHAR OUT)
pt: DBMS_SQL
fn: VARIABLE_VALUE_RAW
fs: VARIABLE_VALUE_RAW(C NUMBER IN,NAME VARCHAR2 IN,VALUE RAW OUT)
pt: DBMS_SQL
fn: VARIABLE_VALUE_ROWID
fs: VARIABLE_VALUE_ROWID(C NUMBER IN,NAME VARCHAR2 IN,VALUE ROWID OUT)
pt: DBMS_SQL
fn: ALTER_SQL_PROFILE
fs: ALTER_SQL_PROFILE(NAME VARCHAR2 IN,ATTRIBUTE_NAME VARCHAR2 IN,VALUE VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: CANCEL_TUNING_TASK
fs: CANCEL_TUNING_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: CAPTURE_CURSOR_CACHE_SQLSET
fs: CAPTURE_CURSOR_CACHE_SQLSET(SQLSET_NAME VARCHAR2 IN,TIME_LIMIT BINARY_INTEGER IN,REPEAT_INTERVAL BINARY_INTEGER IN,CAPTURE_OPTION VARCHAR2 IN,CAPTURE_MODE NUMBER IN,BASIC_FILTER VARCHAR2 IN,SQLSET_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: CAP_STS_CBK
fs: CAP_STS_CBK(SQLSET_NAME VARCHAR2 IN,ITERATIONS BINARY_INTEGER IN,CAP_OPTION VARCHAR2 IN,CAP_MODE NUMBER IN,CBK_PROC_NAME VARCHAR2 IN,BASIC_FILTER VARCHAR2 IN,SQLSET_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: CREATE_STGTAB_SQLPROF
fs: CREATE_STGTAB_SQLPROF(TABLE_NAME VARCHAR2 IN,SCHEMA_NAME VARCHAR2 IN,TABLESPACE_NAME VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: CREATE_STGTAB_SQLSET
fs: CREATE_STGTAB_SQLSET(TABLE_NAME VARCHAR2 IN,SCHEMA_NAME VARCHAR2 IN,TABLESPACE_NAME VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: DELETE_SQLSET
fs: DELETE_SQLSET(SQLSET_NAME VARCHAR2 IN,BASIC_FILTER VARCHAR2 IN,SQLSET_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: DROP_SQLSET
fs: DROP_SQLSET(SQLSET_NAME VARCHAR2 IN,SQLSET_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: DROP_SQL_PROFILE
fs: DROP_SQL_PROFILE(NAME VARCHAR2 IN,IGNORE PL/SQL BOOLEAN IN)
pt: DBMS_SQLTUNE
fn: DROP_TUNING_TASK
fs: DROP_TUNING_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: EXECUTE_TUNING_TASK
fs: EXECUTE_TUNING_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: IMPORT_SQL_PROFILE
fs: IMPORT_SQL_PROFILE(SQL_TEXT CLOB IN,PROFILE VARRAY IN,NAME VARCHAR2 IN,DESCRIPTION VARCHAR2 IN,CATEGORY VARCHAR2 IN,VALIDATE PL/SQL BOOLEAN IN,REPLACE PL/SQL BOOLEAN IN,FORCE_MATCH PL/SQL BOOLEAN IN)
pt: DBMS_SQLTUNE
fn: INTERRUPT_TUNING_TASK
fs: INTERRUPT_TUNING_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: LOAD_SQLSET
fs: LOAD_SQLSET(SQLSET_NAME VARCHAR2 IN,POPULATE_CURSOR REF CURSOR IN,LOAD_OPTION VARCHAR2 IN,UPDATE_OPTION VARCHAR2 IN,UPDATE_CONDITION VARCHAR2 IN,UPDATE_ATTRIBUTES VARCHAR2 IN,IGNORE_NULL PL/SQL BOOLEAN IN,COMMIT_ROWS BINARY_INTEGER IN,SQLSET_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: PACK_STGTAB_SQLPROF
fs: PACK_STGTAB_SQLPROF(PROFILE_NAME VARCHAR2 IN,PROFILE_CATEGORY VARCHAR2 IN,STAGING_TABLE_NAME VARCHAR2 IN,STAGING_SCHEMA_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: PACK_STGTAB_SQLSET
fs: PACK_STGTAB_SQLSET(SQLSET_NAME VARCHAR2 IN,SQLSET_OWNER VARCHAR2 IN,STAGING_TABLE_NAME VARCHAR2 IN,STAGING_SCHEMA_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: REMAP_STGTAB_SQLPROF
fs: REMAP_STGTAB_SQLPROF(OLD_PROFILE_NAME VARCHAR2 IN,NEW_PROFILE_NAME VARCHAR2 IN,NEW_PROFILE_CATEGORY VARCHAR2 IN,STAGING_TABLE_NAME VARCHAR2 IN,STAGING_SCHEMA_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: REMAP_STGTAB_SQLSET
fs: REMAP_STGTAB_SQLSET(OLD_SQLSET_NAME VARCHAR2 IN,OLD_SQLSET_OWNER VARCHAR2 IN,NEW_SQLSET_NAME VARCHAR2 IN,NEW_SQLSET_OWNER VARCHAR2 IN,STAGING_TABLE_NAME VARCHAR2 IN,STAGING_SCHEMA_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: REMOVE_SQLSET_REFERENCE
fs: REMOVE_SQLSET_REFERENCE(SQLSET_NAME VARCHAR2 IN,REFERENCE_ID NUMBER IN,SQLSET_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: RESET_TUNING_TASK
fs: RESET_TUNING_TASK(TASK_NAME VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: RESUME_TUNING_TASK
fs: RESUME_TUNING_TASK(TASK_NAME VARCHAR2 IN,BASIC_FILTER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: SET_TUNING_TASK_PARAMETER
fs: SET_TUNING_TASK_PARAMETER(TASK_NAME VARCHAR2 IN,PARAMETER VARCHAR2 IN,VALUE VARCHAR2 IN,TASK_NAME VARCHAR2 IN,PARAMETER VARCHAR2 IN,VALUE NUMBER IN,PARAMETER VARCHAR2 IN,VALUE VARCHAR2 IN,PARAMETER VARCHAR2 IN,VALUE NUMBER IN)
pt: DBMS_SQLTUNE
fn: UNPACK_STGTAB_SQLPROF
fs: UNPACK_STGTAB_SQLPROF(PROFILE_NAME VARCHAR2 IN,PROFILE_CATEGORY VARCHAR2 IN,REPLACE PL/SQL BOOLEAN IN,STAGING_TABLE_NAME VARCHAR2 IN,STAGING_SCHEMA_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: UNPACK_STGTAB_SQLSET
fs: UNPACK_STGTAB_SQLSET(SQLSET_NAME VARCHAR2 IN,SQLSET_OWNER VARCHAR2 IN,REPLACE PL/SQL BOOLEAN IN,STAGING_TABLE_NAME VARCHAR2 IN,STAGING_SCHEMA_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: UPDATE_SQLSET
fs: UPDATE_SQLSET(SQLSET_NAME VARCHAR2 IN,SQL_ID VARCHAR2 IN,ATTRIBUTE_NAME VARCHAR2 IN,ATTRIBUTE_VALUE VARCHAR2 IN,SQLSET_OWNER VARCHAR2 IN,SQLSET_NAME VARCHAR2 IN,SQL_ID VARCHAR2 IN,PLAN_HASH_VALUE NUMBER IN,ATTRIBUTE_NAME VARCHAR2 IN,ATTRIBUTE_VALUE VARCHAR2 IN,SQLSET_OWNER VARCHAR2 IN,SQLSET_NAME VARCHAR2 IN,SQL_ID VARCHAR2 IN,ATTRIBUTE_NAME VARCHAR2 IN,ATTRIBUTE_VALUE NUMBER IN,SQLSET_OWNER VARCHAR2 IN,SQLSET_NAME VARCHAR2 IN,SQL_ID VARCHAR2 IN,PLAN_HASH_VALUE NUMBER IN,ATTRIBUTE_NAME VARCHAR2 IN,ATTRIBUTE_VALUE NUMBER IN,SQLSET_OWNER VARCHAR2 IN)
pt: DBMS_SQLTUNE
fn: COMMIT
fs: COMMIT()
pt: DBMS_STANDARD
fn: COMMIT_CM
fs: COMMIT_CM(VC VARCHAR2 IN)
pt: DBMS_STANDARD
fn: RAISE_APPLICATION_ERROR
fs: RAISE_APPLICATION_ERROR(NUM BINARY_INTEGER IN,MSG VARCHAR2 IN,KEEPERRORSTACK PL/SQL BOOLEAN IN)
pt: DBMS_STANDARD
fn: ROLLBACK_NR
fs: ROLLBACK_NR()
pt: DBMS_STANDARD
fn: ROLLBACK_SV
fs: ROLLBACK_SV(SAVE_POINT VARCHAR2 IN)
pt: DBMS_STANDARD
fn: SAVEPOINT
fs: SAVEPOINT(SAVE_POINT VARCHAR2 IN)
pt: DBMS_STANDARD
fn: SET_TRANSACTION_USE
fs: SET_TRANSACTION_USE(VC VARCHAR2 IN)
pt: DBMS_STANDARD
fn: ALTER_DATABASE_TAB_MONITORING
fs: ALTER_DATABASE_TAB_MONITORING(MONITORING PL/SQL BOOLEAN IN,SYSOBJS PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: ALTER_SCHEMA_TAB_MONITORING
fs: ALTER_SCHEMA_TAB_MONITORING(OWNNAME VARCHAR2 IN,MONITORING PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: ALTER_STATS_HISTORY_RETENTION
fs: ALTER_STATS_HISTORY_RETENTION(RETENTION NUMBER IN)
pt: DBMS_STATS
fn: CLEANUP_STATS_JOB_PROC
fs: CLEANUP_STATS_JOB_PROC(CTX NUMBER IN,JOB_OWNER VARCHAR2 IN,JOB_NAME VARCHAR2 IN,SESID NUMBER IN,SESSER NUMBER IN)
pt: DBMS_STATS
fn: CONVERT_RAW_VALUE
fs: CONVERT_RAW_VALUE(RAWVAL RAW IN,RESVAL VARCHAR2 RETURN,RAWVAL RAW IN,RESVAL DATE RETURN,RAWVAL RAW IN,RESVAL NUMBER RETURN,RAWVAL RAW IN,RESVAL BINARY_FLOAT RETURN,RAWVAL RAW IN,RESVAL BINARY_DOUBLE RETURN)
pt: DBMS_STATS
fn: CONVERT_RAW_VALUE_NVARCHAR
fs: CONVERT_RAW_VALUE_NVARCHAR(RAWVAL RAW IN,RESVAL NVARCHAR2 OUT)
pt: DBMS_STATS
fn: CONVERT_RAW_VALUE_ROWID
fs: CONVERT_RAW_VALUE_ROWID(RAWVAL RAW IN,RESVAL ROWID OUT)
pt: DBMS_STATS
fn: COPY_TABLE_STATS
fs: COPY_TABLE_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,SRCPARTNAME VARCHAR2 IN,DSTPARTNAME VARCHAR2 IN,FLAGS NUMBER IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: CREATE_STAT_TABLE
fs: CREATE_STAT_TABLE(OWNNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,TBLSPACE VARCHAR2 IN,GLOBAL_TEMPORARY PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: DELETE_COLUMN_STATS
fs: DELETE_COLUMN_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,COLNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,CASCADE_PARTS PL/SQL BOOLEAN IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: DELETE_DATABASE_STATS
fs: DELETE_DATABASE_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: DELETE_DICTIONARY_STATS
fs: DELETE_DICTIONARY_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: DELETE_FIXED_OBJECTS_STATS
fs: DELETE_FIXED_OBJECTS_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: DELETE_INDEX_STATS
fs: DELETE_INDEX_STATS(OWNNAME VARCHAR2 IN,INDNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,CASCADE_PARTS PL/SQL BOOLEAN IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: DELETE_SCHEMA_STATS
fs: DELETE_SCHEMA_STATS(OWNNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: DELETE_SYSTEM_STATS
fs: DELETE_SYSTEM_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: DELETE_TABLE_STATS
fs: DELETE_TABLE_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,CASCADE_PARTS PL/SQL BOOLEAN IN,CASCADE_COLUMNS PL/SQL BOOLEAN IN,CASCADE_INDEXES PL/SQL BOOLEAN IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: DROP_STAT_TABLE
fs: DROP_STAT_TABLE(OWNNAME VARCHAR2 IN,STATTAB VARCHAR2 IN)
pt: DBMS_STATS
fn: EXPORT_COLUMN_STATS
fs: EXPORT_COLUMN_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,COLNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: EXPORT_DATABASE_STATS
fs: EXPORT_DATABASE_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: EXPORT_DICTIONARY_STATS
fs: EXPORT_DICTIONARY_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: EXPORT_FIXED_OBJECTS_STATS
fs: EXPORT_FIXED_OBJECTS_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: EXPORT_INDEX_STATS
fs: EXPORT_INDEX_STATS(OWNNAME VARCHAR2 IN,INDNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: EXPORT_SCHEMA_STATS
fs: EXPORT_SCHEMA_STATS(OWNNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: EXPORT_SYSTEM_STATS
fs: EXPORT_SYSTEM_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: EXPORT_TABLE_STATS
fs: EXPORT_TABLE_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,CASCADE PL/SQL BOOLEAN IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: FLUSH_DATABASE_MONITORING_INFO
fs: FLUSH_DATABASE_MONITORING_INFO()
pt: DBMS_STATS
fn: GATHER_DATABASE_STATS
fs: GATHER_DATABASE_STATS(ESTIMATE_PERCENT NUMBER IN,BLOCK_SAMPLE PL/SQL BOOLEAN IN,METHOD_OPT VARCHAR2 IN,DEGREE NUMBER IN,GRANULARITY VARCHAR2 IN,CASCADE PL/SQL BOOLEAN IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,OPTIONS VARCHAR2 IN,OBJLIST TABLE RETURN, PL/SQL RECORD RETURN,OWNNAME VARCHAR2 RETURN,OBJTYPE VARCHAR2 RETURN,OBJNAME VARCHAR2 RETURN,PARTNAME VARCHAR2 RETURN,SUBPARTNAME VARCHAR2 RETURN,CONFIDENCE NUMBER RETURN,STATOWN VARCHAR2 IN,GATHER_SYS PL/SQL BOOLEAN IN,NO_INVALIDATE PL/SQL BOOLEAN IN,GATHER_TEMP PL/SQL BOOLEAN IN,GATHER_FIXED PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,ESTIMATE_PERCENT NUMBER IN,BLOCK_SAMPLE PL/SQL BOOLEAN IN,METHOD_OPT VARCHAR2 IN,DEGREE NUMBER IN,GRANULARITY VARCHAR2 IN,CASCADE PL/SQL BOOLEAN IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,OPTIONS VARCHAR2 IN,STATOWN VARCHAR2 IN,GATHER_SYS PL/SQL BOOLEAN IN,NO_INVALIDATE PL/SQL BOOLEAN IN,GATHER_TEMP PL/SQL BOOLEAN IN,GATHER_FIXED PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN)
pt: DBMS_STATS
fn: GATHER_DATABASE_STATS_JOB_PROC
fs: GATHER_DATABASE_STATS_JOB_PROC()
pt: DBMS_STATS
fn: GATHER_DICTIONARY_STATS
fs: GATHER_DICTIONARY_STATS(COMP_ID VARCHAR2 IN,ESTIMATE_PERCENT NUMBER IN,BLOCK_SAMPLE PL/SQL BOOLEAN IN,METHOD_OPT VARCHAR2 IN,DEGREE NUMBER IN,GRANULARITY VARCHAR2 IN,CASCADE PL/SQL BOOLEAN IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,OPTIONS VARCHAR2 IN,OBJLIST TABLE RETURN, PL/SQL RECORD RETURN,OWNNAME VARCHAR2 RETURN,OBJTYPE VARCHAR2 RETURN,OBJNAME VARCHAR2 RETURN,PARTNAME VARCHAR2 RETURN,SUBPARTNAME VARCHAR2 RETURN,CONFIDENCE NUMBER RETURN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,COMP_ID VARCHAR2 IN,ESTIMATE_PERCENT NUMBER IN,BLOCK_SAMPLE PL/SQL BOOLEAN IN,METHOD_OPT VARCHAR2 IN,DEGREE NUMBER IN,GRANULARITY VARCHAR2 IN,CASCADE PL/SQL BOOLEAN IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,OPTIONS VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN)
pt: DBMS_STATS
fn: GATHER_FIXED_OBJECTS_STATS
fs: GATHER_FIXED_OBJECTS_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: GATHER_INDEX_STATS
fs: GATHER_INDEX_STATS(OWNNAME VARCHAR2 IN,INDNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,ESTIMATE_PERCENT NUMBER IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,DEGREE NUMBER IN,GRANULARITY VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: GATHER_SCHEMA_STATS
fs: GATHER_SCHEMA_STATS(OWNNAME VARCHAR2 IN,ESTIMATE_PERCENT NUMBER IN,BLOCK_SAMPLE PL/SQL BOOLEAN IN,METHOD_OPT VARCHAR2 IN,DEGREE NUMBER IN,GRANULARITY VARCHAR2 IN,CASCADE PL/SQL BOOLEAN IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,OPTIONS VARCHAR2 IN,OBJLIST TABLE RETURN, PL/SQL RECORD RETURN,OWNNAME VARCHAR2 RETURN,OBJTYPE VARCHAR2 RETURN,OBJNAME VARCHAR2 RETURN,PARTNAME VARCHAR2 RETURN,SUBPARTNAME VARCHAR2 RETURN,CONFIDENCE NUMBER RETURN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,GATHER_TEMP PL/SQL BOOLEAN IN,GATHER_FIXED PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN,OWNNAME VARCHAR2 IN,ESTIMATE_PERCENT NUMBER IN,BLOCK_SAMPLE PL/SQL BOOLEAN IN,METHOD_OPT VARCHAR2 IN,DEGREE NUMBER IN,GRANULARITY VARCHAR2 IN,CASCADE PL/SQL BOOLEAN IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,OPTIONS VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,GATHER_TEMP PL/SQL BOOLEAN IN,GATHER_FIXED PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: GATHER_SYSTEM_STATS
fs: GATHER_SYSTEM_STATS(GATHERING_MODE VARCHAR2 IN,INTERVAL NUMBER IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: GATHER_TABLE_STATS
fs: GATHER_TABLE_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,ESTIMATE_PERCENT NUMBER IN,BLOCK_SAMPLE PL/SQL BOOLEAN IN,METHOD_OPT VARCHAR2 IN,DEGREE NUMBER IN,GRANULARITY VARCHAR2 IN,CASCADE PL/SQL BOOLEAN IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,STATTYPE VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: GENERATE_STATS
fs: GENERATE_STATS(OWNNAME VARCHAR2 IN,OBJNAME VARCHAR2 IN,ORGANIZED NUMBER IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: GET_COLUMN_STATS
fs: GET_COLUMN_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,COLNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,DISTCNT NUMBER RETURN,DENSITY NUMBER RETURN,NULLCNT NUMBER RETURN,SREC PL/SQL RECORD RETURN,EPC NUMBER RETURN,MINVAL RAW RETURN,MAXVAL RAW RETURN,BKVALS VARRAY RETURN, NUMBER RETURN,NOVALS VARRAY RETURN, NUMBER RETURN,CHVALS VARRAY RETURN, VARCHAR2 RETURN,EAVS NUMBER RETURN,AVGCLEN NUMBER RETURN,STATOWN VARCHAR2 IN,OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,COLNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,EXT_STATS RAW RETURN,STATTYPOWN VARCHAR2 RETURN,STATTYPNAME VARCHAR2 RETURN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: GET_INDEX_STATS
fs: GET_INDEX_STATS(OWNNAME VARCHAR2 IN,INDNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,NUMROWS NUMBER RETURN,NUMLBLKS NUMBER RETURN,NUMDIST NUMBER RETURN,AVGLBLK NUMBER RETURN,AVGDBLK NUMBER RETURN,CLSTFCT NUMBER RETURN,INDLEVEL NUMBER RETURN,STATOWN VARCHAR2 IN,GUESSQ NUMBER RETURN,CACHEDBLK NUMBER RETURN,CACHEHIT NUMBER RETURN,OWNNAME VARCHAR2 IN,INDNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,NUMROWS NUMBER RETURN,NUMLBLKS NUMBER RETURN,NUMDIST NUMBER RETURN,AVGLBLK NUMBER RETURN,AVGDBLK NUMBER RETURN,CLSTFCT NUMBER RETURN,INDLEVEL NUMBER RETURN,STATOWN VARCHAR2 IN,GUESSQ NUMBER RETURN,OWNNAME VARCHAR2 IN,INDNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,NUMROWS NUMBER RETURN,NUMLBLKS NUMBER RETURN,NUMDIST NUMBER RETURN,AVGLBLK NUMBER RETURN,AVGDBLK NUMBER RETURN,CLSTFCT NUMBER RETURN,INDLEVEL NUMBER RETURN,STATOWN VARCHAR2 IN,OWNNAME VARCHAR2 IN,INDNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,EXT_STATS RAW RETURN,STATTYPOWN VARCHAR2 RETURN,STATTYPNAME VARCHAR2 RETURN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: GET_SYSTEM_STATS
fs: GET_SYSTEM_STATS(STATUS VARCHAR2 OUT,DSTART DATE OUT,DSTOP DATE OUT,PNAME VARCHAR2 IN,PVALUE NUMBER OUT,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: GET_TABLE_STATS
fs: GET_TABLE_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,NUMROWS NUMBER RETURN,NUMBLKS NUMBER RETURN,AVGRLEN NUMBER RETURN,STATOWN VARCHAR2 IN,OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,NUMROWS NUMBER RETURN,NUMBLKS NUMBER RETURN,AVGRLEN NUMBER RETURN,STATOWN VARCHAR2 IN,CACHEDBLK NUMBER RETURN,CACHEHIT NUMBER RETURN)
pt: DBMS_STATS
fn: IMPORT_COLUMN_STATS
fs: IMPORT_COLUMN_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,COLNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: IMPORT_DATABASE_STATS
fs: IMPORT_DATABASE_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: IMPORT_DICTIONARY_STATS
fs: IMPORT_DICTIONARY_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: IMPORT_FIXED_OBJECTS_STATS
fs: IMPORT_FIXED_OBJECTS_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: IMPORT_INDEX_STATS
fs: IMPORT_INDEX_STATS(OWNNAME VARCHAR2 IN,INDNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: IMPORT_SCHEMA_STATS
fs: IMPORT_SCHEMA_STATS(OWNNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: IMPORT_SYSTEM_STATS
fs: IMPORT_SYSTEM_STATS(STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: IMPORT_TABLE_STATS
fs: IMPORT_TABLE_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,CASCADE PL/SQL BOOLEAN IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: INIT_PACKAGE
fs: INIT_PACKAGE()
pt: DBMS_STATS
fn: LOCK_PARTITION_STATS
fs: LOCK_PARTITION_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN)
pt: DBMS_STATS
fn: LOCK_SCHEMA_STATS
fs: LOCK_SCHEMA_STATS(OWNNAME VARCHAR2 IN,STATTYPE VARCHAR2 IN)
pt: DBMS_STATS
fn: LOCK_TABLE_STATS
fs: LOCK_TABLE_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,STATTYPE VARCHAR2 IN)
pt: DBMS_STATS
fn: PREPARE_COLUMN_VALUES
fs: PREPARE_COLUMN_VALUES(SREC PL/SQL RECORD IN/OUT,EPC NUMBER IN/OUT,MINVAL RAW IN/OUT,MAXVAL RAW IN/OUT,BKVALS VARRAY IN/OUT, NUMBER IN/OUT,NOVALS VARRAY IN/OUT, NUMBER IN/OUT,CHVALS VARRAY IN/OUT, VARCHAR2 IN/OUT,EAVS NUMBER IN/OUT,CHARVALS VARRAY IN, VARCHAR2 IN,SREC PL/SQL RECORD IN/OUT,EPC NUMBER IN/OUT,MINVAL RAW IN/OUT,MAXVAL RAW IN/OUT,BKVALS VARRAY IN/OUT, NUMBER IN/OUT,NOVALS VARRAY IN/OUT, NUMBER IN/OUT,CHVALS VARRAY IN/OUT, VARCHAR2 IN/OUT,EAVS NUMBER IN/OUT,DATEVALS VARRAY IN, DATE IN,SREC PL/SQL RECORD IN/OUT,EPC NUMBER IN/OUT,MINVAL RAW IN/OUT,MAXVAL RAW IN/OUT,BKVALS VARRAY IN/OUT, NUMBER IN/OUT,NOVALS VARRAY IN/OUT, NUMBER IN/OUT,CHVALS VARRAY IN/OUT, VARCHAR2 IN/OUT,EAVS NUMBER IN/OUT,NUMVALS VARRAY IN, NUMBER IN,SREC PL/SQL RECORD IN/OUT,EPC NUMBER IN/OUT,MINVAL RAW IN/OUT,MAXVAL RAW IN/OUT,BKVALS VARRAY IN/OUT, NUMBER IN/OUT,NOVALS VARRAY IN/OUT, NUMBER IN/OUT,CHVALS VARRAY IN/OUT, VARCHAR2 IN/OUT,EAVS NUMBER IN/OUT,FLTVALS VARRAY IN, BINARY_FLOAT IN,SREC PL/SQL RECORD IN/OUT,EPC NUMBER IN/OUT,MINVAL RAW IN/OUT,MAXVAL RAW IN/OUT,BKVALS VARRAY IN/OUT, NUMBER IN/OUT,NOVALS VARRAY IN/OUT, NUMBER IN/OUT,CHVALS VARRAY IN/OUT, VARCHAR2 IN/OUT,EAVS NUMBER IN/OUT,DBLVALS VARRAY IN, BINARY_DOUBLE IN,SREC PL/SQL RECORD IN/OUT,EPC NUMBER IN/OUT,MINVAL RAW IN/OUT,MAXVAL RAW IN/OUT,BKVALS VARRAY IN/OUT, NUMBER IN/OUT,NOVALS VARRAY IN/OUT, NUMBER IN/OUT,CHVALS VARRAY IN/OUT, VARCHAR2 IN/OUT,EAVS NUMBER IN/OUT,RAWVALS VARRAY IN, RAW IN)
pt: DBMS_STATS
fn: PREPARE_COLUMN_VALUES_NVARCHAR
fs: PREPARE_COLUMN_VALUES_NVARCHAR(SREC PL/SQL RECORD IN/OUT,NVMIN NVARCHAR2 IN,NVMAX NVARCHAR2 IN)
pt: DBMS_STATS
fn: PREPARE_COLUMN_VALUES_ROWID
fs: PREPARE_COLUMN_VALUES_ROWID(SREC PL/SQL RECORD IN/OUT,RWMIN ROWID IN,RWMAX ROWID IN)
pt: DBMS_STATS
fn: PURGE_STATS
fs: PURGE_STATS(BEFORE_TIMESTAMP TIMESTAMP WITH TIME ZONE IN)
pt: DBMS_STATS
fn: RESET_PARAM_DEFAULTS
fs: RESET_PARAM_DEFAULTS()
pt: DBMS_STATS
fn: RESTORE_DATABASE_STATS
fs: RESTORE_DATABASE_STATS(AS_OF_TIMESTAMP TIMESTAMP WITH TIME ZONE IN,FORCE PL/SQL BOOLEAN IN,NO_INVALIDATE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: RESTORE_DICTIONARY_STATS
fs: RESTORE_DICTIONARY_STATS(AS_OF_TIMESTAMP TIMESTAMP WITH TIME ZONE IN,FORCE PL/SQL BOOLEAN IN,NO_INVALIDATE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: RESTORE_FIXED_OBJECTS_STATS
fs: RESTORE_FIXED_OBJECTS_STATS(AS_OF_TIMESTAMP TIMESTAMP WITH TIME ZONE IN,FORCE PL/SQL BOOLEAN IN,NO_INVALIDATE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: RESTORE_SCHEMA_STATS
fs: RESTORE_SCHEMA_STATS(OWNNAME VARCHAR2 IN,AS_OF_TIMESTAMP TIMESTAMP WITH TIME ZONE IN,FORCE PL/SQL BOOLEAN IN,NO_INVALIDATE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: RESTORE_SYSTEM_STATS
fs: RESTORE_SYSTEM_STATS(AS_OF_TIMESTAMP TIMESTAMP WITH TIME ZONE IN)
pt: DBMS_STATS
fn: RESTORE_TABLE_STATS
fs: RESTORE_TABLE_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,AS_OF_TIMESTAMP TIMESTAMP WITH TIME ZONE IN,RESTORE_CLUSTER_INDEX PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN,NO_INVALIDATE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: SET_COLUMN_STATS
fs: SET_COLUMN_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,COLNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,DISTCNT NUMBER IN,DENSITY NUMBER IN,NULLCNT NUMBER IN,SREC PL/SQL RECORD IN,EPC NUMBER IN,MINVAL RAW IN,MAXVAL RAW IN,BKVALS VARRAY IN, NUMBER IN,NOVALS VARRAY IN, NUMBER IN,CHVALS VARRAY IN, VARCHAR2 IN,EAVS NUMBER IN,AVGCLEN NUMBER IN,FLAGS NUMBER IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN,OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,COLNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,EXT_STATS RAW IN,STATTYPOWN VARCHAR2 IN,STATTYPNAME VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: SET_INDEX_STATS
fs: SET_INDEX_STATS(OWNNAME VARCHAR2 IN,INDNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,NUMROWS NUMBER IN,NUMLBLKS NUMBER IN,NUMDIST NUMBER IN,AVGLBLK NUMBER IN,AVGDBLK NUMBER IN,CLSTFCT NUMBER IN,INDLEVEL NUMBER IN,FLAGS NUMBER IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,GUESSQ NUMBER IN,CACHEDBLK NUMBER IN,CACHEHIT NUMBER IN,FORCE PL/SQL BOOLEAN IN,OWNNAME VARCHAR2 IN,INDNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,EXT_STATS RAW IN,STATTYPOWN VARCHAR2 IN,STATTYPNAME VARCHAR2 IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: SET_PARAM
fs: SET_PARAM(PNAME VARCHAR2 IN,PVAL VARCHAR2 IN)
pt: DBMS_STATS
fn: SET_SYSTEM_STATS
fs: SET_SYSTEM_STATS(PNAME VARCHAR2 IN,PVALUE NUMBER IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,STATOWN VARCHAR2 IN)
pt: DBMS_STATS
fn: SET_TABLE_STATS
fs: SET_TABLE_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN,STATTAB VARCHAR2 IN,STATID VARCHAR2 IN,NUMROWS NUMBER IN,NUMBLKS NUMBER IN,AVGRLEN NUMBER IN,FLAGS NUMBER IN,STATOWN VARCHAR2 IN,NO_INVALIDATE PL/SQL BOOLEAN IN,CACHEDBLK NUMBER IN,CACHEHIT NUMBER IN,FORCE PL/SQL BOOLEAN IN)
pt: DBMS_STATS
fn: UNLOCK_PARTITION_STATS
fs: UNLOCK_PARTITION_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,PARTNAME VARCHAR2 IN)
pt: DBMS_STATS
fn: UNLOCK_SCHEMA_STATS
fs: UNLOCK_SCHEMA_STATS(OWNNAME VARCHAR2 IN,STATTYPE VARCHAR2 IN)
pt: DBMS_STATS
fn: UNLOCK_TABLE_STATS
fs: UNLOCK_TABLE_STATS(OWNNAME VARCHAR2 IN,TABNAME VARCHAR2 IN,STATTYPE VARCHAR2 IN)
pt: DBMS_STATS
fn: UPGRADE_STAT_TABLE
fs: UPGRADE_STAT_TABLE(OWNNAME VARCHAR2 IN,STATTAB VARCHAR2 IN)
pt: DBMS_STATS
fn: EXPONENTIAL_DIST_FIT
fs: EXPONENTIAL_DIST_FIT(OWNERNAME VARCHAR2 IN,TABLENAME VARCHAR2 IN,COLUMNNAME VARCHAR2 IN,TEST_TYPE VARCHAR2 IN,LAMBDA NUMBER IN/OUT,MU NUMBER IN/OUT,SIG NUMBER OUT)
pt: DBMS_STAT_FUNCS
fn: NORMAL_DIST_FIT
fs: NORMAL_DIST_FIT(OWNERNAME VARCHAR2 IN,TABLENAME VARCHAR2 IN,COLUMNNAME VARCHAR2 IN,TEST_TYPE VARCHAR2 IN,MEAN NUMBER IN/OUT,STDEV NUMBER IN/OUT,SIG NUMBER OUT)
pt: DBMS_STAT_FUNCS
fn: POISSON_DIST_FIT
fs: POISSON_DIST_FIT(OWNERNAME VARCHAR2 IN,TABLENAME VARCHAR2 IN,COLUMNNAME VARCHAR2 IN,TEST_TYPE VARCHAR2 IN,LAMBDA NUMBER IN/OUT,SIG NUMBER OUT)
pt: DBMS_STAT_FUNCS
fn: SUMMARY
fs: SUMMARY(P_OWNERNAME VARCHAR2 IN,P_TABLENAME VARCHAR2 IN,P_COLUMNNAME VARCHAR2 IN,P_SIGMA_VALUE NUMBER IN,S PL/SQL RECORD OUT)
pt: DBMS_STAT_FUNCS
fn: UNIFORM_DIST_FIT
fs: UNIFORM_DIST_FIT(OWNERNAME VARCHAR2 IN,TABLENAME VARCHAR2 IN,COLUMNNAME VARCHAR2 IN,VAR_TYPE VARCHAR2 IN,TEST_TYPE VARCHAR2 IN,PARAMA NUMBER IN/OUT,PARAMB NUMBER IN/OUT,SIG NUMBER OUT)
pt: DBMS_STAT_FUNCS
fn: WEIBULL_DIST_FIT
fs: WEIBULL_DIST_FIT(OWNERNAME VARCHAR2 IN,TABLENAME VARCHAR2 IN,COLUMNNAME VARCHAR2 IN,TEST_TYPE VARCHAR2 IN,ALPHA NUMBER IN/OUT,MU NUMBER IN/OUT,BETA NUMBER IN/OUT,SIG NUMBER OUT)
pt: DBMS_STAT_FUNCS
fn: SET_TAG
fs: SET_TAG(TAG RAW IN)
pt: DBMS_STREAMS
fn: NEED_SCN
fs: NEED_SCN(DBLINK VARCHAR2 IN,INTEREST_NUM NUMBER OUT,COOKIE VARCHAR2 IN/OUT)
pt: DBMS_STREAMS_PUB_RPC
fn: ADD_FILTER_ITEM
fs: ADD_FILTER_ITEM(FILTER_ID NUMBER IN,FILTER_NAME VARCHAR2 IN,STRING_LIST VARCHAR2 IN,NUMBER_MIN NUMBER IN,NUMBER_MAX NUMBER IN,DATE_MIN VARCHAR2 IN,DATE_MAX VARCHAR2 IN)
pt: DBMS_SUMMARY
fn: CREATE_ID
fs: CREATE_ID(ID NUMBER OUT)
pt: DBMS_SUMMARY
fn: DELETE_FILTER_ITEM
fs: DELETE_FILTER_ITEM(FILTER_ID NUMBER IN,FILTER_NAME VARCHAR2 IN)
pt: DBMS_SUMMARY
fn: DISABLE_DEPENDENT
fs: DISABLE_DEPENDENT(DETAIL_TABLES VARCHAR2 IN)
pt: DBMS_SUMMARY
fn: ENABLE_DEPENDENT
fs: ENABLE_DEPENDENT(DETAIL_TABLES VARCHAR2 IN)
pt: DBMS_SUMMARY
fn: ESTIMATE_MVIEW_SIZE
fs: ESTIMATE_MVIEW_SIZE(STMT_ID VARCHAR2 IN,SELECT_CLAUSE VARCHAR2 IN,NUM_ROWS NUMBER OUT,NUM_BYTES NUMBER OUT)
pt: DBMS_SUMMARY
fn: ESTIMATE_SUMMARY_SIZE
fs: ESTIMATE_SUMMARY_SIZE(STMT_ID VARCHAR2 IN,SELECT_CLAUSE VARCHAR2 IN,NUM_ROWS NUMBER OUT,NUM_BYTES NUMBER OUT)
pt: DBMS_SUMMARY
fn: EVALUATE_MVIEW_STRATEGY
fs: EVALUATE_MVIEW_STRATEGY(RUN_ID NUMBER IN,WORKLOAD_ID NUMBER IN,FILTER_ID NUMBER IN)
pt: DBMS_SUMMARY
fn: EVALUATE_UTILIZATION
fs: EVALUATE_UTILIZATION()
pt: DBMS_SUMMARY
fn: EVALUATE_UTILIZATION_W
fs: EVALUATE_UTILIZATION_W()
pt: DBMS_SUMMARY
fn: GENERATE_MVIEW_REPORT
fs: GENERATE_MVIEW_REPORT(FILENAME VARCHAR2 IN,ID NUMBER IN,FLAGS NUMBER IN)
pt: DBMS_SUMMARY
fn: GENERATE_MVIEW_SCRIPT
fs: GENERATE_MVIEW_SCRIPT(FILENAME VARCHAR2 IN,ID NUMBER IN,TSPACE VARCHAR2 IN)
pt: DBMS_SUMMARY
fn: LOAD_WORKLOAD_CACHE
fs: LOAD_WORKLOAD_CACHE(WORKLOAD_ID NUMBER IN,FLAGS NUMBER IN,FILTER_ID NUMBER IN,APPLICATION VARCHAR2 IN,PRIORITY NUMBER IN)
pt: DBMS_SUMMARY
fn: LOAD_WORKLOAD_TRACE
fs: LOAD_WORKLOAD_TRACE(WORKLOAD_ID NUMBER IN,FLAGS NUMBER IN,FILTER_ID NUMBER IN,APPLICATION VARCHAR2 IN,PRIORITY NUMBER IN,OWNER_NAME VARCHAR2 IN)
pt: DBMS_SUMMARY
fn: LOAD_WORKLOAD_USER
fs: LOAD_WORKLOAD_USER(WORKLOAD_ID NUMBER IN,FLAGS NUMBER IN,FILTER_ID NUMBER IN,OWNER_NAME VARCHAR2 IN,TABLE_NAME VARCHAR2 IN)
pt: DBMS_SUMMARY
fn: PURGE_FILTER
fs: PURGE_FILTER(FILTER_ID NUMBER IN)
pt: DBMS_SUMMARY
fn: PURGE_RESULTS
fs: PURGE_RESULTS(RUN_ID NUMBER IN)
pt: DBMS_SUMMARY
fn: PURGE_WORKLOAD
fs: PURGE_WORKLOAD(WORKLOAD_ID NUMBER IN)
pt: DBMS_SUMMARY
fn: RECOMMEND_MV
fs: RECOMMEND_MV(FACT_TABLE_FILTER VARCHAR2 IN,STORAGE_IN_BYTES NUMBER IN,RETENTION_LIST VARCHAR2 IN,RETENTION_PCT NUMBER IN)
pt: DBMS_SUMMARY
fn: RECOMMEND_MVIEW_STRATEGY
fs: RECOMMEND_MVIEW_STRATEGY(RUN_ID NUMBER IN,WORKLOAD_ID NUMBER IN,FILTER_ID NUMBER IN,STORAGE_IN_BYTES NUMBER IN,RETENTION_PCT NUMBER IN,RETENTION_LIST VARCHAR2 IN,FACT_TABLE_FILTER VARCHAR2 IN)
pt: DBMS_SUMMARY
fn: RECOMMEND_MV_W
fs: RECOMMEND_MV_W(FACT_TABLE_FILTER VARCHAR2 IN,STORAGE_IN_BYTES NUMBER IN,RETENTION_LIST VARCHAR2 IN,RETENTION_PCT NUMBER IN)
pt: DBMS_SUMMARY
fn: SET_CANCELLED
fs: SET_CANCELLED(RUN_ID NUMBER IN)
pt: DBMS_SUMMARY
fn: SET_LOGFILE_NAME
fs: SET_LOGFILE_NAME(FILENAME VARCHAR2 IN)
pt: DBMS_SUMMARY
fn: SET_PROPERTY
fs: SET_PROPERTY(NAME VARCHAR2 IN,VALUE VARCHAR2 IN)
pt: DBMS_SUMMARY
fn: SHOW_PROPERTIES
fs: SHOW_PROPERTIES()
pt: DBMS_SUMMARY
fn: VALIDATE_DIMENSION
fs: VALIDATE_DIMENSION(DIMENSION_NAME VARCHAR2 IN,DIMENSION VARCHAR2 IN,DIMENSION_OWNER VARCHAR2 IN,INCREMENTAL PL/SQL BOOLEAN IN,CHECK_NULLS PL/SQL BOOLEAN IN,INCREMENTAL PL/SQL BOOLEAN IN,CHECK_NULLS PL/SQL BOOLEAN IN,STATEMENT_ID VARCHAR2 IN,RUN_ID NUMBER IN,DIMENSION_NAME VARCHAR2 IN,DIMENSION VARCHAR2 IN,CHECK_NULLS PL/SQL BOOLEAN IN,DIMENSION_OWNER VARCHAR2 IN,INCREMENTAL PL/SQL BOOLEAN IN,STATEMENT_ID VARCHAR2 IN,CHECK_NULLS PL/SQL BOOLEAN IN)
pt: DBMS_SUMMARY
fn: VALIDATE_WORKLOAD_CACHE
fs: VALIDATE_WORKLOAD_CACHE(VALID NUMBER OUT,ERROR VARCHAR2 OUT)
pt: DBMS_SUMMARY
fn: VALIDATE_WORKLOAD_TRACE
fs: VALIDATE_WORKLOAD_TRACE(OWNER_NAME VARCHAR2 IN,VALID NUMBER OUT,ERROR VARCHAR2 OUT)
pt: DBMS_SUMMARY
fn: VALIDATE_WORKLOAD_USER
fs: VALIDATE_WORKLOAD_USER(OWNER_NAME VARCHAR2 IN,TABLE_NAME VARCHAR2 IN,VALID NUMBER OUT,ERROR VARCHAR2 OUT)
pt: DBMS_SUMMARY
fn: CLEAR_PLSQL_TRACE
fs: CLEAR_PLSQL_TRACE()
pt: DBMS_TRACE
fn: COMMENT_PLSQL_TRACE
fs: COMMENT_PLSQL_TRACE(COMMENT VARCHAR2 IN)
pt: DBMS_TRACE
fn: LIMIT_PLSQL_TRACE
fs: LIMIT_PLSQL_TRACE(LIMIT BINARY_INTEGER IN)
pt: DBMS_TRACE
fn: PAUSE_PLSQL_TRACE
fs: PAUSE_PLSQL_TRACE()
pt: DBMS_TRACE
fn: PLSQL_TRACE_VERSION
fs: PLSQL_TRACE_VERSION(MAJOR BINARY_INTEGER OUT,MINOR BINARY_INTEGER OUT)
pt: DBMS_TRACE
fn: RESUME_PLSQL_TRACE
fs: RESUME_PLSQL_TRACE()
pt: DBMS_TRACE
fn: SET_PLSQL_TRACE
fs: SET_PLSQL_TRACE(TRACE_LEVEL BINARY_INTEGER IN)
pt: DBMS_TRACE
fn: ADVISE_COMMIT
fs: ADVISE_COMMIT()
pt: DBMS_TRANSACTION
fn: ADVISE_NOTHING
fs: ADVISE_NOTHING()
pt: DBMS_TRANSACTION
fn: ADVISE_ROLLBACK
fs: ADVISE_ROLLBACK()
pt: DBMS_TRANSACTION
fn: BEGIN_DISCRETE_TRANSACTION
fs: BEGIN_DISCRETE_TRANSACTION()
pt: DBMS_TRANSACTION
fn: COMMIT
fs: COMMIT()
pt: DBMS_TRANSACTION
fn: COMMIT_COMMENT
fs: COMMIT_COMMENT(CMNT VARCHAR2 IN)
pt: DBMS_TRANSACTION
fn: COMMIT_FORCE
fs: COMMIT_FORCE(XID VARCHAR2 IN,SCN VARCHAR2 IN)
pt: DBMS_TRANSACTION
fn: PURGE_LOST_DB_ENTRY
fs: PURGE_LOST_DB_ENTRY(XID VARCHAR2 IN)
pt: DBMS_TRANSACTION
fn: PURGE_MIXED
fs: PURGE_MIXED(XID VARCHAR2 IN)
pt: DBMS_TRANSACTION
fn: READ_ONLY
fs: READ_ONLY()
pt: DBMS_TRANSACTION
fn: READ_WRITE
fs: READ_WRITE()
pt: DBMS_TRANSACTION
fn: ROLLBACK
fs: ROLLBACK()
pt: DBMS_TRANSACTION
fn: ROLLBACK_FORCE
fs: ROLLBACK_FORCE(XID VARCHAR2 IN)
pt: DBMS_TRANSACTION
fn: ROLLBACK_SAVEPOINT
fs: ROLLBACK_SAVEPOINT(SAVEPT VARCHAR2 IN)
pt: DBMS_TRANSACTION
fn: SAVEPOINT
fs: SAVEPOINT(SAVEPT VARCHAR2 IN)
pt: DBMS_TRANSACTION
fn: USE_ROLLBACK_SEGMENT
fs: USE_ROLLBACK_SEGMENT(RB_NAME VARCHAR2 IN)
pt: DBMS_TRANSACTION
fn: IMPORT_TRANSFORMATION
fs: IMPORT_TRANSFORMATION(TRANS_SCHEMA VARCHAR2 IN,TRANS_NAME VARCHAR2 IN,FROM_SCHEMA VARCHAR2 IN,FROM_TYPE VARCHAR2 IN,TO_SCHEMA VARCHAR2 IN,TO_TYPE VARCHAR2 IN)
pt: DBMS_TRANSFORM_EXIMP
fn: IMPORT_TRANS_ATTR
fs: IMPORT_TRANS_ATTR(TRANS_SCHEMA VARCHAR2 IN,TRANS_NAME VARCHAR2 IN,ATTR_NO VARCHAR2 IN,SQL_EXPRESSION VARCHAR2 IN)
pt: DBMS_TRANSFORM_EXIMP
fn: END_MIGRATION
fs: END_MIGRATION(SESSION_ID OBJECT IN,DEST_SESSION_ID OBJECT IN,FAILURE_REASON BINARY_INTEGER IN)
pt: DBMS_TSM_PRVT
fn: END_PREPARE
fs: END_PREPARE(SESSION_ID OBJECT IN,DEST_SESSION_ID OBJECT IN,DEST_CONNECT_STR VARCHAR2 IN,DEST_SESSION_KEY RAW IN)
pt: DBMS_TSM_PRVT
fn: ACTIVE_INSTANCES
fs: ACTIVE_INSTANCES(INSTANCE_TABLE PL/SQL TABLE OUT,INSTANCE_COUNT NUMBER OUT)
pt: DBMS_UTILITY
fn: ANALYZE_DATABASE
fs: ANALYZE_DATABASE(METHOD VARCHAR2 IN,ESTIMATE_ROWS NUMBER IN,ESTIMATE_PERCENT NUMBER IN,METHOD_OPT VARCHAR2 IN)
pt: DBMS_UTILITY
fn: ANALYZE_PART_OBJECT
fs: ANALYZE_PART_OBJECT(SCHEMA VARCHAR2 IN,OBJECT_NAME VARCHAR2 IN,OBJECT_TYPE CHAR IN,COMMAND_TYPE CHAR IN,COMMAND_OPT VARCHAR2 IN,SAMPLE_CLAUSE VARCHAR2 IN)
pt: DBMS_UTILITY
fn: ANALYZE_SCHEMA
fs: ANALYZE_SCHEMA(SCHEMA VARCHAR2 IN,METHOD VARCHAR2 IN,ESTIMATE_ROWS NUMBER IN,ESTIMATE_PERCENT NUMBER IN,METHOD_OPT VARCHAR2 IN)
pt: DBMS_UTILITY
fn: CANONICALIZE
fs: CANONICALIZE(NAME VARCHAR2 IN,CANON_NAME VARCHAR2 OUT,CANON_LEN BINARY_INTEGER IN)
pt: DBMS_UTILITY
fn: COMMA_TO_TABLE
fs: COMMA_TO_TABLE(LIST VARCHAR2 IN,TABLEN BINARY_INTEGER RETURN,TAB PL/SQL TABLE RETURN, VARCHAR2 RETURN,LIST VARCHAR2 IN,TABLEN BINARY_INTEGER RETURN,TAB PL/SQL TABLE RETURN, VARCHAR2 RETURN)
pt: DBMS_UTILITY
fn: COMPILE_SCHEMA
fs: COMPILE_SCHEMA(SCHEMA VARCHAR2 IN,COMPILE_ALL PL/SQL BOOLEAN IN,REUSE_SETTINGS PL/SQL BOOLEAN IN)
pt: DBMS_UTILITY
fn: CREATE_ALTER_TYPE_ERROR_TABLE
fs: CREATE_ALTER_TYPE_ERROR_TABLE(SCHEMA_NAME VARCHAR2 IN,TABLE_NAME VARCHAR2 IN)
pt: DBMS_UTILITY
fn: DB_VERSION
fs: DB_VERSION(VERSION VARCHAR2 OUT,COMPATIBILITY VARCHAR2 OUT)
pt: DBMS_UTILITY
fn: EXEC_DDL_STATEMENT
fs: EXEC_DDL_STATEMENT(PARSE_STRING VARCHAR2 IN)
pt: DBMS_UTILITY
fn: GET_DEPENDENCY
fs: GET_DEPENDENCY(TYPE VARCHAR2 IN,SCHEMA VARCHAR2 IN,NAME VARCHAR2 IN)
pt: DBMS_UTILITY
fn: GET_TZ_TRANSITIONS
fs: GET_TZ_TRANSITIONS(REGIONID NUMBER IN,TRANSITIONS RAW OUT)
pt: DBMS_UTILITY
fn: INVALIDATE
fs: INVALIDATE(P_OBJECT_ID NUMBER IN,P_PLSQL_OBJECT_SETTINGS VARCHAR2 IN,P_OPTION_FLAGS BINARY_INTEGER IN)
pt: DBMS_UTILITY
fn: NAME_RESOLVE
fs: NAME_RESOLVE(NAME VARCHAR2 IN,CONTEXT NUMBER IN,SCHEMA VARCHAR2 OUT,PART1 VARCHAR2 OUT,PART2 VARCHAR2 OUT,DBLINK VARCHAR2 OUT,PART1_TYPE NUMBER OUT,OBJECT_NUMBER NUMBER OUT)
pt: DBMS_UTILITY
fn: NAME_TOKENIZE
fs: NAME_TOKENIZE(NAME VARCHAR2 IN,A VARCHAR2 OUT,B VARCHAR2 OUT,C VARCHAR2 OUT,DBLINK VARCHAR2 OUT,NEXTPOS BINARY_INTEGER OUT)
pt: DBMS_UTILITY
fn: TABLE_TO_COMMA
fs: TABLE_TO_COMMA(TAB PL/SQL TABLE IN, VARCHAR2 IN,TABLEN BINARY_INTEGER RETURN,LIST VARCHAR2 RETURN,TAB PL/SQL TABLE IN, VARCHAR2 IN,TABLEN BINARY_INTEGER RETURN,LIST VARCHAR2 RETURN)
pt: DBMS_UTILITY
fn: VALIDATE
fs: VALIDATE(OBJECT_ID NUMBER IN,OWNER VARCHAR2 IN,OBJNAME VARCHAR2 IN,NAMESPACE NUMBER IN, PL/SQL BOOLEAN RESULT,HDL_COL PL/SQL TABLE IN,PERSONA PL/SQL RECORD IN, NUMBER IN,IDX_COL PL/SQL TABLE IN,PERSONA RAW IN, NUMBER IN,IDENTITY PL/SQL RECORD IN,MOWN_COL PL/SQL TABLE IN,DESCRIPTOR RAW IN, VARCHAR2 IN,MAS_COL PL/SQL TABLE IN, VARCHAR2 IN,LRSCN_COL PL/SQL TABLE IN, NUMBER IN,STAT_COL PL/SQL TABLE RETURN, NUMBER RETURN)
pt: DBMS_UTILITY
fn: ADD_WARNING_SETTING_CAT
fs: ADD_WARNING_SETTING_CAT(WARNING_CATEGORY VARCHAR2 IN,WARNING_VALUE VARCHAR2 IN,SCOPE VARCHAR2 IN)
pt: DBMS_WARNING
fn: ADD_WARNING_SETTING_NUM
fs: ADD_WARNING_SETTING_NUM(WARNING_NUMBER BINARY_INTEGER IN,WARNING_VALUE VARCHAR2 IN,SCOPE VARCHAR2 IN)
pt: DBMS_WARNING
fn: SET_WARNING_SETTING_STRING
fs: SET_WARNING_SETTING_STRING(VALUE VARCHAR2 IN,SCOPE VARCHAR2 IN)
pt: DBMS_WARNING
fn: CLEARBINDVALUES
fs: CLEARBINDVALUES(CTX NUMBER IN)
pt: DBMS_XMLGEN
fn: CLOSECONTEXT
fs: CLOSECONTEXT(CTX NUMBER IN)
pt: DBMS_XMLGEN
fn: REMOVEXSLTPARAM
fs: REMOVEXSLTPARAM(CTX NUMBER IN,NAME VARCHAR2 IN)
pt: DBMS_XMLGEN
fn: RESTARTQUERY
fs: RESTARTQUERY(CTX NUMBER IN)
pt: DBMS_XMLGEN
fn: SETBINDVALUE
fs: SETBINDVALUE(CTX NUMBER IN,BINDNAME VARCHAR2 IN,BINDVALUE VARCHAR2 IN)
pt: DBMS_XMLGEN
fn: SETCHECKINVALIDCHARS
fs: SETCHECKINVALIDCHARS(CTX NUMBER IN,CHK PL/SQL BOOLEAN IN)
pt: DBMS_XMLGEN
fn: SETCONVERTSPECIALCHARS
fs: SETCONVERTSPECIALCHARS(CTX NUMBER IN,REPLACE PL/SQL BOOLEAN IN)
pt: DBMS_XMLGEN
fn: SETINDENTATIONWIDTH
fs: SETINDENTATIONWIDTH(CTX NUMBER IN,WIDTH NUMBER IN)
pt: DBMS_XMLGEN
fn: SETMAXROWS
fs: SETMAXROWS(CTX NUMBER IN,MAXROWS NUMBER IN)
pt: DBMS_XMLGEN
fn: SETNULLHANDLING
fs: SETNULLHANDLING(CTX NUMBER IN,FLAG NUMBER IN)
pt: DBMS_XMLGEN
fn: SETPRETTYPRINTING
fs: SETPRETTYPRINTING(CTX NUMBER IN,PP PL/SQL BOOLEAN IN)
pt: DBMS_XMLGEN
fn: SETROWSETTAG
fs: SETROWSETTAG(CTX NUMBER IN,ROWSETTAGNAME VARCHAR2 IN)
pt: DBMS_XMLGEN
fn: SETROWTAG
fs: SETROWTAG(CTX NUMBER IN,ROWTAGNAME VARCHAR2 IN)
pt: DBMS_XMLGEN
fn: SETSKIPROWS
fs: SETSKIPROWS(CTX NUMBER IN,SKIPROWS NUMBER IN)
pt: DBMS_XMLGEN
fn: SETXSLT
fs: SETXSLT(CTX NUMBER IN,STYLESHEET CLOB IN,CTX NUMBER IN,STYLESHEET UNDEFINED IN,CTX NUMBER IN,URI VARCHAR2 IN)
pt: DBMS_XMLGEN
fn: SETXSLTPARAM
fs: SETXSLTPARAM(CTX NUMBER IN,NAME VARCHAR2 IN,VALUE VARCHAR2 IN)
pt: DBMS_XMLGEN
fn: USEITEMTAGSFORCOLL
fs: USEITEMTAGSFORCOLL(CTX NUMBER IN)
pt: DBMS_XMLGEN
fn: USENULLATTRIBUTEINDICATOR
fs: USENULLATTRIBUTEINDICATOR(CTX NUMBER IN,ATTRIND PL/SQL BOOLEAN IN)
pt: DBMS_XMLGEN
fn: CLEARKEYCOLUMNLIST
fs: CLEARKEYCOLUMNLIST(CTXHDL NUMBER IN)
pt: DBMS_XMLSTORE
fn: CLEARUPDATECOLUMNLIST
fs: CLEARUPDATECOLUMNLIST(CTXHDL NUMBER IN)
pt: DBMS_XMLSTORE
fn: CLOSECONTEXT
fs: CLOSECONTEXT(CTXHDL NUMBER IN)
pt: DBMS_XMLSTORE
fn: SETKEYCOLUMN
fs: SETKEYCOLUMN(CTXHDL NUMBER IN,COLNAME VARCHAR2 IN)
pt: DBMS_XMLSTORE
fn: SETROWTAG
fs: SETROWTAG(CTX NUMBER IN,ROWTAGNAME VARCHAR2 IN)
pt: DBMS_XMLSTORE
fn: SETUPDATECOLUMN
fs: SETUPDATECOLUMN(CTXHDL NUMBER IN,COLNAME VARCHAR2 IN)
pt: DBMS_XMLSTORE
fn: CLEANUP_3GL
fs: CLEANUP_3GL()
pt: DBMS_XRWMV
fn: XPLNMV_3GLA
fs: XPLNMV_3GLA(XMV_STMT VARCHAR2 IN,MSG_ARRAY VARRAY IN/OUT,TUNE_MVIEW BINARY_INTEGER IN)
pt: DBMS_XRWMV
fn: XPLNMV_3GLCA
fs: XPLNMV_3GLCA(XMV_STMT CLOB IN,MSG_ARRAY VARRAY IN/OUT,TUNE_MVIEW BINARY_INTEGER IN)
pt: DBMS_XRWMV
fn: XPLNMV_3GLCT
fs: XPLNMV_3GLCT(XMV_STMT CLOB IN,TBOWNER VARCHAR2 IN,TBNAME VARCHAR2 IN,STMTID VARCHAR2 IN)
pt: DBMS_XRWMV
fn: XPLNMV_3GLT
fs: XPLNMV_3GLT(XMV_STMT VARCHAR2 IN,TBOWNER VARCHAR2 IN,TBNAME VARCHAR2 IN)
pt: DBMS_XRWMV
fn: XPLNRW_3GLA
fs: XPLNRW_3GLA(SUM_NAME VARCHAR2 IN,USER_NAME VARCHAR2 IN,QUERY VARCHAR2 IN,MSG_ARRAY VARRAY IN/OUT)
pt: DBMS_XRWMV
fn: XPLNRW_3GLCA
fs: XPLNRW_3GLCA(SUM_NAME VARCHAR2 IN,USER_NAME VARCHAR2 IN,QUERY CLOB IN,MSG_ARRAY VARRAY IN/OUT)
pt: DBMS_XRWMV
fn: XPLNRW_3GLCT
fs: XPLNRW_3GLCT(SUM_NAME VARCHAR2 IN,USER_NAME VARCHAR2 IN,STATEMENT_ID VARCHAR2 IN,QUERY CLOB IN,MSG_TABLE VARCHAR2 IN)
pt: DBMS_XRWMV
fn: XPLNRW_3GLT
fs: XPLNRW_3GLT(SUM_NAME VARCHAR2 IN,USER_NAME VARCHAR2 IN,STATEMENT_ID VARCHAR2 IN,QUERY VARCHAR2 IN,MSG_TABLE VARCHAR2 IN)
pt: DBMS_XRWMV
fn: CHECK_SYS_PRIV
fs: CHECK_SYS_PRIV(PRIV BINARY_INTEGER IN)
pt: DBMS_ZHELP_IR
fn: ATTRIBUTE_USE_STATISTICS
fs: ATTRIBUTE_USE_STATISTICS(LIBUNIT_NODE BINARY_INTEGER IN,ATTRIBUTE_COUNT BINARY_INTEGER OUT,ATTRIBUTE_LIMIT BINARY_INTEGER OUT)
pt: DIUTIL
fn: GET_D
fs: GET_D(NAME VARCHAR2 IN,USR VARCHAR2 IN,DBNAME VARCHAR2 IN,DBOWNER VARCHAR2 IN,STATUS BINARY_INTEGER IN/OUT,NOD BINARY_INTEGER OUT,LIBUNIT_TYPE NUMBER IN,LOAD_SOURCE NUMBER IN)
pt: DIUTIL
fn: GET_DIANA
fs: GET_DIANA(NAME VARCHAR2 IN,USR VARCHAR2 IN,DBNAME VARCHAR2 IN,DBOWNER VARCHAR2 IN,STATUS BINARY_INTEGER IN/OUT,NOD BINARY_INTEGER IN/OUT,LIBUNIT_TYPE NUMBER IN,LOAD_SOURCE NUMBER IN)
pt: DIUTIL
fn: NODE_USE_STATISTICS
fs: NODE_USE_STATISTICS(LIBUNIT_NODE BINARY_INTEGER IN,NODE_COUNT BINARY_INTEGER OUT,NODE_LIMIT BINARY_INTEGER OUT)
pt: DIUTIL
fn: PSTUB
fs: PSTUB(PNAME VARCHAR2 IN,SUBNAME VARCHAR2 IN,UNAME VARCHAR2 IN,DABANAME VARCHAR2 IN,DBOWNER VARCHAR2 IN,STATUS BINARY_INTEGER IN/OUT,FLAGS VARCHAR2 IN,STUBTYPE VARCHAR2 IN/OUT)
pt: DIUTIL
fn: SUBPTXT
fs: SUBPTXT(NAME VARCHAR2 IN,SUBNAME VARCHAR2 IN,USR VARCHAR2 IN,DBNAME VARCHAR2 IN,DBOWNER VARCHAR2 IN,TXT VARCHAR2 IN/OUT,STATUS BINARY_INTEGER IN/OUT)
pt: DIUTIL
fn: ADDDEFAULTHTMLHDR
fs: ADDDEFAULTHTMLHDR(BADDHTMLHDR PL/SQL BOOLEAN IN)
pt: HTP
fn: ADDRESS
fs: ADDRESS(CVALUE VARCHAR2 IN,CNOWRAP VARCHAR2 IN,CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: ANCHOR
fs: ANCHOR(CURL VARCHAR2 IN,CTEXT VARCHAR2 IN,CNAME VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: ANCHOR2
fs: ANCHOR2(CURL VARCHAR2 IN,CTEXT VARCHAR2 IN,CNAME VARCHAR2 IN,CTARGET VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: APPLETCLOSE
fs: APPLETCLOSE()
pt: HTP
fn: APPLETOPEN
fs: APPLETOPEN(CCODE VARCHAR2 IN,CWIDTH NUMBER IN,CHEIGHT NUMBER IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: AREA
fs: AREA(CCOORDS VARCHAR2 IN,CSHAPE VARCHAR2 IN,CHREF VARCHAR2 IN,CNOHREF VARCHAR2 IN,CTARGET VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: BASE
fs: BASE(CTARGET VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: BASEFONT
fs: BASEFONT(NSIZE NUMBER IN)
pt: HTP
fn: BGSOUND
fs: BGSOUND(CSRC VARCHAR2 IN,CLOOP VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: BIG
fs: BIG(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: BLOCKQUOTECLOSE
fs: BLOCKQUOTECLOSE()
pt: HTP
fn: BLOCKQUOTEOPEN
fs: BLOCKQUOTEOPEN(CNOWRAP VARCHAR2 IN,CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: BODYCLOSE
fs: BODYCLOSE()
pt: HTP
fn: BODYOPEN
fs: BODYOPEN(CBACKGROUND VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: BOLD
fs: BOLD(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: BR
fs: BR(CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: CENTER
fs: CENTER(CTEXT VARCHAR2 IN)
pt: HTP
fn: CENTERCLOSE
fs: CENTERCLOSE()
pt: HTP
fn: CENTEROPEN
fs: CENTEROPEN()
pt: HTP
fn: CITE
fs: CITE(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: CODE
fs: CODE(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: COMMENT
fs: COMMENT(CTEXT VARCHAR2 IN)
pt: HTP
fn: DFN
fs: DFN(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: DIRLISTCLOSE
fs: DIRLISTCLOSE()
pt: HTP
fn: DIRLISTOPEN
fs: DIRLISTOPEN()
pt: HTP
fn: DIV
fs: DIV(CALIGN VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: DLISTCLOSE
fs: DLISTCLOSE()
pt: HTP
fn: DLISTDEF
fs: DLISTDEF(CTEXT VARCHAR2 IN,CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: DLISTOPEN
fs: DLISTOPEN(CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: DLISTTERM
fs: DLISTTERM(CTEXT VARCHAR2 IN,CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: DOWNLOAD_FILE
fs: DOWNLOAD_FILE(SFILENAME VARCHAR2 IN,BCOMPRESS PL/SQL BOOLEAN IN)
pt: HTP
fn: EM
fs: EM(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: EMPHASIS
fs: EMPHASIS(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: ESCAPE_SC
fs: ESCAPE_SC(CTEXT VARCHAR2 IN)
pt: HTP
fn: FLUSH
fs: FLUSH()
pt: HTP
fn: FLUSH_CHARSET_CONVERT
fs: FLUSH_CHARSET_CONVERT(CHARSET VARCHAR2 IN)
pt: HTP
fn: FONTCLOSE
fs: FONTCLOSE()
pt: HTP
fn: FONTOPEN
fs: FONTOPEN(CCOLOR VARCHAR2 IN,CFACE VARCHAR2 IN,CSIZE VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMCHECKBOX
fs: FORMCHECKBOX(CNAME VARCHAR2 IN,CVALUE VARCHAR2 IN,CCHECKED VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMCLOSE
fs: FORMCLOSE()
pt: HTP
fn: FORMFILE
fs: FORMFILE(CNAME VARCHAR2 IN,CACCEPT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMHIDDEN
fs: FORMHIDDEN(CNAME VARCHAR2 IN,CVALUE VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMIMAGE
fs: FORMIMAGE(CNAME VARCHAR2 IN,CSRC VARCHAR2 IN,CALIGN VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMOPEN
fs: FORMOPEN(CURL VARCHAR2 IN,CMETHOD VARCHAR2 IN,CTARGET VARCHAR2 IN,CENCTYPE VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMPASSWORD
fs: FORMPASSWORD(CNAME VARCHAR2 IN,CSIZE VARCHAR2 IN,CMAXLENGTH VARCHAR2 IN,CVALUE VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMRADIO
fs: FORMRADIO(CNAME VARCHAR2 IN,CVALUE VARCHAR2 IN,CCHECKED VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMRESET
fs: FORMRESET(CVALUE VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMSELECTCLOSE
fs: FORMSELECTCLOSE()
pt: HTP
fn: FORMSELECTOPEN
fs: FORMSELECTOPEN(CNAME VARCHAR2 IN,CPROMPT VARCHAR2 IN,NSIZE NUMBER IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMSELECTOPTION
fs: FORMSELECTOPTION(CVALUE VARCHAR2 IN,CSELECTED VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMSUBMIT
fs: FORMSUBMIT(CNAME VARCHAR2 IN,CVALUE VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMTEXT
fs: FORMTEXT(CNAME VARCHAR2 IN,CSIZE VARCHAR2 IN,CMAXLENGTH VARCHAR2 IN,CVALUE VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMTEXTAREA
fs: FORMTEXTAREA(CNAME VARCHAR2 IN,NROWS NUMBER IN,NCOLUMNS NUMBER IN,CALIGN VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMTEXTAREA2
fs: FORMTEXTAREA2(CNAME VARCHAR2 IN,NROWS NUMBER IN,NCOLUMNS NUMBER IN,CALIGN VARCHAR2 IN,CWRAP VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMTEXTAREACLOSE
fs: FORMTEXTAREACLOSE()
pt: HTP
fn: FORMTEXTAREAOPEN
fs: FORMTEXTAREAOPEN(CNAME VARCHAR2 IN,NROWS NUMBER IN,NCOLUMNS NUMBER IN,CALIGN VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FORMTEXTAREAOPEN2
fs: FORMTEXTAREAOPEN2(CNAME VARCHAR2 IN,NROWS NUMBER IN,NCOLUMNS NUMBER IN,CALIGN VARCHAR2 IN,CWRAP VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FRAME
fs: FRAME(CSRC VARCHAR2 IN,CNAME VARCHAR2 IN,CMARGINWIDTH VARCHAR2 IN,CMARGINHEIGHT VARCHAR2 IN,CSCROLLING VARCHAR2 IN,CNORESIZE VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: FRAMESETCLOSE
fs: FRAMESETCLOSE()
pt: HTP
fn: FRAMESETOPEN
fs: FRAMESETOPEN(CROWS VARCHAR2 IN,CCOLS VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: GET_DOWNLOAD_FILES_LIST
fs: GET_DOWNLOAD_FILES_LIST(SFILESLIST VARCHAR2 OUT,NCOMPRESS BINARY_INTEGER OUT)
pt: HTP
fn: GET_PAGE
fs: GET_PAGE(THEPAGE PL/SQL TABLE OUT,IROWS NUMBER IN/OUT)
pt: HTP
fn: GET_PAGE_CHARSET_CONVERT
fs: GET_PAGE_CHARSET_CONVERT(THEPAGE PL/SQL TABLE OUT,IROWS NUMBER IN/OUT,CHARSET VARCHAR2 IN)
pt: HTP
fn: GET_PAGE_RAW
fs: GET_PAGE_RAW(THEPAGE PL/SQL TABLE OUT,IROWS NUMBER IN/OUT)
pt: HTP
fn: HEADCLOSE
fs: HEADCLOSE()
pt: HTP
fn: HEADER
fs: HEADER(NSIZE NUMBER IN,CHEADER VARCHAR2 IN,CALIGN VARCHAR2 IN,CNOWRAP VARCHAR2 IN,CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: HEADOPEN
fs: HEADOPEN()
pt: HTP
fn: HR
fs: HR(CCLEAR VARCHAR2 IN,CSRC VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: HTITLE
fs: HTITLE(CTITLE VARCHAR2 IN,NSIZE NUMBER IN,CALIGN VARCHAR2 IN,CNOWRAP VARCHAR2 IN,CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: HTMLCLOSE
fs: HTMLCLOSE()
pt: HTP
fn: HTMLOPEN
fs: HTMLOPEN()
pt: HTP
fn: IMG
fs: IMG(CURL VARCHAR2 IN,CALIGN VARCHAR2 IN,CALT VARCHAR2 IN,CISMAP VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: IMG2
fs: IMG2(CURL VARCHAR2 IN,CALIGN VARCHAR2 IN,CALT VARCHAR2 IN,CISMAP VARCHAR2 IN,CUSEMAP VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: INIT
fs: INIT(P_HTBUF PL/SQL TABLE IN/OUT,JOB_NAME VARCHAR2 IN, RAW RESULT,DEBUGID VARCHAR2 IN,JOB_OWNER VARCHAR2 IN,HOSTNAME VARCHAR2 IN, VARCHAR2 IN/OUT,CREATE_PIPES PL/SQL BOOLEAN IN,PORTNUM BINARY_INTEGER IN,P_ROWS_IN NUMBER IN/OUT,IS_MCP PL/SQL BOOLEAN IN,DEBUG_ROLE VARCHAR2 IN,RESTART PL/SQL BOOLEAN IN,DEBUG_ROLE_PWD VARCHAR2 IN)
pt: HTP
fn: ISINDEX
fs: ISINDEX(CPROMPT VARCHAR2 IN,CURL VARCHAR2 IN)
pt: HTP
fn: ITALIC
fs: ITALIC(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: KBD
fs: KBD(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: KEYBOARD
fs: KEYBOARD(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: LINE
fs: LINE(CCLEAR VARCHAR2 IN,CSRC VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: LINKREL
fs: LINKREL(CREL VARCHAR2 IN,CURL VARCHAR2 IN,CTITLE VARCHAR2 IN)
pt: HTP
fn: LINKREV
fs: LINKREV(CREV VARCHAR2 IN,CURL VARCHAR2 IN,CTITLE VARCHAR2 IN)
pt: HTP
fn: LISTHEADER
fs: LISTHEADER(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: LISTINGCLOSE
fs: LISTINGCLOSE()
pt: HTP
fn: LISTINGOPEN
fs: LISTINGOPEN()
pt: HTP
fn: LISTITEM
fs: LISTITEM(CTEXT VARCHAR2 IN,CCLEAR VARCHAR2 IN,CDINGBAT VARCHAR2 IN,CSRC VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: MAILTO
fs: MAILTO(CADDRESS VARCHAR2 IN,CTEXT VARCHAR2 IN,CNAME VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: MAPCLOSE
fs: MAPCLOSE()
pt: HTP
fn: MAPOPEN
fs: MAPOPEN(CNAME VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: MENULISTCLOSE
fs: MENULISTCLOSE()
pt: HTP
fn: MENULISTOPEN
fs: MENULISTOPEN()
pt: HTP
fn: META
fs: META(CHTTP_EQUIV VARCHAR2 IN,CNAME VARCHAR2 IN,CCONTENT VARCHAR2 IN)
pt: HTP
fn: NEXTID
fs: NEXTID(CIDENTIFIER VARCHAR2 IN)
pt: HTP
fn: NL
fs: NL(CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: NOBR
fs: NOBR(CTEXT VARCHAR2 IN)
pt: HTP
fn: NOFRAMESCLOSE
fs: NOFRAMESCLOSE()
pt: HTP
fn: NOFRAMESOPEN
fs: NOFRAMESOPEN()
pt: HTP
fn: OLISTCLOSE
fs: OLISTCLOSE()
pt: HTP
fn: OLISTOPEN
fs: OLISTOPEN(CCLEAR VARCHAR2 IN,CWRAP VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: P
fs: P(CBUF VARCHAR2 IN,DBUF DATE IN,NBUF NUMBER IN)
pt: HTP
fn: PARA
fs: PARA()
pt: HTP
fn: PARAGRAPH
fs: PARAGRAPH(CALIGN VARCHAR2 IN,CNOWRAP VARCHAR2 IN,CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: PARAM
fs: PARAM(CNAME VARCHAR2 IN,CVALUE VARCHAR2 IN)
pt: HTP
fn: PLAINTEXT
fs: PLAINTEXT(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: PRECLOSE
fs: PRECLOSE()
pt: HTP
fn: PREOPEN
fs: PREOPEN(CCLEAR VARCHAR2 IN,CWIDTH VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: PRINT
fs: PRINT(CBUF VARCHAR2 IN,DBUF DATE IN,NBUF NUMBER IN)
pt: HTP
fn: PRINTS
fs: PRINTS(CTEXT VARCHAR2 IN)
pt: HTP
fn: PRINT_HEADER
fs: PRINT_HEADER(CBUF VARCHAR2 IN,NLINE NUMBER IN)
pt: HTP
fn: PRN
fs: PRN(CBUF VARCHAR2 IN,DBUF DATE IN,NBUF NUMBER IN)
pt: HTP
fn: PS
fs: PS(CTEXT VARCHAR2 IN)
pt: HTP
fn: PUTRAW
fs: PUTRAW(BBUF RAW IN,BUFLEN BINARY_INTEGER IN)
pt: HTP
fn: S
fs: S(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: SAMPLE
fs: SAMPLE(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: SCRIPT
fs: SCRIPT(CSCRIPT VARCHAR2 IN,CLANGUAGE VARCHAR2 IN)
pt: HTP
fn: SETHTTPCHARSET
fs: SETHTTPCHARSET(IANA_CHARSET VARCHAR2 IN,ORA_CHARSET VARCHAR2 IN)
pt: HTP
fn: SET_TRANSFER_MODE
fs: SET_TRANSFER_MODE(TMODE VARCHAR2 IN)
pt: HTP
fn: SHOWPAGE
fs: SHOWPAGE()
pt: HTP
fn: SMALL
fs: SMALL(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: STRIKE
fs: STRIKE(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: STRONG
fs: STRONG(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: STYLE
fs: STYLE(CSTYLE VARCHAR2 IN)
pt: HTP
fn: SUB
fs: SUB(CTEXT VARCHAR2 IN,CALIGN VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: SUP
fs: SUP(CTEXT VARCHAR2 IN,CALIGN VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: TABLECAPTION
fs: TABLECAPTION(CCAPTION VARCHAR2 IN,CALIGN VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: TABLECLOSE
fs: TABLECLOSE(NTABLE_TYPE NUMBER IN,NTABLE_WIDTH NUMBER IN,NTABLE_TYPE NUMBER IN)
pt: HTP
fn: TABLEDATA
fs: TABLEDATA(CVALUE VARCHAR2 IN,CALIGN VARCHAR2 IN,CDP VARCHAR2 IN,CNOWRAP VARCHAR2 IN,CROWSPAN VARCHAR2 IN,CCOLSPAN VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: TABLEHEADER
fs: TABLEHEADER(CVALUE VARCHAR2 IN,CALIGN VARCHAR2 IN,CDP VARCHAR2 IN,CNOWRAP VARCHAR2 IN,CROWSPAN VARCHAR2 IN,CCOLSPAN VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: TABLEOPEN
fs: TABLEOPEN(CBORDER VARCHAR2 IN,CALIGN VARCHAR2 IN,CNOWRAP VARCHAR2 IN,CCLEAR VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: TABLEROWCLOSE
fs: TABLEROWCLOSE(CROWSTRING VARCHAR2 IN/OUT,NTABLE_TYPE NUMBER IN)
pt: HTP
fn: TABLEROWOPEN
fs: TABLEROWOPEN(CALIGN VARCHAR2 IN,CVALIGN VARCHAR2 IN,CDP VARCHAR2 IN,CNOWRAP VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: TELETYPE
fs: TELETYPE(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: TITLE
fs: TITLE(CTITLE VARCHAR2 IN)
pt: HTP
fn: ULISTCLOSE
fs: ULISTCLOSE()
pt: HTP
fn: ULISTOPEN
fs: ULISTOPEN(CCLEAR VARCHAR2 IN,CWRAP VARCHAR2 IN,CDINGBAT VARCHAR2 IN,CSRC VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: UNDERLINE
fs: UNDERLINE(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: VARIABLE
fs: VARIABLE(CTEXT VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: HTP
fn: WBR
fs: WBR()
pt: HTP
fn: ADD_DEVICE
fs: ADD_DEVICE(DEVICENAME VARCHAR2 IN,VOLUMESIZE NUMBER IN)
pt: KUPF$FILE
fn: ADD_FILE
fs: ADD_FILE(FILENAME VARCHAR2 IN,DIRECTORY VARCHAR2 IN,FILESIZE NUMBER IN,IS_DBA PL/SQL BOOLEAN IN,READ_ONLY PL/SQL BOOLEAN IN)
pt: KUPF$FILE
fn: ADD_TDX_ROW_CB
fs: ADD_TDX_ROW_CB(JOBNAME VARCHAR2 IN,JOBOWNER VARCHAR2 IN,PROCORDER NUMBER IN,EXTVALUE NUMBER IN,FILENUM NUMBER IN,FILEPOS NUMBER IN)
pt: KUPF$FILE
fn: CHECK_ACCESS
fs: CHECK_ACCESS(IN_DIRECTORY VARCHAR2 IN,IN_FILENAME VARCHAR2 IN,OUT_DIRECTORY VARCHAR2 OUT,IS_DBA PL/SQL BOOLEAN IN,READ_ONLY PL/SQL BOOLEAN IN)
pt: KUPF$FILE
fn: CLOSE_CONTEXT
fs: CLOSE_CONTEXT(CTX NUMBER IN)
pt: KUPF$FILE
fn: DELETE_UNUSED_FILE_REFS
fs: DELETE_UNUSED_FILE_REFS()
pt: KUPF$FILE
fn: FILE_REQUEST
fs: FILE_REQUEST(WRKS_WAIT_CNT NUMBER OUT,MAX_SPACE_REQ NUMBER OUT,REQUEST_MSG OBJECT IN)
pt: KUPF$FILE
fn: FLUSH_LOB
fs: FLUSH_LOB(CTX NUMBER IN)
pt: KUPF$FILE
fn: GET_BLKBUF_SIZES
fs: GET_BLKBUF_SIZES(BLOCK_SIZE NUMBER OUT,META_BUF_SIZE NUMBER OUT,DATA_BUF_SIZE NUMBER OUT)
pt: KUPF$FILE
fn: GET_DUMPFILE_INFO
fs: GET_DUMPFILE_INFO(FILENAME VARCHAR2 IN,DIRECTORY VARCHAR2 IN,INFO_TABLE TABLE OUT,FILETYPE NUMBER OUT)
pt: KUPF$FILE
fn: GET_FILE_ATTRS
fs: GET_FILE_ATTRS(FILENUMBER NUMBER IN,FILESPEC VARCHAR2 OUT,BLOCKSIZE NUMBER OUT,VERSION NUMBER OUT)
pt: KUPF$FILE
fn: INIT
fs: INIT(JOB_NAME VARCHAR2 IN,JOB_OWNER VARCHAR2 IN,IS_MCP PL/SQL BOOLEAN IN,RESTART PL/SQL BOOLEAN IN)
pt: KUPF$FILE
fn: INIT_CB
fs: INIT_CB(JOBNAME VARCHAR2 IN,JOBOWNER VARCHAR2 IN,HEADERSIZE NUMBER IN,WID NUMBER IN,OPERATION NUMBER OUT,BLOCKSIZE NUMBER OUT,DATABUFSIZE NUMBER OUT,METABUFSIZE NUMBER OUT,POIMPFILE NUMBER OUT,POIMPMSTTBL NUMBER OUT,MSTTBLOBJNUM NUMBER OUT,DEBUGFLAG NUMBER OUT,DEBUGTMSTAMP NUMBER OUT,DEBUGIDENT VARCHAR2 OUT,DEBUGSEQIO NUMBER OUT,INSTNAME VARCHAR2 OUT,GUID RAW OUT,MDCMP NUMBER OUT,TDCMP NUMBER OUT,JOBVERSION VARCHAR2 OUT)
pt: KUPF$FILE
fn: INIT_TDX_STATS
fs: INIT_TDX_STATS(JOBNAME VARCHAR2 IN,JOBOWNER VARCHAR2 IN)
pt: KUPF$FILE
fn: JOB_MODES
fs: JOB_MODES(JOB_NAME VARCHAR2 IN,JOB_OWNER VARCHAR2 IN,EXPORT_MODE NUMBER OUT,IMPORT_MODE NUMBER OUT)
pt: KUPF$FILE
fn: LOG_MESSAGES
fs: LOG_MESSAGES(MSGTYPE NUMBER IN,MSGLINE1 VARCHAR2 IN,MSGLINE2 VARCHAR2 IN,MSGLINE3 VARCHAR2 IN,MSGLINE4 VARCHAR2 IN,MSGLINE5 VARCHAR2 IN,MSGLINE6 VARCHAR2 IN,MSGLINE7 VARCHAR2 IN,MSGLINE8 VARCHAR2 IN,MSGLINE9 VARCHAR2 IN,MSGLINE10 VARCHAR2 IN)
pt: KUPF$FILE
fn: READ_LOB
fs: READ_LOB(CTX NUMBER IN,FILE_NUMBER NUMBER IN,POSITION NUMBER IN,LENGTH NUMBER IN,ALLOCATION NUMBER IN,XML_LOB CLOB IN)
pt: KUPF$FILE
fn: RELEASE_FILE
fs: RELEASE_FILE(WID NUMBER IN,SID NUMBER IN,INFLAGS NUMBER IN,FILEPOS NUMBER IN,ALLOCSIZE NUMBER IN,FILENUM NUMBER IN)
pt: KUPF$FILE
fn: RELEASE_FILES
fs: RELEASE_FILES()
pt: KUPF$FILE
fn: REQUEST_FILE
fs: REQUEST_FILE(WID NUMBER IN,SID NUMBER IN,INFLAGS NUMBER IN,MINSIZE NUMBER IN,BLOCKSIZE NUMBER OUT,OUTFLAGS NUMBER OUT,MAXFILESIZE NUMBER OUT,FILENAME VARCHAR2 OUT,FILENUM NUMBER IN/OUT,FILEPOS NUMBER IN/OUT,ALLOCSIZE NUMBER IN/OUT)
pt: KUPF$FILE
fn: RESET_EOF
fs: RESET_EOF()
pt: KUPF$FILE
fn: SET_DEBUG
fs: SET_DEBUG(DO_DEBUG NUMBER IN,IP_ADDR VARCHAR2 IN)
pt: KUPF$FILE
fn: TERM
fs: TERM(DEFINING_STATE PL/SQL BOOLEAN IN,DELETE_FILES PL/SQL BOOLEAN IN)
pt: KUPF$FILE
fn: TRACE
fs: TRACE(IDENT VARCHAR2 IN,STR VARCHAR2 IN)
pt: KUPF$FILE
fn: UPD_FILE_COMP_BYTES
fs: UPD_FILE_COMP_BYTES(JOBNAME VARCHAR2 IN,JOBOWNER VARCHAR2 IN,FILENUMBER NUMBER IN,ALLOCSIZE NUMBER IN)
pt: KUPF$FILE
fn: UPD_TDX_FILEINFO_CB
fs: UPD_TDX_FILEINFO_CB(JOBNAME VARCHAR2 IN,JOBOWNER VARCHAR2 IN,PROCORDER NUMBER IN,EXTVALUE NUMBER IN,FILELEN NUMBER IN,FILEALLOC NUMBER IN)
pt: KUPF$FILE
fn: UPD_TDX_STATS_CB
fs: UPD_TDX_STATS_CB(JOBNAME VARCHAR2 IN,JOBOWNER VARCHAR2 IN,PROCORDER NUMBER IN,EXTVALUE NUMBER IN,ROWSCOMP NUMBER IN,ERRORCNT NUMBER IN,GRANULECNT NUMBER IN,ELAPSEDTIME NUMBER IN)
pt: KUPF$FILE
fn: VERIFY_DUMPFILE_SET
fs: VERIFY_DUMPFILE_SET(DEVICE_IDENT_MESSAGE OBJECT IN,IS_DUMPSET_COMPLETE PL/SQL BOOLEAN OUT,CURRENT_JOB_MODE NUMBER OUT,RESPONSE_WAIT_COUNT NUMBER OUT,SEQ_FILE_MESSAGE OBJECT OUT)
pt: KUPF$FILE
fn: WRITE_LOB
fs: WRITE_LOB(CTX NUMBER IN,LOB CLOB IN,FILE_NUMBER NUMBER OUT,POSITION NUMBER OUT,LENGTH NUMBER OUT,ALLOCATION NUMBER OUT,TRANS_TIME NUMBER OUT)
pt: KUPF$FILE
fn: CLOSE_JOB
fs: CLOSE_JOB()
pt: KUPM$MCP
fn: FILE_TO_WORKER
fs: FILE_TO_WORKER(MESSAGE OBJECT IN)
pt: KUPM$MCP
fn: MAIN
fs: MAIN(JOB_NAME VARCHAR2 IN,JOB_OWNER VARCHAR2 IN,CONTROL_QUEUE VARCHAR2 IN,STATUS_QUEUE VARCHAR2 IN,RESTART_JOB BINARY_INTEGER IN)
pt: KUPM$MCP
fn: SET_DEBUG
fs: SET_DEBUG(TRACE_FLAGS NUMBER IN,IP_ADDR VARCHAR2 IN)
pt: KUPM$MCP
fn: MAIN
fs: MAIN(MASTER_NAME VARCHAR2 IN,MASTER_OWNER VARCHAR2 IN)
pt: KUPW$WORKER
fn: SET_DEBUG
fs: SET_DEBUG(DO_DEBUG NUMBER IN,IP_ADDR VARCHAR2 IN)
pt: KUPW$WORKER
fn: STREAM_MD_REMAP_SCHEMA
fs: STREAM_MD_REMAP_SCHEMA(STR_MD_CLOB CLOB IN,REMAPPED_CLOB CLOB IN/OUT)
pt: KUPW$WORKER
fn: CHANGE_JOIN_POS
fs: CHANGE_JOIN_POS(NAME VARCHAR2 IN,HINTNO NUMBER IN,NEWPOS NUMBER IN)
pt: OUTLN_EDIT_PKG
fn: CREATE_EDIT_TABLES
fs: CREATE_EDIT_TABLES()
pt: OUTLN_EDIT_PKG
fn: DROP_EDIT_TABLES
fs: DROP_EDIT_TABLES()
pt: OUTLN_EDIT_PKG
fn: GENERATE_SIGNATURE
fs: GENERATE_SIGNATURE(SQLTXT VARCHAR2 IN,SIGNATURE RAW OUT)
pt: OUTLN_EDIT_PKG
fn: REFRESH_PRIVATE_OUTLINE
fs: REFRESH_PRIVATE_OUTLINE(NAME VARCHAR2 IN)
pt: OUTLN_EDIT_PKG
fn: GET_PAGE
fs: GET_PAGE(THEPAGE PL/SQL TABLE OUT,IROWS NUMBER IN/OUT)
pt: OWA
fn: GET_PAGE_CHARSET_CONVERT
fs: GET_PAGE_CHARSET_CONVERT(THEPAGE PL/SQL TABLE OUT,IROWS NUMBER IN/OUT,CHARSET VARCHAR2 IN)
pt: OWA
fn: GET_PAGE_RAW
fs: GET_PAGE_RAW(THEPAGE PL/SQL TABLE OUT,IROWS NUMBER IN/OUT)
pt: OWA
fn: INIT_CGI_ENV
fs: INIT_CGI_ENV(PARAM_VAL PL/SQL TABLE IN, VARCHAR2 IN,NUM_PARAMS NUMBER IN,PARAM_NAME PL/SQL TABLE IN, VARCHAR2 IN,PARAM_VAL PL/SQL TABLE IN, VARCHAR2 IN)
pt: OWA
fn: SET_PASSWORD
fs: SET_PASSWORD(PWD VARCHAR2 IN)
pt: OWA
fn: SET_TRANSFER_MODE
fs: SET_TRANSFER_MODE(TMODE VARCHAR2 IN)
pt: OWA
fn: SET_USER_ID
fs: SET_USER_ID(USR VARCHAR2 IN)
pt: OWA
fn: DISABLE
fs: DISABLE(NAME VARCHAR2 IN,FORCE PL/SQL BOOLEAN IN)
pt: OWA_CACHE
fn: INIT
fs: INIT(P_HTBUF PL/SQL TABLE IN/OUT,P_ROWS_IN NUMBER IN/OUT)
pt: OWA_CACHE
fn: SET_CACHE
fs: SET_CACHE(P_ETAG VARCHAR2 IN,P_LEVEL VARCHAR2 IN)
pt: OWA_CACHE
fn: SET_EXPIRES
fs: SET_EXPIRES(P_EXPIRES NUMBER IN,P_LEVEL VARCHAR2 IN)
pt: OWA_CACHE
fn: SET_NOT_MODIFIED
fs: SET_NOT_MODIFIED()
pt: OWA_CACHE
fn: SET_SURROGATE_CONTROL
fs: SET_SURROGATE_CONTROL(P_VALUE VARCHAR2 IN)
pt: OWA_CACHE
fn: GET_ALL
fs: GET_ALL(NAMES PL/SQL TABLE OUT,VALS PL/SQL TABLE OUT,NUM_VALS NUMBER OUT)
pt: OWA_COOKIE
fn: INIT
fs: INIT(P_HTBUF PL/SQL TABLE IN/OUT,JOB_NAME VARCHAR2 IN, RAW RESULT,DEBUGID VARCHAR2 IN,JOB_OWNER VARCHAR2 IN,HOSTNAME VARCHAR2 IN, VARCHAR2 IN/OUT,CREATE_PIPES PL/SQL BOOLEAN IN,PORTNUM BINARY_INTEGER IN,P_ROWS_IN NUMBER IN/OUT,IS_MCP PL/SQL BOOLEAN IN,DEBUG_ROLE VARCHAR2 IN,RESTART PL/SQL BOOLEAN IN,DEBUG_ROLE_PWD VARCHAR2 IN)
pt: OWA_COOKIE
fn: REMOVE
fs: REMOVE(NAME VARCHAR2 IN,VAL VARCHAR2 IN,PATH VARCHAR2 IN)
pt: OWA_COOKIE
fn: SEND
fs: SEND(NAME VARCHAR2 IN,VALUE VARCHAR2 IN,EXPIRES DATE IN,PATH VARCHAR2 IN,DOMAIN VARCHAR2 IN,SECURE VARCHAR2 IN)
pt: OWA_COOKIE
fn: STORE_VALUES
fs: STORE_VALUES(P_OWNER VARCHAR2 IN,P_TNAME VARCHAR2 IN,P_ROWID ROWID IN)
pt: OWA_OPT_LOCK
fn: GETPAT
fs: GETPAT(ARG VARCHAR2 IN,PAT PL/SQL TABLE IN/OUT)
pt: OWA_PATTERN
fn: SET_AUTHORIZATION
fs: SET_AUTHORIZATION(SCHEME NUMBER IN)
pt: OWA_SEC
fn: SET_PROTECTION_REALM
fs: SET_PROTECTION_REALM(REALM VARCHAR2 IN)
pt: OWA_SEC
fn: ADD2MULTI
fs: ADD2MULTI(STREAM VARCHAR2 IN,MLINE PL/SQL RECORD IN/OUT,CONTINUE PL/SQL BOOLEAN IN)
pt: OWA_TEXT
fn: PRINT_MULTI
fs: PRINT_MULTI(MLINE PL/SQL RECORD IN)
pt: OWA_TEXT
fn: PRINT_ROW_LIST
fs: PRINT_ROW_LIST(RLIST PL/SQL RECORD IN)
pt: OWA_TEXT
fn: STREAM2MULTI
fs: STREAM2MULTI(STREAM VARCHAR2 IN,MLINE PL/SQL RECORD OUT)
pt: OWA_TEXT
fn: CALENDARPRINT
fs: CALENDARPRINT(P_QUERY VARCHAR2 IN,P_MF_ONLY VARCHAR2 IN,P_CURSOR NUMBER IN,P_MF_ONLY VARCHAR2 IN)
pt: OWA_UTIL
fn: CELLSPRINT
fs: CELLSPRINT(P_COLCNT NUMBER IN,P_RESULTTBL PL/SQL TABLE IN, VARCHAR2 IN,P_FORMAT_NUMBERS VARCHAR2 IN,P_THEQUERY VARCHAR2 IN,P_MAX_ROWS NUMBER IN,P_FORMAT_NUMBERS VARCHAR2 IN,P_THECURSOR NUMBER IN,P_MAX_ROWS NUMBER IN,P_FORMAT_NUMBERS VARCHAR2 IN,P_THEQUERY VARCHAR2 IN,P_MAX_ROWS NUMBER IN,P_FORMAT_NUMBERS VARCHAR2 IN,P_SKIP_REC NUMBER IN,P_MORE_DATA PL/SQL BOOLEAN RETURN,P_THECURSOR NUMBER IN,P_MAX_ROWS NUMBER IN,P_FORMAT_NUMBERS VARCHAR2 IN,P_SKIP_REC NUMBER IN,P_MORE_DATA PL/SQL BOOLEAN RETURN,P_THEQUERY VARCHAR2 IN,P_MAX_ROWS NUMBER IN,P_FORMAT_NUMBERS VARCHAR2 IN,P_RECCNT NUMBER RETURN,P_THECURSOR NUMBER IN,P_MAX_ROWS NUMBER IN,P_FORMAT_NUMBERS VARCHAR2 IN,P_RECCNT NUMBER RETURN,P_THEQUERY VARCHAR2 IN,P_MAX_ROWS NUMBER IN,P_FORMAT_NUMBERS VARCHAR2 IN,P_SKIP_REC NUMBER IN,P_MORE_DATA PL/SQL BOOLEAN RETURN,P_RECCNT NUMBER RETURN,P_THECURSOR NUMBER IN,P_MAX_ROWS NUMBER IN,P_FORMAT_NUMBERS VARCHAR2 IN,P_SKIP_REC NUMBER IN,P_MORE_DATA PL/SQL BOOLEAN RETURN,P_RECCNT NUMBER RETURN)
pt: OWA_UTIL
fn: CHOOSE_DATE
fs: CHOOSE_DATE(P_NAME VARCHAR2 IN,P_DATE DATE IN)
pt: OWA_UTIL
fn: COMMA_TO_IDENT_ARR
fs: COMMA_TO_IDENT_ARR(LIST VARCHAR2 IN,ARR PL/SQL TABLE RETURN, VARCHAR2 RETURN,LENARR PL/SQL TABLE RETURN, NUMBER RETURN,ARRLEN NUMBER RETURN,LIST VARCHAR2 IN,ARR PL/SQL TABLE RETURN, NVARCHAR2 RETURN,LENARR PL/SQL TABLE RETURN, NUMBER RETURN,ARRLEN NUMBER RETURN)
pt: OWA_UTIL
fn: DESCRIBE_COLS
fs: DESCRIBE_COLS(CTABLE VARCHAR2 IN,CCOLUMNS VARCHAR2 IN,COL_NAMES PL/SQL TABLE OUT,COL_DTYPES PL/SQL TABLE OUT,NNUM_COLS NUMBER OUT)
pt: OWA_UTIL
fn: HTTP_HEADER_CLOSE
fs: HTTP_HEADER_CLOSE()
pt: OWA_UTIL
fn: LISTPRINT
fs: LISTPRINT(P_THECURSOR NUMBER IN,P_CNAME VARCHAR2 IN,P_NSIZE NUMBER IN,P_MULTIPLE PL/SQL BOOLEAN IN,P_THEQUERY VARCHAR2 IN,P_CNAME VARCHAR2 IN,P_NSIZE NUMBER IN,P_MULTIPLE PL/SQL BOOLEAN IN)
pt: OWA_UTIL
fn: MIME_HEADER
fs: MIME_HEADER(CCONTENT_TYPE VARCHAR2 IN,BCLOSE_HEADER PL/SQL BOOLEAN IN,CCHARSET VARCHAR2 IN)
pt: OWA_UTIL
fn: NAME_RESOLVE
fs: NAME_RESOLVE(CNAME VARCHAR2 IN,O_PROCOWNER VARCHAR2 OUT,O_PROCNAME VARCHAR2 OUT)
pt: OWA_UTIL
fn: PRINT_CGI_ENV
fs: PRINT_CGI_ENV()
pt: OWA_UTIL
fn: PRINT_VERSION
fs: PRINT_VERSION()
pt: OWA_UTIL
fn: REDIRECT_URL
fs: REDIRECT_URL(CURL VARCHAR2 IN,BCLOSE_HEADER PL/SQL BOOLEAN IN)
pt: OWA_UTIL
fn: RESOLVE_TABLE
fs: RESOLVE_TABLE(COBJECT VARCHAR2 IN,CSCHEMA VARCHAR2 IN,RESOLVED_NAME VARCHAR2 OUT,RESOLVED_OWNER VARCHAR2 OUT,RESOLVED_DB_LINK VARCHAR2 OUT)
pt: OWA_UTIL
fn: SHOWPAGE
fs: SHOWPAGE()
pt: OWA_UTIL
fn: SHOWSOURCE
fs: SHOWSOURCE(CNAME VARCHAR2 IN)
pt: OWA_UTIL
fn: SHOW_QUERY_COLUMNS
fs: SHOW_QUERY_COLUMNS(CTABLE VARCHAR2 IN)
pt: OWA_UTIL
fn: SIGNATURE
fs: SIGNATURE(CNAME VARCHAR2 IN)
pt: OWA_UTIL
fn: STATUS_LINE
fs: STATUS_LINE(NSTATUS NUMBER IN,CREASON VARCHAR2 IN,BCLOSE_HEADER PL/SQL BOOLEAN IN)
pt: OWA_UTIL
fn: TABLECAPTION
fs: TABLECAPTION(CCAPTION VARCHAR2 IN,CALIGN VARCHAR2 IN,NTABLE_TYPE NUMBER IN)
pt: OWA_UTIL
fn: TABLECLOSE
fs: TABLECLOSE(NTABLE_TYPE NUMBER IN,NTABLE_WIDTH NUMBER IN,NTABLE_TYPE NUMBER IN)
pt: OWA_UTIL
fn: TABLEDATA
fs: TABLEDATA(CDATA VARCHAR2 IN,NCOLUMN_SIZE NUMBER IN,CALIGN VARCHAR2 IN,CROWSTRING VARCHAR2 IN/OUT,NTABLE_TYPE NUMBER IN)
pt: OWA_UTIL
fn: TABLEHEADER
fs: TABLEHEADER(CCOLUMN_NAME VARCHAR2 IN,NCOLUMN_SIZE NUMBER IN,CALIGN VARCHAR2 IN,CROWSTRING VARCHAR2 IN/OUT,NTABLE_TYPE NUMBER IN,CCOLUMN_NAME VARCHAR2 IN,NCOLUMN_SIZE NUMBER IN,CALIGN VARCHAR2 IN,CROWSTRING VARCHAR2 IN/OUT,NTABLE_WIDTH NUMBER IN/OUT,NTABLE_TYPE NUMBER IN,CVALUE VARCHAR2 IN, VARCHAR2 RESULT,CALIGN VARCHAR2 IN,CVALUE VARCHAR2 IN,CALIGN VARCHAR2 IN,CDP VARCHAR2 IN,CDP VARCHAR2 IN,CNOWRAP VARCHAR2 IN,CROWSPAN VARCHAR2 IN,CNOWRAP VARCHAR2 IN,CCOLSPAN VARCHAR2 IN,CROWSPAN VARCHAR2 IN,CCOLSPAN VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN,CATTRIBUTES VARCHAR2 IN)
pt: OWA_UTIL
fn: TABLEHEADERROWCLOSE
fs: TABLEHEADERROWCLOSE(CROWSTRING VARCHAR2 IN/OUT,NTABLE_TYPE NUMBER IN,CROWSTRING VARCHAR2 IN/OUT,NTABLE_WIDTH NUMBER IN,NTABLE_TYPE NUMBER IN)
pt: OWA_UTIL
fn: TABLEHEADERROWOPEN
fs: TABLEHEADERROWOPEN(CROWSTRING VARCHAR2 IN/OUT,NTABLE_TYPE NUMBER IN,CROWSTRING VARCHAR2 IN/OUT,NTABLE_WIDTH NUMBER RETURN,NTABLE_TYPE NUMBER IN)
pt: OWA_UTIL
fn: TABLENODATA
fs: TABLENODATA(CALIGN VARCHAR2 IN,CROWSTRING VARCHAR2 IN/OUT,NNUM_COLS NUMBER IN,NTABLE_WIDTH NUMBER IN,NTABLE_TYPE NUMBER IN)
pt: OWA_UTIL
fn: TABLEOPEN
fs: TABLEOPEN(CATTRIBUTES VARCHAR2 IN,NTABLE_TYPE NUMBER IN)
pt: OWA_UTIL
fn: TABLEROWCLOSE
fs: TABLEROWCLOSE(CROWSTRING VARCHAR2 IN/OUT,NTABLE_TYPE NUMBER IN)
pt: OWA_UTIL
fn: TABLEROWOPEN
fs: TABLEROWOPEN(CROWSTRING VARCHAR2 IN/OUT,NTABLE_TYPE NUMBER IN)
pt: OWA_UTIL
fn: WHO_CALLED_ME
fs: WHO_CALLED_ME(OWNER VARCHAR2 OUT,NAME VARCHAR2 OUT,LINENO NUMBER OUT,CALLER_T VARCHAR2 OUT)
pt: OWA_UTIL
fn: INIT
fs: INIT(DEBUGID VARCHAR2 IN,CREATE_PIPES PL/SQL BOOLEAN IN,DEBUG_ROLE VARCHAR2 IN,DEBUG_ROLE_PWD VARCHAR2 IN)
pt: PBSDE
fn: SHUTDOWN
fs: SHUTDOWN(FORCE PL/SQL BOOLEAN IN)
pt: PBSDE
fn: DELETE
fs: DELETE(COLLECTION TABLE IN/OUT, CHAR IN/OUT,COLLECTION PL/SQL TABLE IN/OUT, CHAR IN/OUT,I BINARY_INTEGER IN,COLLECTION TABLE IN/OUT, CHAR IN/OUT,I BINARY_INTEGER IN,COLLECTION PL/SQL TABLE IN/OUT, CHAR IN/OUT,I BINARY_INTEGER IN,J BINARY_INTEGER IN,COLLECTION TABLE IN/OUT, CHAR IN/OUT,I BINARY_INTEGER IN,J BINARY_INTEGER IN,COLLECTION PL/SQL TABLE IN/OUT, CHAR IN/OUT,COLLECTION PL/SQL TABLE IN/OUT, CHAR IN/OUT,I VARCHAR2 IN,COLLECTION PL/SQL TABLE IN/OUT, CHAR IN/OUT,I1 VARCHAR2 IN,I2 VARCHAR2 IN, BINARY_INTEGER RESULT,LD RAW IN,ENTRYDN VARCHAR2 IN)
pt: PLITBLM
fn: EXTEND
fs: EXTEND(COLLECTION VARRAY IN/OUT, CHAR IN/OUT,N BINARY_INTEGER IN,COLLECTION TABLE IN/OUT, CHAR IN/OUT,N BINARY_INTEGER IN,COLLECTION VARRAY IN/OUT, CHAR IN/OUT,N BINARY_INTEGER IN,I BINARY_INTEGER IN,COLLECTION TABLE IN/OUT, CHAR IN/OUT,N BINARY_INTEGER IN,I BINARY_INTEGER IN)
pt: PLITBLM
fn: TRIM
fs: TRIM( VARCHAR2 RESULT,COLLECTION VARRAY IN/OUT,LOB_LOC BLOB IN/OUT,NEWLEN NUMBER IN,V VARCHAR2 IN, CHAR IN/OUT,N BINARY_INTEGER IN, CLOB RESULT,COLLECTION TABLE IN/OUT,LOB_LOC CLOB IN/OUT,NEWLEN NUMBER IN,V CLOB IN, CHAR IN/OUT,N BINARY_INTEGER IN)
pt: PLITBLM
fn: COMMIT
fs: COMMIT()
pt: STANDARD
fn: COMMIT_CM
fs: COMMIT_CM(VC VARCHAR2 IN)
pt: STANDARD
fn: ROLLBACK_NR
fs: ROLLBACK_NR()
pt: STANDARD
fn: ROLLBACK_SV
fs: ROLLBACK_SV(SAVE_POINT CHAR IN)
pt: STANDARD
fn: SAVEPOINT
fs: SAVEPOINT(SAVE_POINT CHAR IN)
pt: STANDARD
fn: SET_TRANSACTION_USE
fs: SET_TRANSACTION_USE(VC VARCHAR2 IN)
pt: STANDARD
fn: REGISTERURLHANDLER
fs: REGISTERURLHANDLER(PREFIX VARCHAR2 IN,SCHEMANAME VARCHAR2 IN,TYPENAME VARCHAR2 IN,IGNOREPREFIXCASE PL/SQL BOOLEAN IN,STRIPPREFIX PL/SQL BOOLEAN IN)
pt: URIFACTORY
fn: UNREGISTERURLHANDLER
fs: UNREGISTERURLHANDLER(PREFIX VARCHAR2 IN)
pt: URIFACTORY
fn: LZ_COMPRESS_ADD
fs: LZ_COMPRESS_ADD(HANDLE BINARY_INTEGER IN,DST BLOB IN/OUT,SRC RAW IN)
pt: UTL_COMPRESS
fn: LZ_COMPRESS_CLOSE
fs: LZ_COMPRESS_CLOSE(HANDLE BINARY_INTEGER IN,DST BLOB IN/OUT)
pt: UTL_COMPRESS
fn: LZ_UNCOMPRESS_CLOSE
fs: LZ_UNCOMPRESS_CLOSE(HANDLE BINARY_INTEGER IN)
pt: UTL_COMPRESS
fn: LZ_UNCOMPRESS_EXTRACT
fs: LZ_UNCOMPRESS_EXTRACT(HANDLE BINARY_INTEGER IN,DST RAW OUT)
pt: UTL_COMPRESS
fn: DELETE_OBJECT
fs: DELETE_OBJECT(REF REF IN)
pt: UTL_REF
fn: LOCK_OBJECT
fs: LOCK_OBJECT(REF REF IN,REF REF IN,OBJECT SYS.STANDARD RETURN)
pt: UTL_REF
fn: SELECT_OBJECT
fs: SELECT_OBJECT(REF REF IN,OBJECT OBJECT OUT)
pt: UTL_REF
fn: SELECT_OBJECT_WITH_CR
fs: SELECT_OBJECT_WITH_CR(REF REF IN,OBJECT OBJECT OUT)
pt: UTL_REF
fn: UPDATE_OBJECT
fs: UPDATE_OBJECT(REF REF IN,OBJECT OBJECT IN)
pt: UTL_REF
fn: DOWNLOAD_FILE
fs: DOWNLOAD_FILE(P_FILENAME VARCHAR2 IN,P_BCACHING PL/SQL BOOLEAN IN,P_BLOB BLOB IN/OUT,P_BFILE BFILE IN/OUT,SFILENAME VARCHAR2 IN,BCOMPRESS PL/SQL BOOLEAN IN)
pt: WPG_DOCLOAD
fn: GET_DOWNLOAD_BFILE
fs: GET_DOWNLOAD_BFILE(P_BFILE BFILE OUT)
pt: WPG_DOCLOAD
fn: GET_DOWNLOAD_BLOB
fs: GET_DOWNLOAD_BLOB(P_BLOB BLOB OUT)
pt: WPG_DOCLOAD
fn: GET_DOWNLOAD_FILE
fs: GET_DOWNLOAD_FILE(P_DOC_INFO VARCHAR2 OUT)
pt: WPG_DOCLOAD
fn: SUBPFPARAM
fs: SUBPFPARAM(OBJNUM NUMBER IN,NAME VARCHAR2 IN,SUBNAME VARCHAR2 IN,PRENAME VARCHAR2 IN,PNAMES PL/SQL TABLE IN,PTNAMES PL/SQL TABLE IN/OUT,PTYPES PL/SQL TABLE IN,STATUS NUMBER OUT,MISDEF VARCHAR2 OUT,NENAME VARCHAR2 OUT)
pt: WPIUTL
fn: SUBPPARAM
fs: SUBPPARAM(OBJNUM NUMBER IN,NAME VARCHAR2 IN,SUBNAME VARCHAR2 IN,PRENAME VARCHAR2 IN,STATUS NUMBER RETURN,MISDEF VARCHAR2 RETURN,NENAME VARCHAR2 RETURN,OBJNUM NUMBER IN,NAME VARCHAR2 IN,SUBNAME VARCHAR2 IN,PRENAME VARCHAR2 IN,PNAMES PL/SQL TABLE IN/OUT, VARCHAR2 IN/OUT,PTNAMES PL/SQL TABLE IN/OUT, VARCHAR2 IN/OUT,PTYPES PL/SQL TABLE IN/OUT, VARCHAR2 IN/OUT,STATUS NUMBER RETURN,MISDEF VARCHAR2 RETURN,NENAME VARCHAR2 RETURN)
pt: WPIUTL