fn: abs
fs: number abs ( mixed $number )
fd: Returns the absolute value of number.
vi: PHP 4, PHP 5
pt: Mathematical
fn: acos
fs: float acos ( float $arg )
fd: Returns the arc cosine of arg in radians.
vi: PHP 4, PHP 5
pt: Mathematical
fn: acosh
fs: float acosh ( float $arg )
fd: Returns the inverse hyperbolic cosine of arg, i.e. the value whose hyperbolic cosine is arg. 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Mathematical
fn: addcslashes
fs: string addcslashes ( string $str , string $charlist )
fd: Returns a string with backslashes before characters that are listed in charlist parameter.
vi: PHP 4, PHP 5
pt: String
fn: addslashes
fs: string addslashes ( string $str )
fd: Returns a string with backslashes before characters that need to be quoted in database queries etc. These characters are single quote ('), double quote (), backslash (\) and NUL (the NULL byte). 
vi: PHP 4, PHP 5
pt: String
fn: aggregate
fs: void aggregate ( object $object , string $class_name )
fd: Aggregates methods and properties defined in a class to an existing object. Methods and properties with names starting with an underscore character (_) are considered private to the aggregated class and are not used, constructors are also excluded from the aggregation procedure.
vi: PHP 4 >= 4.2.0
pt: Object Aggregation/Composition
fn: aggregate_info
fs: array aggregate_info ( object $object )
fd: Gets the aggregation information for the given object.
vi: 
pt: Object Aggregation/Composition
fn: aggregate_methods
fs: void aggregate_methods ( object $object , string $class_name )
fd: Aggregates all methods defined in a class to an existing object, except for the class constructor, or methods whose names start with an underscore character (_) which are considered private to the aggregated class.
vi: PHP 4 >= 4.2.0
pt: Object Aggregation/Composition
fn: aggregate_methods_by_list
fs: void aggregate_methods_by_list ( object $object , string $class_name , array $methods_list [, bool $exclude ] )
fd: Aggregates methods from a class to an existing object using a list of method names. 
vi: PHP 4 >= 4.2.0
pt: Object Aggregation/Composition
fn: aggregate_methods_by_regexp
fs: void aggregate_methods_by_regexp ( object $object , string $class_name , string $regexp [, bool $exclude ] )
fd: Aggregates methods from a class to an existing object using a regular expression to match method names. 
vi: PHP 4 >= 4.2.0
pt: Object Aggregation/Composition
fn: aggregate_properties
fs: void aggregate_properties ( object $object , string $class_name )
fd: Aggregates all properties defined in a class to an existing object, except for properties whose names start with an underscore character (_) which are considered private to the aggregated class.
vi: PHP 4 >= 4.2.0
pt: Object Aggregation/Composition
fn: aggregate_properties_by_list
fs: void aggregate_properties_by_list ( object $object , string $class_name , array $properties_list [, bool $exclude ] )
fd: Aggregates properties from a class to an existing object using a list of property names. 
vi: PHP 4 >= 4.2.0
pt: Object Aggregation/Composition
fn: aggregate_properties_by_regexp
fs: void aggregate_properties_by_regexp ( object $object , string $class_name , string $regexp [, bool $exclude ] )
fd: Aggregates properties from a class to an existing object using a regular expression to match their names. 
vi: PHP 4 >= 4.2.0
pt: Object Aggregation/Composition
fn: aggregation_info
fs: 
fd: 
vi: PHP 4 >= 4.2.0
pt: Object Aggregation/Composition
fn: apache_child_terminate
fs: bool apache_child_terminate ( void )
fd: apache_child_terminate() will register the Apache process executing the current PHP request for termination once execution of PHP code it is completed. It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system.
vi: PHP 4 >= 4.0.5, PHP 5
pt: Apache-specific
fn: apache_get_modules
fs: array apache_get_modules ( void )
fd: Get a list of loaded Apache modules.
vi: PHP 4 >= 4.3.2, PHP 5
pt: Apache-specific
fn: apache_get_version
fs: string apache_get_version ( void )
fd: Fetch the Apache version.
vi: PHP 4 >= 4.3.2, PHP 5
pt: Apache-specific
fn: apache_getenv
fs: string apache_getenv ( string $variable [, bool $walk_to_top ] )
fd: Get an Apache environment variable as specified by variable. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Apache-specific
fn: apache_lookup_uri
fs: object apache_lookup_uri ( string $filename )
fd: This performs a partial request for a URI. It goes just far enough to obtain all the important information about the given resource. 
vi: PHP 4, PHP 5
pt: Apache-specific
fn: apache_note
fs: string apache_note ( string $note_name [, string $note_value ] )
fd: apache_note() is an Apache-specific function which gets and sets values in a request's notes table.
vi: PHP 4, PHP 5
pt: Apache-specific
fn: apache_request_headers
fs: array apache_request_headers ( void )
fd: Fetches all HTTP requests from the current request. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Apache-specific
fn: apache_reset_timeout
fs: bool apache_reset_timeout ( void )
fd: apache_reset_timeout() resets the Apache write timer, which defaults to 300 seconds. With set_time_limit(0); ignore_user_abort(true) and periodic apache_reset_timeout() calls, Apache can theoretically run forever. 
vi: PHP 5 >= 5.1.0
pt: Apache-specific
fn: apache_response_headers
fs: array apache_response_headers ( void )
fd: Fetch all HTTP response headers.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Apache-specific
fn: apache_setenv
fs: bool apache_setenv ( string $variable , string $value [, bool $walk_to_top ] )
fd: apache_setenv() sets the value of the Apache environment variable specified by variable. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Apache-specific
fn: apc_add
fs: bool apc_add ( string $key , mixed $var [, int $ttl ] )
fd: 
vi: PECL apc:3.0.13-3.0.14
pt: Alternative PHP Cache
fn: apc_cache_info
fs: array apc_cache_info ([ string $cache_type [, bool $limited ]] )
fd: 
vi: PECL apc:2.0-3.0.9
pt: Alternative PHP Cache
fn: apc_clear_cache
fs: bool apc_clear_cache ([ string $cache_type ] )
fd: 
vi: PECL apc:2.0-3.0.9
pt: Alternative PHP Cache
fn: apc_compile_file
fs: bool apc_compile_file ( string $filename )
fd: 
vi: PECL apc:3.0.13-3.0.14
pt: Alternative PHP Cache
fn: apc_define_constants
fs: bool apc_define_constants ( string $key , array $constants [, bool $case_sensitive ] )
fd: 
vi: PECL apc:3.0.0-3.0.9
pt: Alternative PHP Cache
fn: apc_delete
fs: bool apc_delete ( string $key )
fd: 
vi: PECL apc:3.0.0-3.0.9
pt: Alternative PHP Cache
fn: apc_fetch
fs: mixed apc_fetch ( string $key )
fd: 
vi: PECL apc:3.0.0-3.0.9
pt: Alternative PHP Cache
fn: apc_load_constants
fs: bool apc_load_constants ( string $key [, bool $case_sensitive ] )
fd: 
vi: PECL apc:3.0.0-3.0.9
pt: Alternative PHP Cache
fn: apc_sma_info
fs: array apc_sma_info ([ bool $limited ] )
fd: 
vi: PECL apc:2.0-3.0.9
pt: Alternative PHP Cache
fn: apc_store
fs: bool apc_store ( string $key , mixed $var [, int $ttl ] )
fd: 
vi: PECL apc:3.0.0-3.0.9
pt: Alternative PHP Cache
fn: apd_breakpoint
fs: bool apd_breakpoint ( int $debug_level )
fd: This can be used to stop the running of your script, and await responses on the connected socket. To step the program, just send enter (a blank line), or enter a php command to be executed.
vi: PECL apd:0.2-1.0.1
pt: Advanced PHP debugger
fn: apd_callstack
fs: array apd_callstack ( void )
fd: Returns the current call stack as an array
vi: PECL apd:0.2-0.4
pt: Advanced PHP debugger
fn: apd_clunk
fs: void apd_clunk ( string $warning [, string $delimiter ] )
fd: Behaves like perl's Carp::cluck. Throw a warning and a callstack.
vi: 
pt: Advanced PHP debugger
fn: apd_continue
fs: bool apd_continue ( int $debug_level )
fd: Usually sent via the socket to restart the interpreter.
vi: PECL apd:0.2-1.0.1
pt: Advanced PHP debugger
fn: apd_croak
fs: void apd_croak ( string $warning [, string $delimiter ] )
fd: Behaves like perl's Carp::croak. Throw an error, a callstack and then exit.
vi: PECL apd:0.2-0.4
pt: Advanced PHP debugger
fn: apd_dump_function_table
fs: void apd_dump_function_table ( void )
fd: Outputs the current function table.
vi: 
pt: Advanced PHP debugger
fn: apd_dump_persistent_resources
fs: array apd_dump_persistent_resources ( void )
fd: Return all persistent resources as an array.
vi: PECL apd:0.2-0.4
pt: Advanced PHP debugger
fn: apd_dump_regular_resources
fs: array apd_dump_regular_resources ( void )
fd: Return all current regular resources as an array.
vi: PECL apd:0.2-0.4
pt: Advanced PHP debugger
fn: apd_echo
fs: bool apd_echo ( string $output )
fd: Usually sent via the socket to request information about the running script.
vi: PECL apd:0.2-1.0.1
pt: Advanced PHP debugger
fn: apd_get_active_symbols
fs: array apd_get_active_symbols ( void )
fd: Returns the names of all the variables defined in the active scope, (not their values).
vi: PECL apd:0.2
pt: Advanced PHP debugger
fn: apd_set_pprof_trace
fs: string apd_set_pprof_trace ([ string $dump_directory [, string $fragment ]] )
fd: Starts debugging to pprof_{process_id} in the dump directory.
vi: PECL apd:0.2-1.0.1
pt: Advanced PHP debugger
fn: apd_set_session
fs: void apd_set_session ( int $debug_level )
fd: This can be used to increase or decrease debugging in a different area of your application.
vi: PECL apd:0.2-0.4
pt: Advanced PHP debugger
fn: apd_set_session_trace
fs: void apd_set_session_trace ( int $debug_level [, string $dump_directory ] )
fd: Starts debugging to apd_dump_{process_id} in the dump directory.
vi: PECL apd:0.2-0.4
pt: Advanced PHP debugger
fn: apd_set_socket_session_trace
fs: bool apd_set_socket_session_trace ( string $tcp_server , int $socket_type , int $port , int $debug_level )
fd: Connects to the specified tcp_server (eg. tcplisten) and sends debugging data to the socket.
vi: 
pt: Advanced PHP debugger
fn: array
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_change_key_case
fs: array array_change_key_case ( array $input [, int $case ] )
fd: Returns an array with all keys from input lowercased or uppercased. Numbered indices are left as is.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Array
fn: array_chunk
fs: array array_chunk ( array $input , int $size [, bool $preserve_keys ] )
fd: Chunks an array into size large chunks. The last chunk may contain less than size elements.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Array
fn: array_combine
fs: array array_combine ( array $keys , array $values )
fd: 
vi: PHP 5
pt: Array
fn: array_count_values
fs: array array_count_values ( array $input )
fd: array_count_values() returns an array using the values of the input array as keys and their frequency in input as values.
vi: PHP 4, PHP 5
pt: Array
fn: array_diff
fs: array array_diff ( array $array1 , array $array2 [, array $ ... ] )
fd: Compares array1 against array2 and returns the difference.
vi: PHP 4 >= 4.0.1, PHP 5
pt: Array
fn: array_diff_assoc
fs: array array_diff_assoc ( array $array1 , array $array2 [, array $... ] )
fd: Compares array1 against array2 and returns the difference.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Array
fn: array_diff_key
fs: array array_diff_key ( array $array1 , array $array2 [, array $... ] )
fd: Compares the keys from array1 against the keys from array2 and returns the difference.
vi: PHP 5 >= 5.1.0
pt: Array
fn: array_diff_uassoc
fs: array array_diff_uassoc ( array $array1 , array $array2 [, array $... ], callback $key_compare_func )
fd: Compares array1 against array2 and returns the difference.
vi: PHP 5
pt: Array
fn: array_diff_ukey
fs: array array_diff_ukey ( array $array1 , array $array2 [, array $ ... ], callback $key_compare_func )
fd: Compares the keys from array1 against the keys from array2 and returns the difference.
vi: PHP 5 >= 5.1.0
pt: Array
fn: array_fill
fs: array array_fill ( int $start_index , int $num , mixed $value )
fd: Fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Array
fn: array_fill_keys
fs: array array_fill_keys ( array $keys , mixed $value )
fd: Fills an array with the value of the value parameter, using the values of the keys array as keys.
vi: PHP 5 >= 5.2.0
pt: Array
fn: array_filter
fs: array array_filter ( array $input [, callback $callback ] )
fd: Iterates over each value in the input array passing them to the callback function. If the callback function returns true, the current value from input is returned into the result array. Array keys are preserved.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Array
fn: array_flip
fs: array array_flip ( array $trans )
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_intersect
fs: array array_intersect ( array $array1 , array $array2 [, array $ ... ] )
fd: array_intersect() returns an array containing all the values of array1 that are present in all the arguments. Note that keys are preserved.
vi: PHP 4 >= 4.0.1, PHP 5
pt: Array
fn: array_intersect_assoc
fs: array array_intersect_assoc ( array $array1 , array $array2 [, array $ ... ] )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Array
fn: array_intersect_key
fs: array array_intersect_key ( array $array1 , array $array2 [, array $ ... ] )
fd: array_intersect_key() returns an array containing all the values of array1 which have matching keys that are present in all the arguments.
vi: PHP 5 >= 5.1.0
pt: Array
fn: array_intersect_uassoc
fs: array array_intersect_uassoc ( array $array1 , array $array2 [, array $ ... ], callback $key_compare_func )
fd: array_intersect_uassoc() returns an array containing all the values of array1 that are present in all the arguments.
vi: PHP 5
pt: Array
fn: array_intersect_ukey
fs: array array_intersect_ukey ( array $array1 , array $array2 [, array $... ], callback $key_compare_func )
fd: array_intersect_ukey() returns an array containing all the values of array1 which have matching keys that are present in all the arguments. 
vi: PHP 5 >= 5.1.0
pt: Array
fn: array_key_exists
fs: bool array_key_exists ( mixed $key , array $search )
fd: array_key_exists() returns TRUE if the given key is set in the array. key can be any value possible for an array index. array_key_exists() also works on objects.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Array
fn: array_keys
fs: array array_keys ( array $input [, mixed $search_value [, bool $strict ]] )
fd: array_keys() returns the keys, numeric and string, from the input array. 
vi: PHP 4, PHP 5
pt: Array
fn: array_map
fs: array array_map ( callback $callback , array $arr1 [, array $... ] )
fd: array_map() returns an array containing all the elements of arr1 after applying the callback function to each one. The number of parameters that the callback function accepts should match the number of arrays passed to the array_map()
vi: PHP 4 >= 4.0.6, PHP 5
pt: Array
fn: array_merge
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_merge_recursive
fs: array array_merge_recursive ( array $array1 [, array $... ] )
fd: array_merge_recursive() merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array. 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Array
fn: array_multisort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_pad
fs: array array_pad ( array $input , int $pad_size , mixed $pad_value )
fd: array_pad() returns a copy of the input padded to size specified by pad_size with value pad_value. If pad_size is positive then the array is padded on the right, if it's negative then on the left. If the absolute value of pad_size is less than or equal to the length of the input then no padding takes place. It is possible to add most 1048576 elements at a time.
vi: PHP 4, PHP 5
pt: Array
fn: array_pop
fs: mixed array_pop ( array &$array )
fd: array_pop() pops and returns the last value of the array, shortening the array by one element. If array is empty (or is not an array), NULL will be returned. 
vi: PHP 4, PHP 5
pt: Array
fn: array_product
fs: 
fd: 
vi: PHP 5 >= 5.1.0
pt: Array
fn: array_push
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_rand
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_reduce
fs: 
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: Array
fn: array_reverse
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_search
fs: 
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: Array
fn: array_shift
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_slice
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_splice
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_sum
fs: 
fd: 
vi: PHP 4 >= 4.0.4, PHP 5
pt: Array
fn: array_udiff
fs: 
fd: 
vi: PHP 5
pt: Array
fn: array_udiff_assoc
fs: 
fd: 
vi: PHP 5
pt: Array
fn: array_udiff_uassoc
fs: 
fd: 
vi: PHP 5
pt: Array
fn: array_uintersect
fs: 
fd: 
vi: PHP 5
pt: Array
fn: array_uintersect_assoc
fs: 
fd: 
vi: PHP 5
pt: Array
fn: array_uintersect_uassoc
fs: 
fd: 
vi: PHP 5
pt: Array
fn: array_unique
fs: 
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Array
fn: array_unshift
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_values
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_walk
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: array_walk_recursive
fs: 
fd: 
vi: PHP 5
pt: Array
fn: arsort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: ascii2ebcdic
fs: int ascii2ebcdic ( string $ascii_str )
fd: ascii2ebcdic() is an Apache-specific function which is available only on EBCDIC based operating systems (OS/390, BS2000). It translates the ASCII encoded string ascii_str to its equivalent EBCDIC representation (binary safe), and returns the result.
vi: 
pt: Apache-specific
fn: asin
fs: float asin ( float $arg )
fd: Returns the arc sine of arg in radians.
vi: PHP 4, PHP 5
pt: Mathematical
fn: asinh
fs: float asinh ( float $arg )
fd: Returns the inverse hyperbolic sine of arg, i.e. the value whose hyperbolic sine is arg. 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Mathematical
fn: asort
fs: bool asort ( array &$array [, int $sort_flags ] )
fd: Sort an array and maintain index association
vi: PHP 4, PHP 5
pt: Array
fn: aspell_check
fs: bool aspell_check ( int $dictionary_link , string $word )
fd: aspell_check() checks the spelling of a word.
vi: PHP 4 <= 4.2.3
pt: Aspell functions [deprecated]
fn: aspell_check_raw
fs: bool aspell_check_raw ( int $dictionary_link , string $word )
fd: aspell_check_raw() checks the spelling of a word, without changing its case or trying to trim it in any way.
vi: PHP 4 <= 4.2.3
pt: Aspell functions [deprecated]
fn: aspell_new
fs: int aspell_new ( string $master [, string $personal ] )
fd: aspell_new() opens up a new dictionary for use with the other aspell functions.
vi: PHP 4 <= 4.2.3
pt: Aspell functions [deprecated]
fn: aspell_suggest
fs: array aspell_suggest ( int $dictionary_link , string $word )
fd: aspell_suggest() suggest spellings for the given word.
vi: PHP 4 <= 4.2.3
pt: Aspell functions [deprecated]
fn: assert
fs: bool assert ( mixed $assertion )
fd: assert() will check the given assertion and take appropriate action if its result is FALSE. 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: assert_options
fs: mixed assert_options ( int $what [, mixed $value ] )
fd: 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: atan
fs: float atan ( float $arg )
fd: Returns the arc tangent of arg in radians.
vi: PHP 4, PHP 5
pt: Mathematical
fn: atan2
fs: float atan2 ( float $y , float $x )
fd: 
vi: PHP 4, PHP 5
pt: Mathematical
fn: atanh
fs: float atanh ( float $arg )
fd: Returns the inverse hyperbolic tangent of arg, i.e. the value whose hyperbolic tangent is arg. 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Mathematical
fn: base64_decode
fs: string base64_decode ( string $data [, bool $strict ] )
fd: Decodes a base64 encoded data.
vi: PHP 4, PHP 5
pt: URL
fn: base64_encode
fs: string base64_encode ( string $data )
fd: Encodes the given data with base64. 
vi: PHP 4, PHP 5
pt: URL
fn: base_convert
fs: string base_convert ( string $number , int $frombase , int $tobase )
fd: Returns a string containing number represented in base tobase. The base in which number is given is specified in frombase. Both frombase and tobase have to be between 2 and 36, inclusive. Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35.
vi: PHP 4, PHP 5
pt: Mathematical
fn: basename
fs: string basename ( string $path [, string $suffix ] )
fd: Given a string containing a path to a file, this function will return the base name of the file.
vi: PHP 4, PHP 5
pt: Filesystem
fn: bbcode_add_element
fs: bool bbcode_add_element ( resource $bbcode_container , string $tag_name , array $tag_rules )
fd: Adds a tag to an existing BBCode_Container tag_set using tag_rules.
vi: PECL bbcode:0.9.0-0.9.1
pt: BBCode
fn: bbcode_add_smiley
fs: bool bbcode_add_smiley ( resource $bbcode_container , string $smiley , string $replace_by )
fd: Adds a smiley to the parser
vi: 
pt: BBCode
fn: bbcode_create
fs: resource bbcode_create ([ array $bbcode_initial_tags ] )
fd: This function returns a new BBCode Resource used to parse BBCode strings.
vi: PECL bbcode:0.9.0-0.9.1
pt: BBCode
fn: bbcode_destroy
fs: bool bbcode_destroy ( resource $bbcode_container )
fd: 
vi: PECL bbcode:0.9.0-0.9.1
pt: BBCode
fn: bbcode_parse
fs: string bbcode_parse ( resource $bbcode_container , string $to_parse )
fd: 
vi: PECL bbcode:0.9.0-0.9.1
pt: BBCode
fn: bbcode_set_arg_parser
fs: bool bbcode_set_arg_parser ( resource $bbcode_container , resource $bbcode_arg_parser )
fd: Attaches another parser to the bbcode_container. This parser is used only when arguments must be parsed. If this function is not used, the default argument parser is the parser itself.
vi: 
pt: BBCode
fn: bbcode_set_flags
fs: bool bbcode_set_flags ( resource $bbcode_container , int $flags [, int $mode ] )
fd: Set or alter parser options
vi: 
pt: BBCode
fn: bcadd
fs: string bcadd ( string $left_operand , string $right_operand [, int $scale ] )
fd: Sums left_operand and right_operand.
vi: PHP 4, PHP 5
pt: BCMath Arbitrary Precision Mathematics
fn: bccomp
fs: int bccomp ( string $left_operand , string $right_operand [, int $scale ] )
fd: Compares the left_operand to the right_operand and returns the result as an integer.
vi: PHP 4, PHP 5
pt: BCMath Arbitrary Precision Mathematics
fn: bcdiv
fs: string bcdiv ( string $left_operand , string $right_operand [, int $scale ] )
fd: Divides the left_operand by the right_operand.
vi: PHP 4, PHP 5
pt: BCMath Arbitrary Precision Mathematics
fn: bcmod
fs: string bcmod ( string $left_operand , string $modulus )
fd: Get the modulus of the left_operand using modulus.
vi: PHP 4, PHP 5
pt: BCMath Arbitrary Precision Mathematics
fn: bcmul
fs: string bcmul ( string $left_operand , string $right_operand [, int $scale ] )
fd: Multiply the left_operand by the right_operand.
vi: PHP 4, PHP 5
pt: BCMath Arbitrary Precision Mathematics
fn: bcompiler_load
fs: bool bcompiler_load ( string $filename )
fd: Reads data from a bzcompressed file and creates classes from the bytecodes.
vi: PECL bcompiler:0.4-0.8
pt: PHP bytecode Compiler
fn: bcompiler_load_exe
fs: bool bcompiler_load_exe ( string $filename )
fd: Reads data from a bcompiler exe file and creates classes from the bytecodes.
vi: PECL bcompiler:0.4-0.8
pt: PHP bytecode Compiler
fn: bcompiler_parse_class
fs: bool bcompiler_parse_class ( string $class , string $callback )
fd: Reads the bytecodes of a class and calls back to a user function.
vi: PECL bcompiler:0.4-0.8
pt: PHP bytecode Compiler
fn: bcompiler_read
fs: bool bcompiler_read ( resource $filehandle )
fd: Reads data from a open file handle and creates classes from the bytecodes.
vi: PECL bcompiler:0.4-0.8
pt: PHP bytecode Compiler
fn: bcompiler_write_class
fs: bool bcompiler_write_class ( resource $filehandle , string $className [, string $extends ] )
fd: Reads the bytecodes from PHP for an existing class, and writes them to the open file handle.
vi: PECL bcompiler:0.4-0.8
pt: PHP bytecode Compiler
fn: bcompiler_write_constant
fs: bool bcompiler_write_constant ( resource $filehandle , string $constantName )
fd: Reads the bytecodes from PHP for an existing constant, and writes them to the open file handle.
vi: PECL bcompiler:0.5-0.8
pt: PHP bytecode Compiler
fn: bcompiler_write_exe_footer
fs: bool bcompiler_write_exe_footer ( resource $filehandle , int $startpos )
fd: An EXE (or self executable) file consists of 3 parts: The stub (executable code, e.g. a compiled C program) that loads PHP interpreter, bcompiler extension, stored Bytecodes and initiates a call for the specified function (e.g. main) or class method (e.g. main::main). The Bytecodes (uncompressed only for the moment). The bcompiler EXE footer.
vi: PECL bcompiler:0.4-0.8
pt: PHP bytecode Compiler
fn: bcompiler_write_file
fs: bool bcompiler_write_file ( resource $filehandle , string $filename )
fd: This function complies specified source file into bytecodes, and writes them to the open file handle.
vi: PECL bcompiler:0.6-0.8
pt: PHP bytecode Compiler
fn: bcompiler_write_footer
fs: bool bcompiler_write_footer ( resource $filehandle )
fd: Writes the single character \x00 to indicate End of compiled data.
vi: PECL bcompiler:0.4-0.8
pt: PHP bytecode Compiler
fn: bcompiler_write_function
fs: bool bcompiler_write_function ( resource $filehandle , string $functionName )
fd: Reads the bytecodes from PHP for an existing function, and writes them to the open file handle. Order is not important, (eg. if function b uses function a, and you compile it like the example below, it will work perfectly OK).
vi: PECL bcompiler:0.5-0.8
pt: PHP bytecode Compiler
fn: bcompiler_write_functions_from_file
fs: bool bcompiler_write_functions_from_file ( resource $filehandle , string $fileName )
fd: Searches for all functions declared in the given file, and writes their correspondent bytecodes to the open file handle.
vi: PECL bcompiler:0.5-0.8
pt: PHP bytecode Compiler
fn: bcompiler_write_header
fs: bool bcompiler_write_header ( resource $filehandle [, string $write_ver ] )
fd: Writes the header part of a bcompiler file.
vi: PECL bcompiler:0.3-0.8
pt: PHP bytecode Compiler
fn: bcompiler_write_included_filename
fs: bool bcompiler_write_included_filename ( resource $filehandle , string $filename )
fd: 
vi: PECL bcompiler:0.5-0.8
pt: PHP bytecode Compiler
fn: bcpow
fs: string bcpow ( string $left_operand , string $right_operand [, int $scale ] )
fd: Raise left_operand to the power right_operand.
vi: PHP 4, PHP 5
pt: BCMath Arbitrary Precision Mathematics
fn: bcpowmod
fs: string bcpowmod ( string $left_operand , string $right_operand , string $modulus [, int $scale ] )
fd: Use the fast-exponentiation method to raise left_operand to the power right_operand with respect to the modulus modulus.
vi: PHP 5
pt: BCMath Arbitrary Precision Mathematics
fn: bcscale
fs: bool bcscale ( int $scale )
fd: Sets the default scale parameter for all subsequent bc math functions that do not explicitly specify a scale parameter.
vi: PHP 4, PHP 5
pt: BCMath Arbitrary Precision Mathematics
fn: bcsqrt
fs: string bcsqrt ( string $operand [, int $scale ] )
fd: Return the square root of the operand.
vi: PHP 4, PHP 5
pt: BCMath Arbitrary Precision Mathematics
fn: bcsub
fs: string bcsub ( string $left_operand , string $right_operand [, int $scale ] )
fd: Subtracts the right_operand from the left_operand.
vi: PHP 4, PHP 5
pt: BCMath Arbitrary Precision Mathematics
fn: bin2hex
fs: string bin2hex ( string $str )
fd: Returns an ASCII string containing the hexadecimal representation of str. The conversion is done byte-wise with the high-nibble first.
vi: PHP 4, PHP 5
pt: String
fn: bind_textdomain_codeset
fs: string bind_textdomain_codeset ( string $domain , string $codeset )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Gettext
fn: bindec
fs: number bindec ( string $binary_string )
fd: Returns the decimal equivalent of the binary number represented by the binary_string argument. 
vi: PHP 4, PHP 5
pt: Mathematical
fn: bindtextdomain
fs: string bindtextdomain ( string $domain , string $directory )
fd: The bindtextdomain() function sets the path for a domain.
vi: PHP 4, PHP 5
pt: Gettext
fn: bzclose
fs: int bzclose ( resource $bz )
fd: Closes the given bzip2 file pointer.
vi: PHP 4 >= 4.3.3, PHP 5, PECL bz2:1.0
pt: Bzip2 Compression
fn: bzcompress
fs: mixed bzcompress ( string $source [, int $blocksize [, int $workfactor ]] )
fd: bzcompress() compresses the given string and returns it as bzip2 encoded data.
vi: PHP 4 >= 4.3.3, PHP 5, PECL bz2:1.0
pt: Bzip2 Compression
fn: bzdecompress
fs: mixed bzdecompress ( string $source [, int $small ] )
fd: bzdecompress() decompresses the given string containing bzip2 encoded data.
vi: PHP 4 >= 4.3.3, PHP 5, PECL bz2:1.0
pt: Bzip2 Compression
fn: bzerrno
fs: int bzerrno ( resource $bz )
fd: Returns the error number of any bzip2 error returned by the given file pointer.
vi: PHP 4 >= 4.3.3, PHP 5, PECL bz2:1.0
pt: Bzip2 Compression
fn: bzerror
fs: array bzerror ( resource $bz )
fd: Returns the error number and error string of any bzip2 error returned by the given file pointer.
vi: PHP 4 >= 4.3.3, PHP 5, PECL bz2:1.0
pt: Bzip2 Compression
fn: bzerrstr
fs: string bzerrstr ( resource $bz )
fd: Gets the error string of any bzip2 error returned by the given file pointer.
vi: PHP 4 >= 4.3.3, PHP 5, PECL bz2:1.0
pt: Bzip2 Compression
fn: bzflush
fs: int bzflush ( resource $bz )
fd: Forces a write of all buffered bzip2 data for the file pointer bz.
vi: PHP 4 >= 4.3.3, PHP 5, PECL bz2:1.0
pt: Bzip2 Compression
fn: bzopen
fs: resource bzopen ( string $filename , string $mode )
fd: bzopen() opens a bzip2 (.bz2) file for reading or writing.
vi: PHP 4 >= 4.3.3, PHP 5, PECL bz2:1.0
pt: Bzip2 Compression
fn: bzread
fs: string bzread ( resource $bz [, int $length ] )
fd: bzread() reads from the given bzip2 file pointer. 
vi: PHP 4 >= 4.3.3, PHP 5, PECL bz2:1.0
pt: Bzip2 Compression
fn: bzwrite
fs: int bzwrite ( resource $bz , string $data [, int $length ] )
fd: bzwrite() writes a string into the given bzip2 file stream.
vi: PHP 4 >= 4.3.3, PHP 5, PECL bz2:1.0
pt: Bzip2 Compression
fn: cal_days_in_month
fs: int cal_days_in_month ( int $calendar , int $month , int $year )
fd: This function will return the number of days in the month of year for the specified calendar.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Calendar
fn: cal_from_jd
fs: array cal_from_jd ( int $jd , int $calendar )
fd: cal_from_jd() converts the Julian day given in jd into a date of the specified calendar. Supported calendar values are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Calendar
fn: cal_info
fs: array cal_info ([ int $calendar ] )
fd: cal_info() returns information on the specified calendar. 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Calendar
fn: cal_to_jd
fs: int cal_to_jd ( int $calendar , int $month , int $day , int $year )
fd: cal_to_jd() calculates the Julian day count for a date in the specified calendar. Supported calendars are CAL_GREGORIAN, CAL_JULIAN, CAL_JEWISH and CAL_FRENCH.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Calendar
fn: call_user_func
fs: mixed call_user_func ( callback $function [, mixed $parameter [, mixed $... ]] )
fd: Call a user defined function given by the function parameter.
vi: PHP 4, PHP 5
pt: Function Handling
fn: call_user_func_array
fs: mixed call_user_func_array ( callback $function , array $param_arr )
fd: Call a user defined function with the parameters in param_arr.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Function Handling
fn: call_user_method
fs: mixed call_user_method ( string $method_name , object &$obj [, mixed $parameter [, mixed $... ]] )
fd: The call_user_method() function is deprecated as of PHP 4.1.
vi: PHP 4, PHP 5
pt: Class/Object
fn: call_user_method_array
fs: mixed call_user_method_array ( string $method_name , object &$obj , array $paramarr )
fd: The call_user_method_array() function is deprecated as of PHP 4.1.
vi: PHP 4 >= 4.0.5, PHP 5
pt: Class/Object
fn: ccvs_add
fs: string ccvs_add ( string $session , string $invoice , string $argtype , string $argval )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_auth
fs: string ccvs_auth ( string $session , string $invoice )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_command
fs: string ccvs_command ( string $session , string $type , string $argval )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_count
fs: int ccvs_count ( string $session , string $type )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_delete
fs: string ccvs_delete ( string $session , string $invoice )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_done
fs: string ccvs_done ( string $sess )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_init
fs: string ccvs_init ( string $name )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_lookup
fs: string ccvs_lookup ( string $session , string $invoice , int $inum )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_new
fs: string ccvs_new ( string $session , string $invoice )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_report
fs: string ccvs_report ( string $session , string $type )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_return
fs: string ccvs_return ( string $session , string $invoice )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_reverse
fs: string ccvs_reverse ( string $session , string $invoice )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_sale
fs: string ccvs_sale ( string $session , string $invoice )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_status
fs: string ccvs_status ( string $session , string $invoice )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_textvalue
fs: string ccvs_textvalue ( string $session )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ccvs_void
fs: string ccvs_void ( string $session , string $invoice )
fd: 
vi: PHP 4 >= 4.0.3
pt: CCVS API [deprecated]
fn: ceil
fs: float ceil ( float $value )
fd: 
vi: PHP 4, PHP 5
pt: Mathematical
fn: chdir
fs: bool chdir ( string $directory )
fd: Changes PHP's current directory to directory.
vi: PHP 4, PHP 5
pt: Directory
fn: checkdate
fs: bool checkdate ( int $month , int $day , int $year )
fd: Checks the validity of the date formed by the arguments. A date is considered valid if each parameter is properly defined.
vi: PHP 4, PHP 5
pt: Date and Time
fn: checkdnsrr
fs: int checkdnsrr ( string $host [, string $type ] )
fd: Searches DNS for records of type type corresponding to host.
vi: PHP 4, PHP 5
pt: Network
fn: chgrp
fs: bool chgrp ( string $filename , mixed $group )
fd: Attempts to change the group of the file filename to group. 
vi: PHP 4, PHP 5
pt: Filesystem
fn: chmod
fs: bool chmod ( string $filename , int $mode )
fd: Attempts to change the mode of the specified file to that given in mode.
vi: PHP 4, PHP 5
pt: Filesystem
fn: chop
fs: 
fd: 
vi: PHP 4, PHP 5
pt: String
fn: chown
fs: bool chown ( string $filename , mixed $user )
fd: Attempts to change the owner of the file filename to user user. Only the superuser may change the owner of a file.
vi: PHP 4, PHP 5
pt: Filesystem
fn: chr
fs: string chr ( int $ascii )
fd: Returns a one-character string containing the character specified by ascii. 
vi: PHP 4, PHP 5
pt: String
fn: chroot
fs: bool chroot ( string $directory )
fd: Changes the root directory of the current process to directory. 
vi: PHP 4 >= 4.0.5, PHP 5
pt: Directory
fn: chunk_split
fs: string chunk_split ( string $body [, int $chunklen [, string $end ]] )
fd: Can be used to split a string into smaller chunks which is useful for e.g.
vi: PHP 4, PHP 5
pt: String
fn: class_exists
fs: bool class_exists ( string $class_name [, bool $autoload ] )
fd: This function checks whether or not the given class has been defined.
vi: PHP 4, PHP 5
pt: Class/Object
fn: class_implements
fs: array class_implements ( mixed $class [, bool $autoload ] )
fd: This function returns an array with the names of the interfaces that the given class and its parents implement.
vi: PHP 5
pt: Standard PHP Library (SPL)
fn: class_parents
fs: array class_parents ( mixed $class [, bool $autoload ] )
fd: This function returns an array with the name of the parent classes of the given class.
vi: PHP 5
pt: Standard PHP Library (SPL)
fn: classkit_import
fs: array classkit_import ( string $filename )
fd: 
vi: PECL classkit:0.3-0.4 runkit:0.7-0.9
pt: Classkit
fn: classkit_method_add
fs: bool classkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags ] )
fd: 
vi: PECL classkit:0.1-0.4 runkit:0.7-0.9
pt: Classkit
fn: classkit_method_copy
fs: bool classkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )
fd: 
vi: PECL classkit:0.2-0.4 runkit:0.7-0.9
pt: Classkit
fn: classkit_method_redefine
fs: bool classkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags ] )
fd: 
vi: PECL classkit:0.1-0.4 runkit:0.7-0.9
pt: Classkit
fn: classkit_method_remove
fs: bool classkit_method_remove ( string $classname , string $methodname )
fd: 
vi: PECL classkit:0.1-0.4 runkit:0.7-0.9
pt: Classkit
fn: classkit_method_rename
fs: bool classkit_method_rename ( string $classname , string $methodname , string $newname )
fd: 
vi: PECL classkit:0.1-0.4 runkit:0.7-0.9
pt: Classkit
fn: clearstatcache
fs: void clearstatcache ( void )
fd: 
vi: PHP 4, PHP 5
pt: Filesystem
fn: closedir
fs: void closedir ( resource $dir_handle )
fd: Closes the directory stream indicated by dir_handle.
vi: PHP 4, PHP 5
pt: Directory
fn: closelog
fs: bool closelog ( void )
fd: closelog() closes the descriptor being used to write to the system logger. The use of closelog() is optional.
vi: PHP 4, PHP 5
pt: Network
fn: com
fs: com COM::COM ( string $module_name [, mixed $server_name [, int $codepage [, string $typelib ]]] )
fd: The COM class allows you to instantiate an OLE compatible COM object and call its methods and access its properties.
vi: 
pt: COM and .Net (Windows)
fn: com_addref
fs: 
fd: 
vi: PHP 4 >= 4.0.7
pt: COM and .Net (Windows)
fn: com_create_guid
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: com_event_sink
fs: 
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: COM and .Net (Windows)
fn: com_get
fs: 
fd: 
vi: PHP 4
pt: COM and .Net (Windows)
fn: com_get_active_object
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: com_invoke
fs: 
fd: 
vi: PHP 4
pt: COM and .Net (Windows)
fn: com_isenum
fs: 
fd: 
vi: PHP 4 >= 4.0.7
pt: COM and .Net (Windows)
fn: com_load
fs: 
fd: 
vi: PHP 4
pt: COM and .Net (Windows)
fn: com_load_typelib
fs: 
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: COM and .Net (Windows)
fn: com_message_pump
fs: 
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: COM and .Net (Windows)
fn: com_print_typeinfo
fs: 
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: COM and .Net (Windows)
fn: com_propget
fs: 
fd: 
vi: PHP 4
pt: COM and .Net (Windows)
fn: com_propput
fs: 
fd: 
vi: PHP 4
pt: COM and .Net (Windows)
fn: com_propset
fs: 
fd: 
vi: PHP 4
pt: COM and .Net (Windows)
fn: com_release
fs: 
fd: 
vi: PHP 4 >= 4.0.7
pt: COM and .Net (Windows)
fn: com_set
fs: 
fd: 
vi: PHP 4
pt: COM and .Net (Windows)
fn: compact
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: connection_aborted
fs: int connection_aborted ( void )
fd: Checks whether the client disconnected.
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: connection_status
fs: int connection_status ( void )
fd: Gets the connection status bitfield.
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: connection_timeout
fs: int connection_timeout ( void )
fd: Determines whether the script timed out.
vi: PHP 4 <= 4.0.4
pt: Miscellaneous
fn: constant
fs: mixed constant ( string $name )
fd: 
vi: PHP 4 >= 4.0.4, PHP 5
pt: Miscellaneous
fn: convert_cyr_string
fs: string convert_cyr_string ( string $str , string $from , string $to )
fd: Converts from one Cyrillic character set to another.
vi: PHP 4, PHP 5
pt: String
fn: convert_uudecode
fs: string convert_uudecode ( string $data )
fd: convert_uudecode() decodes a uuencoded string.
vi: PHP 5
pt: String
fn: convert_uuencode
fs: string convert_uuencode ( string $data )
fd: convert_uuencode() encodes a string using the uuencode algorithm. 
vi: PHP 5
pt: String
fn: copy
fs: bool copy ( string $source , string $dest [, resource $context ] )
fd: Makes a copy of the file source to dest. 
vi: PHP 4, PHP 5
pt: Filesystem
fn: cos
fs: float cos ( float $arg )
fd: cos() returns the cosine of the arg parameter. The arg parameter is in radians.
vi: PHP 4, PHP 5
pt: Mathematical
fn: cosh
fs: float cosh ( float $arg )
fd: Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg))/2.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Mathematical
fn: count
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: count_chars
fs: mixed count_chars ( string $string [, int $mode ] )
fd: Counts the number of occurrences of every byte-value (0..255) in string and returns it in various ways.
vi: PHP 4, PHP 5
pt: String
fn: cpdf_add_annotation
fs: bool cpdf_add_annotation ( int $pdf_document , float $llx , float $lly , float $urx , float $ury , string $title , string $content [, int $mode ] )
fd: Adds a note at the specified point.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_add_outline
fs: int cpdf_add_outline ( int $pdf_document , int $lastoutline , int $sublevel , int $open , int $pagenr , string $text )
fd: Adds a bookmark with text text that points to the current page.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_arc
fs: bool cpdf_arc ( int $pdf_document , float $x_coor , float $y_coor , float $radius , float $start , float $end [, int $mode ] )
fd: Draws an arc.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_begin_text
fs: bool cpdf_begin_text ( int $pdf_document )
fd: Starts a text section. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_circle
fs: bool cpdf_circle ( int $pdf_document , float $x_coor , float $y_coor , float $radius [, int $mode ] )
fd: Draws a circle.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_clip
fs: bool cpdf_clip ( int $pdf_document )
fd: Clips all drawing to the current path.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_close
fs: bool cpdf_close ( int $pdf_document )
fd: Closes the PDF document. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_closepath
fs: bool cpdf_closepath ( int $pdf_document )
fd: Closes the current path.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_closepath_fill_stroke
fs: bool cpdf_closepath_fill_stroke ( int $pdf_document )
fd: Closes, fills the interior of the current path with the current fill color and draws current path.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_closepath_stroke
fs: bool cpdf_closepath_stroke ( int $pdf_document )
fd: Closes the current path and draws a line along it. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_continue_text
fs: bool cpdf_continue_text ( int $pdf_document , string $text )
fd: Outputs the string in text in the next line.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_curveto
fs: bool cpdf_curveto ( int $pdf_document , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 [, int $mode ] )
fd: Draws a Bezier curve from the current point to the point (x3, y3) using (x1, y1) and (x2, y2) as control points.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_end_text
fs: bool cpdf_end_text ( int $pdf_document )
fd: 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_fill
fs: bool cpdf_fill ( int $pdf_document )
fd: Fills the interior of the current path with the current fill color.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_fill_stroke
fs: bool cpdf_fill_stroke ( int $pdf_document )
fd: Fills the interior of the current path with the current fill color and draws current path.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_finalize
fs: bool cpdf_finalize ( int $pdf_document )
fd: Ends the PDF document. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_finalize_page
fs: bool cpdf_finalize_page ( int $pdf_document , int $page_number )
fd: Ends the page which number is page_number. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_global_set_document_limits
fs: bool cpdf_global_set_document_limits ( int $maxpages , int $maxfonts , int $maximages , int $maxannotations , int $maxobjects )
fd: Sets several document limits.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_import_jpeg
fs: bool cpdf_import_jpeg ( int $pdf_document , string $file_name , float $x_coor , float $y_coor , float $angle , float $width , float $height , float $x_scale , float $y_scale , int $gsave [, int $mode ] )
fd: Opens a JPEG image.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_lineto
fs: bool cpdf_lineto ( int $pdf_document , float $x_coor , float $y_coor [, int $mode ] )
fd: The cpdf_lineto() function draws a line from the current point to the specified point.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_moveto
fs: bool cpdf_moveto ( int $pdf_document , float $x_coor , float $y_coor [, int $mode ] )
fd: Sets the current point to the given coordinates.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_newpath
fs: bool cpdf_newpath ( int $pdf_document )
fd: Starts a new path on the document.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_open
fs: int cpdf_open ( int $compression [, string $filename [, array $doc_limits ]] )
fd: Opens a new PDF document.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_output_buffer
fs: bool cpdf_output_buffer ( int $pdf_document )
fd: Outputs the pdf document to stdout. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_page_init
fs: bool cpdf_page_init ( int $pdf_document , int $page_number , int $orientation , float $height , float $width [, float $unit ] )
fd: Starts a new page.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_place_inline_image
fs: bool cpdf_place_inline_image ( int $pdf_document , int $image , float $x_coor , float $y_coor , float $angle , float $width , float $height , int $gsave [, int $mode ] )
fd: Places an image created with the PHP image functions on the page. The image can be scaled at the same time. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_rect
fs: bool cpdf_rect ( int $pdf_document , float $x_coor , float $y_coor , float $width , float $height [, int $mode ] )
fd: Draws a rectangle.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_restore
fs: bool cpdf_restore ( int $pdf_document )
fd: 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_rlineto
fs: bool cpdf_rlineto ( int $pdf_document , float $x_coor , float $y_coor [, int $mode ] )
fd: The cpdf_rlineto() function draws a line from the current point to the given relative point.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_rmoveto
fs: bool cpdf_rmoveto ( int $pdf_document , float $x_coor , float $y_coor [, int $mode ] )
fd: Set the current point relative to the given coordinates.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_rotate
fs: bool cpdf_rotate ( int $pdf_document , float $angle )
fd: Sets the rotation in degrees to angle.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_rotate_text
fs: bool cpdf_rotate_text ( int $pdfdoc , float $angle )
fd: 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_save
fs: bool cpdf_save ( int $pdf_document )
fd: Saves the current environment. It works like the postscript command gsave. Very useful if you want to translate or rotate an object without effecting other objects.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_save_to_file
fs: bool cpdf_save_to_file ( int $pdf_document , string $filename )
fd: Outputs the PDF document into a file if it has been created in memory. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_scale
fs: bool cpdf_scale ( int $pdf_document , float $x_scale , float $y_scale )
fd: Sets the scaling factor in both directions.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_action_url
fs: bool cpdf_set_action_url ( int $pdfdoc , float $xll , float $yll , float $xur , float $xur , string $url [, int $mode ] )
fd: 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_char_spacing
fs: bool cpdf_set_char_spacing ( int $pdf_document , float $space )
fd: Sets the spacing between characters.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_creator
fs: bool cpdf_set_creator ( int $pdf_document , string $creator )
fd: Sets the creator of a PDF document.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_current_page
fs: bool cpdf_set_current_page ( int $pdf_document , int $page_number )
fd: Sets the page on which all operations are performed.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_font
fs: bool cpdf_set_font ( int $pdf_document , string $font_name , float $size , string $encoding )
fd: Sets the current font face, font size and encoding.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_font_directories
fs: bool cpdf_set_font_directories ( int $pdfdoc , string $pfmdir , string $pfbdir )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_font_map_file
fs: bool cpdf_set_font_map_file ( int $pdfdoc , string $filename )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_horiz_scaling
fs: bool cpdf_set_horiz_scaling ( int $pdf_document , float $scale )
fd: Sets the horizontal scaling to scale percent.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_keywords
fs: bool cpdf_set_keywords ( int $pdf_document , string $keywords )
fd: Sets the keywords of the PDF document.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_leading
fs: bool cpdf_set_leading ( int $pdf_document , float $distance )
fd: Sets the distance between text lines.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_page_animation
fs: bool cpdf_set_page_animation ( int $pdf_document , int $transition , float $duration , float $direction , int $orientation , int $inout )
fd: Sets the transition between following pages.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_subject
fs: bool cpdf_set_subject ( int $pdf_document , string $subject )
fd: Sets the subject of the PDF document.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_text_matrix
fs: bool cpdf_set_text_matrix ( int $pdf_document , array $matrix )
fd: Sets a matrix which describes a transformation applied on the current text font.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_text_pos
fs: bool cpdf_set_text_pos ( int $pdf_document , float $x_coor , float $y_coor [, int $mode ] )
fd: 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_text_rendering
fs: bool cpdf_set_text_rendering ( int $pdf_document , int $rendermode )
fd: Determines how the text is rendered.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_text_rise
fs: bool cpdf_set_text_rise ( int $pdf_document , float $value )
fd: Sets the text rising to value units.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_title
fs: bool cpdf_set_title ( int $pdf_document , string $title )
fd: Sets the title of a PDF document.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_viewer_preferences
fs: bool cpdf_set_viewer_preferences ( int $pdfdoc , array $preferences )
fd: 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_set_word_spacing
fs: bool cpdf_set_word_spacing ( int $pdf_document , float $space )
fd: Sets the spacing between words.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setdash
fs: bool cpdf_setdash ( int $pdf_document , float $white , float $black )
fd: Sets the dash pattern to the given one. If both parameters are 0, a solid line is set.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setflat
fs: bool cpdf_setflat ( int $pdf_document , float $value )
fd: Sets the flatness.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setgray
fs: bool cpdf_setgray ( int $pdf_document , float $gray_value )
fd: Sets the current drawing and filling color to the given gray value.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setgray_fill
fs: bool cpdf_setgray_fill ( int $pdf_document , float $value )
fd: Sets the current gray value to fill a path.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setgray_stroke
fs: bool cpdf_setgray_stroke ( int $pdf_document , float $gray_value )
fd: Sets the current drawing color to the given gray value.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setlinecap
fs: bool cpdf_setlinecap ( int $pdf_document , int $value )
fd: Sets the linecap parameter.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setlinejoin
fs: bool cpdf_setlinejoin ( int $pdf_document , int $value )
fd: Set the linejoin parameter.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setlinewidth
fs: bool cpdf_setlinewidth ( int $pdf_document , float $width )
fd: Set the line width.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setmiterlimit
fs: bool cpdf_setmiterlimit ( int $pdf_document , float $value )
fd: Sets the miter limit.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setrgbcolor
fs: bool cpdf_setrgbcolor ( int $pdf_document , float $red_value , float $green_value , float $blue_value )
fd: Sets the current drawing and filling color to the given rgb color value.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setrgbcolor_fill
fs: bool cpdf_setrgbcolor_fill ( int $pdf_document , float $red_value , float $green_value , float $blue_value )
fd: Sets the current rgb color value to fill a path.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_setrgbcolor_stroke
fs: bool cpdf_setrgbcolor_stroke ( int $pdf_document , float $red_value , float $green_value , float $blue_value )
fd: Sets the current drawing color to the given rgb color value.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_show
fs: bool cpdf_show ( int $pdf_document , string $text )
fd: Outputs a text at the current position.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_show_xy
fs: bool cpdf_show_xy ( int $pdf_document , string $text , float $x_coor , float $y_coor [, int $mode ] )
fd: Outputs the string text at the given position. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_stringwidth
fs: float cpdf_stringwidth ( int $pdf_document , string $text )
fd: Returns the width of the string in text. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_stroke
fs: bool cpdf_stroke ( int $pdf_document )
fd: Draws a line along current path.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_text
fs: bool cpdf_text ( int $pdf_document , string $text [, float $x_coor ], float $y_coor [, int $mode [, float $orientation [, int $alignmode ]]] )
fd: Outputs the string text at the given position.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: cpdf_translate
fs: bool cpdf_translate ( int $pdf_document , float $x_coor , float $y_coor )
fd: Sets the origin of coordinate system to the specified point.
vi: PHP 4, PHP 5 <= 5.0.5
pt: ClibPDF [deprecated]
fn: crack_check
fs: bool crack_check ( resource $dictionary , string $password )
fd: 
vi: PHP 4 >= 4.0.5, PECL crack:0.1-0.4
pt: Crack
fn: crack_closedict
fs: bool crack_closedict ([ resource $dictionary ] )
fd: crack_closedict() closes the specified dictionary identifier.
vi: PHP 4 >= 4.0.5, PECL crack:0.1-0.4
pt: Crack
fn: crack_getlastmessage
fs: string crack_getlastmessage ( void )
fd: crack_getlastmessage() returns the message from the last obscure check.
vi: PHP 4 >= 4.0.5, PECL crack:0.1-0.4
pt: Crack
fn: crack_opendict
fs: resource crack_opendict ( string $dictionary )
fd: 
vi: PHP 4 >= 4.0.5, PECL crack:0.1-0.4
pt: Crack
fn: crc32
fs: int crc32 ( string $str )
fd: Generates the cyclic redundancy checksum polynomial of 32-bit lengths of the str. This is usually used to validate the integrity of data being transmitted. 
vi: PHP 4 >= 4.0.1, PHP 5
pt: String
fn: create_function
fs: string create_function ( string $args , string $code )
fd: Creates an anonymous function from the parameters passed, and returns a unique name for it.
vi: PHP 4 >= 4.0.1, PHP 5
pt: Function Handling
fn: crypt
fs: string crypt ( string $str [, string $salt ] )
fd: 
vi: PHP 4, PHP 5
pt: String
fn: ctype_alnum
fs: bool ctype_alnum ( string $text )
fd: Checks if all of the characters in the provided string, text, are alphanumeric. In the standard C locale letters are just [A-Za-z].
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: ctype_alpha
fs: bool ctype_alpha ( string $text )
fd: Checks if all of the characters in the provided string, text, are alphabetic. In the standard C locale letters are just [A-Za-z] and ctype_alpha() is equivalent to (ctype_upper($text) || ctype_lower($text)) if $text is just a single character, but other languages have letters that are considered neither upper nor lower case.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: ctype_cntrl
fs: bool ctype_cntrl ( string $text )
fd: Checks if all of the characters in the provided string, text, are control characters. Control characters are e.g. line feed, tab, escape.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: ctype_digit
fs: bool ctype_digit ( string $text )
fd: Checks if all of the characters in the provided string, text, are numerical.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: ctype_graph
fs: bool ctype_graph ( string $text )
fd: Checks if all of the characters in the provided string, text, creates visible output.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: ctype_lower
fs: bool ctype_lower ( string $text )
fd: Checks if all of the characters in the provided string, text, are lowercase letters.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: ctype_print
fs: bool ctype_print ( string $text )
fd: Checks if all of the characters in the provided string, text, are printable.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: ctype_punct
fs: bool ctype_punct ( string $text )
fd: Checks if all of the characters in the provided string, text, are punctuation character.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: ctype_space
fs: bool ctype_space ( string $text )
fd: Checks if all of the characters in the provided string, text, creates whitespace.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: ctype_upper
fs: bool ctype_upper ( string $text )
fd: Checks if all of the characters in the provided string, text, are uppercase characters.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: ctype_xdigit
fs: bool ctype_xdigit ( string $text )
fd: Checks if all of the characters in the provided string, text, are hexadecimal 'digits'.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Character Type
fn: curl_close
fs: void curl_close ( resource $ch )
fd: Closes a cURL session and frees all resources. The cURL handle, ch, is also deleted.
vi: PHP 4 >= 4.0.2, PHP 5
pt: CURL, Client URL Library
fn: curl_copy_handle
fs: resource curl_copy_handle ( resource $ch )
fd: Copies a cURL handle keeping the same preferences.
vi: PHP 5
pt: CURL, Client URL Library
fn: curl_errno
fs: int curl_errno ( resource $ch )
fd: Returns the error number for the last cURL operation.
vi: PHP 4 >= 4.0.3, PHP 5
pt: CURL, Client URL Library
fn: curl_error
fs: string curl_error ( resource $ch )
fd: Returns a clear text error message for the last cURL operation.
vi: PHP 4 >= 4.0.3, PHP 5
pt: CURL, Client URL Library
fn: curl_exec
fs: mixed curl_exec ( resource $ch )
fd: Execute the given cURL session. 
vi: PHP 4 >= 4.0.2, PHP 5
pt: CURL, Client URL Library
fn: curl_getinfo
fs: mixed curl_getinfo ( resource $ch [, int $opt ] )
fd: Gets information about the last transfer,
vi: PHP 4 >= 4.0.4, PHP 5
pt: CURL, Client URL Library
fn: curl_init
fs: resource curl_init ([ string $url ] )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: CURL, Client URL Library
fn: curl_multi_add_handle
fs: int curl_multi_add_handle ( resource $mh , resource $ch )
fd: Adds the ch handle to the multi handle mh
vi: PHP 5
pt: CURL, Client URL Library
fn: curl_multi_close
fs: void curl_multi_close ( resource $mh )
fd: Closes a set of cURL handles.
vi: PHP 5
pt: CURL, Client URL Library
fn: curl_multi_exec
fs: int curl_multi_exec ( resource $mh , int &$still_running )
fd: Processes each of the handles in the stack. This method can be called whether or not a handle needs to read or write data.
vi: PHP 5
pt: CURL, Client URL Library
fn: curl_multi_getcontent
fs: string curl_multi_getcontent ( resource $ch )
fd: If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, then this function will return the content of that cURL handle in the form of a string.
vi: PHP 5
pt: CURL, Client URL Library
fn: curl_multi_info_read
fs: array curl_multi_info_read ( resource $mh [, int $msgs_in_queue ] )
fd: Ask the multi handle if there are any messages/informationals from the individual transfers. Messages may include informationals such as an error code from the transfer or just the fact that a transfer is completed. 
vi: PHP 5
pt: CURL, Client URL Library
fn: curl_multi_init
fs: resource curl_multi_init ( void )
fd: Allows the processing of multiple cURL handles in parallel.
vi: PHP 5
pt: CURL, Client URL Library
fn: curl_multi_remove_handle
fs: int curl_multi_remove_handle ( resource $mh , resource $ch )
fd: Removes a given ch handle from the given mh handle.
vi: PHP 5
pt: CURL, Client URL Library
fn: curl_multi_select
fs: int curl_multi_select ( resource $mh [, float $timeout ] )
fd: Get all the sockets associated with the cURL extension, which can then be selected.
vi: PHP 5
pt: CURL, Client URL Library
fn: curl_setopt
fs: bool curl_setopt ( resource $ch , int $option , mixed $value )
fd: Sets an option on the given cURL session handle.
vi: PHP 4 >= 4.0.2, PHP 5
pt: CURL, Client URL Library
fn: curl_setopt_array
fs: bool curl_setopt_array ( resource $ch , array $options )
fd: Sets multiple options for a cURL session.
vi: PHP 5 >= 5.1.3
pt: CURL, Client URL Library
fn: curl_version
fs: array curl_version ([ int $age ] )
fd: Returns information about the cURL version.
vi: PHP 4 >= 4.0.2, PHP 5
pt: CURL, Client URL Library
fn: current
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: cybercash_base64_decode
fs: string cybercash_base64_decode ( string $inbuff )
fd: 
vi: PHP 4 <= 4.2.3, PECL cybercash:1.18
pt: Cybercash Payment
fn: cybercash_base64_encode
fs: string cybercash_base64_encode ( string $inbuff )
fd: 
vi: PHP 4 <= 4.2.3, PECL cybercash:1.18
pt: Cybercash Payment
fn: cybercash_decr
fs: array cybercash_decr ( string $wmk , string $sk , string $inbuff )
fd: Decrypts information.
vi: PHP 4 <= 4.2.3, PECL cybercash:1.18
pt: Cybercash Payment
fn: cybercash_encr
fs: array cybercash_encr ( string $wmk , string $sk , string $inbuff )
fd: Encrypts information.
vi: PHP 4 <= 4.2.3, PECL cybercash:1.18
pt: Cybercash Payment
fn: cybermut_creerformulairecm
fs: string cybermut_creerformulairecm ( string $url_cm , string $version , string $tpe , string $price , string $ref_command , string $text_free , string $url_return , string $url_return_ok , string $url_return_err , string $language , string $code_company , string $text_button )
fd: cybermut_creerformulairecm() is used to generate the HTML form of request for payment.
vi: PHP 4 >= 4.0.5, PECL cybermut:1.0-1.1
pt: Credit Mutuel CyberMUT functions
fn: cybermut_creerreponsecm
fs: string cybermut_creerreponsecm ( string $sentence )
fd: 
vi: PHP 4 >= 4.0.5, PECL cybermut:1.0-1.1
pt: Credit Mutuel CyberMUT functions
fn: cybermut_testmac
fs: bool cybermut_testmac ( string $code_mac , string $version , string $tpe , string $cdate , string $price , string $ref_command , string $text_free , string $code_return )
fd: cybermut_testmac() is used to make sure that there was no data diddling contained in the received message of confirmation. Pay attention to parameters code_return and text_free, which cannot be evaluated as is, because of the dash.
vi: PHP 4 >= 4.0.5, PECL cybermut:1.0-1.1
pt: Credit Mutuel CyberMUT functions
fn: cyrus_authenticate
fs: void cyrus_authenticate ( resource $connection [, string $mechlist [, string $service [, string $user [, int $minssf [, int $maxssf [, string $authname [, string $password ]]]]]]] )
fd: 
vi: PHP 4 >= 4.0.7, PECL cyrus:1.0
pt: Cyrus IMAP administration
fn: cyrus_bind
fs: bool cyrus_bind ( resource $connection , array $callbacks )
fd: 
vi: PHP 4 >= 4.0.7, PECL cyrus:1.0
pt: Cyrus IMAP administration
fn: cyrus_close
fs: bool cyrus_close ( resource $connection )
fd: 
vi: PHP 4 >= 4.0.7, PECL cyrus:1.0
pt: Cyrus IMAP administration
fn: cyrus_connect
fs: resource cyrus_connect ([ string $host [, string $port [, int $flags ]]] )
fd: 
vi: PHP 4 >= 4.0.7, PECL cyrus:1.0
pt: Cyrus IMAP administration
fn: cyrus_query
fs: array cyrus_query ( resource $connection , string $query )
fd: 
vi: PHP 4 >= 4.0.7, PECL cyrus:1.0
pt: Cyrus IMAP administration
fn: cyrus_unbind
fs: bool cyrus_unbind ( resource $connection , string $trigger_name )
fd: 
vi: PHP 4 >= 4.0.7, PECL cyrus:1.0
pt: Cyrus IMAP administration
fn: date
fs: string date ( string $format [, int $timestamp ] )
fd: Returns a string formatted according to the given format string using the given integer timestamp or the current time if no timestamp is given.
vi: PHP 4, PHP 5
pt: Date and Time
fn: date_create
fs: DateTime date_create ([ string $time [, DateTimeZone $timezone ]] )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: date_date_set
fs: void date_date_set ( DateTime $object , int $year , int $month , int $day )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: date_default_timezone_get
fs: string date_default_timezone_get ( void )
fd: This functions returns the default timezone.
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: date_default_timezone_set
fs: bool date_default_timezone_set ( string $timezone_identifier )
fd: date_default_timezone_set() sets the default timezone used by all date/time functions. 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: date_format
fs: string date_format ( DateTime $object , string $format )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: date_isodate_set
fs: void date_isodate_set ( DateTime $object , int $year , int $week [, int $day ] )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: date_modify
fs: void date_modify ( DateTime $object , string $modify )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: date_offset_get
fs: int date_offset_get ( DateTime $object )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: date_parse
fs: array date_parse ( string $date )
fd: 
vi: PHP 5 >= 5.1.3
pt: Date and Time
fn: date_sun_info
fs: array date_sun_info ( int $time , float $latitude , float $longitude )
fd: 
vi: PHP 5 >= 5.1.2
pt: Date and Time
fn: date_sunrise
fs: mixed date_sunrise ( int $timestamp [, int $format [, float $latitude [, float $longitude [, float $zenith [, float $gmt_offset ]]]]] )
fd: date_sunrise() returns the sunrise time for a given day (specified as a timestamp) and location.
vi: PHP 5
pt: Date and Time
fn: date_sunset
fs: mixed date_sunset ( int $timestamp [, int $format [, float $latitude [, float $longitude [, float $zenith [, float $gmt_offset ]]]]] )
fd: date_sunset() returns the sunset time for a given day (specified as a timestamp) and location.
vi: PHP 5
pt: Date and Time
fn: date_time_set
fs: void date_time_set ( DateTime $object , int $hour , int $minute [, int $second ] )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: date_timezone_get
fs: DateTimeZone date_timezone_get ( DateTime $object )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: date_timezone_set
fs: void date_timezone_set ( DateTime $object , DateTimeZone $timezone )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: db2_autocommit
fs: mixed db2_autocommit ( resource $connection [, bool $value ] )
fd: Sets or gets the AUTOCOMMIT behavior of the specified connection resource.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_bind_param
fs: bool db2_bind_param ( resource $stmt , int $parameter-number , string $variable-name [, int $parameter-type [, int $data-type [, int $precision [, int $scale ]]]] )
fd: 
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_client_info
fs: object db2_client_info ( resource $connection )
fd: This function returns an object with read-only properties that return information about the DB2 database client. 
vi: PECL ibm_db2:1.1.1-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_close
fs: bool db2_close ( resource $connection )
fd: 
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_column_privileges
fs: resource db2_column_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] )
fd: Returns a result set listing the columns and associated privileges for a table.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_columns
fs: resource db2_columns ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $column-name ]]]] )
fd: Returns a result set listing the columns and associated metadata for a table.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_commit
fs: bool db2_commit ( resource $connection )
fd: Commits an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so db2_commit() is not necessary unless AUTOCOMMIT has been turned off for the connection resource. 
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_conn_error
fs: string db2_conn_error ([ resource $connection ] )
fd: db2_conn_error() returns an SQLSTATE value representing the reason the last attempt to connect to a database failed.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_conn_errormsg
fs: string db2_conn_errormsg ([ resource $connection ] )
fd: db2_conn_errormsg() returns an error message and SQLCODE value representing the reason the last database connection attempt failed.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_connect
fs: resource db2_connect ( string $database , string $username , string $password [, array $options ] )
fd: Creates a new connection to an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_cursor_type
fs: int db2_cursor_type ( resource $stmt )
fd: Returns the cursor type used by a statement resource. Use this to determine if you are working with a forward-only cursor or scrollable cursor.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_escape_string
fs: string db2_escape_string ( string $string_literal )
fd: Prepends backslashes to special characters in the string argument.
vi: PECL ibm_db2:1.6.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_exec
fs: resource db2_exec ( resource $connection , string $statement [, array $options ] )
fd: Executes an SQL statement directly. 
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_execute
fs: bool db2_execute ( resource $stmt [, array $parameters ] )
fd: 
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_fetch_array
fs: array db2_fetch_array ( resource $stmt [, int $row_number ] )
fd: Returns an array, indexed by column position, representing a row in a result set. The columns are 0-indexed.
vi: PECL ibm_db2:1.0.1-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_fetch_assoc
fs: array db2_fetch_assoc ( resource $stmt [, int $row_number ] )
fd: Returns an array, indexed by column name, representing a row in a result set.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_fetch_both
fs: array db2_fetch_both ( resource $stmt [, int $row_number ] )
fd: Returns an array, indexed by both column name and position, representing a row in a result set.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_fetch_object
fs: object db2_fetch_object ( resource $stmt [, int $row_number ] )
fd: Returns an object in which each property represents a column returned in the row fetched from a result set.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_fetch_row
fs: bool db2_fetch_row ( resource $stmt [, int $row_number ] )
fd: Use db2_fetch_row() to iterate through a result set, or to point to a specific row in a result set if you requested a scrollable cursor. 
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_field_display_size
fs: int db2_field_display_size ( resource $stmt , mixed $column )
fd: Returns the maximum number of bytes required to display a column in a result set.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_field_name
fs: string db2_field_name ( resource $stmt , mixed $column )
fd: Returns the name of the specified column in the result set.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_field_num
fs: int db2_field_num ( resource $stmt , mixed $column )
fd: Returns the position of the named column in a result set.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_field_precision
fs: int db2_field_precision ( resource $stmt , mixed $column )
fd: Returns the precision of the indicated column in a result set.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_field_scale
fs: int db2_field_scale ( resource $stmt , mixed $column )
fd: Returns the scale of the indicated column in a result set.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_field_type
fs: string db2_field_type ( resource $stmt , mixed $column )
fd: Returns the data type of the indicated column in a result set.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_field_width
fs: int db2_field_width ( resource $stmt , mixed $column )
fd: Returns the width of the current value of the indicated column in a result set. This is the maximum width of the column for a fixed-length data type, or the actual width of the column for a variable-length data type.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_foreign_keys
fs: resource db2_foreign_keys ( resource $connection , string $qualifier , string $schema , string $table-name )
fd: Returns a result set listing the foreign keys for a table.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_free_result
fs: bool db2_free_result ( resource $stmt )
fd: Frees the system and database resources that are associated with a result set. These resources are freed implicitly when a script finishes, but you can call db2_free_result() to explicitly free the result set resources before the end of the script.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_free_stmt
fs: bool db2_free_stmt ( resource $stmt )
fd: Frees the system and database resources that are associated with a statement resource. These resources are freed implicitly when a script finishes, but you can call db2_free_stmt() to explicitly free the statement resources before the end of the script.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_get_option
fs: string db2_get_option ( resource $resource , string $option )
fd: Retrieves the value of a specified option value for a statement resource or a connection resource.
vi: PECL ibm_db2:1.6.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_lob_read
fs: string db2_lob_read ( resource $stmt , int $colnum , int $length )
fd: Use db2_lob_read() to iterate through a specified column of a result set and retrieve a user defined size of LOB data.
vi: PECL ibm_db2:1.6.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_next_result
fs: resource db2_next_result ( resource $stmt )
fd: A stored procedure can return zero or more result sets. While you handle the first result set in exactly the same way you would handle the results returned by a simple SELECT statement, to fetch the second and subsequent result sets from a stored procedure you must call the db2_next_result() function and return the result to a uniquely named PHP variable.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_num_fields
fs: int db2_num_fields ( resource $stmt )
fd: Returns the number of fields contained in a result set. This is most useful for handling the result sets returned by dynamically generated queries, or for result sets returned by stored procedures, where your application cannot otherwise know how to retrieve and use the results.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_num_rows
fs: int db2_num_rows ( resource $stmt )
fd: Returns the number of rows deleted, inserted, or updated by an SQL statement. 
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_pconnect
fs: resource db2_pconnect ( string $database , string $username , string $password [, array $options ] )
fd: Returns a persistent connection to an IBM DB2 Universal Database, IBM Cloudscape, or Apache Derby database.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_prepare
fs: resource db2_prepare ( resource $connection , string $statement [, array $options ] )
fd: db2_prepare() creates a prepared SQL statement which can include 0 or more parameter markers (? characters) representing parameters for input, output, or input/output.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_primary_keys
fs: resource db2_primary_keys ( resource $connection , string $qualifier , string $schema , string $table-name )
fd: Returns a result set listing the primary keys for a table.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_procedure_columns
fs: resource db2_procedure_columns ( resource $connection , string $qualifier , string $schema , string $procedure , string $parameter )
fd: Returns a result set listing the parameters for one or more stored procedures.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_procedures
fs: resource db2_procedures ( resource $connection , string $qualifier , string $schema , string $procedure )
fd: Returns a result set listing the stored procedures registered in a database.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_result
fs: mixed db2_result ( resource $stmt , mixed $column )
fd: Use db2_result() to return the value of a specified column in the current row of a result set.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_rollback
fs: bool db2_rollback ( resource $connection )
fd: Rolls back an in-progress transaction on the specified connection resource and begins a new transaction. PHP applications normally default to AUTOCOMMIT mode, so db2_rollback() normally has no effect unless AUTOCOMMIT has been turned off for the connection resource. 
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_server_info
fs: object db2_server_info ( resource $connection )
fd: This function returns an object with read-only properties that return information about the IBM DB2, Cloudscape, or Apache Derby database server. 
vi: PECL ibm_db2:1.1.1-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_set_option
fs: bool db2_set_option ( resource $resource , array $options , int $type )
fd: Sets options for a statement resource or a connection resource. You cannot set options for result set resources.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_special_columns
fs: resource db2_special_columns ( resource $connection , string $qualifier , string $schema , string $table_name , int $scope )
fd: Returns a result set listing the unique row identifier columns for a table.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_statistics
fs: resource db2_statistics ( resource $connection , string $qualifier , string $schema , string $table-name , bool $unique )
fd: Returns a result set listing the index and statistics for a table.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_stmt_error
fs: string db2_stmt_error ([ resource $stmt ] )
fd: Returns a string containing the SQLSTATE value returned by an SQL statement. 
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_stmt_errormsg
fs: string db2_stmt_errormsg ([ resource $stmt ] )
fd: Returns a string containing the last SQL statement error message. 
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_table_privileges
fs: resource db2_table_privileges ( resource $connection [, string $qualifier [, string $schema [, string $table_name ]]] )
fd: Returns a result set listing the tables and associated privileges in a database.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: db2_tables
fs: resource db2_tables ( resource $connection [, string $qualifier [, string $schema [, string $table-name [, string $table-type ]]]] )
fd: Returns a result set listing the tables and associated metadata in a database.
vi: PECL ibm_db2:1.0-1.6.2
pt: IBM DB2, Cloudscape and Apache Derby
fn: dba_close
fs: void dba_close ( resource $handle )
fd: dba_close() closes the established database and frees all resources of the specified database handle.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_delete
fs: bool dba_delete ( string $key , resource $handle )
fd: dba_delete() deletes the specified entry from the database.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_exists
fs: bool dba_exists ( string $key , resource $handle )
fd: dba_exists() checks whether the specified key exists in the database.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_fetch
fs: string dba_fetch ( string $key , resource $handle )
fd: 
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_firstkey
fs: string dba_firstkey ( resource $handle )
fd: dba_firstkey() returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_handlers
fs: array dba_handlers ([ bool $full_info ] )
fd: dba_handlers() list all the handlers supported by this extension.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_insert
fs: bool dba_insert ( string $key , string $value , resource $handle )
fd: dba_insert() inserts the entry described with key and value into the database.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_key_split
fs: mixed dba_key_split ( mixed $key )
fd: dba_key_split() splits a key (string representation) into an array representation.
vi: PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_list
fs: array dba_list ( void )
fd: dba_list() list all open database files.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_nextkey
fs: string dba_nextkey ( resource $handle )
fd: dba_nextkey() returns the next key of the database and advances the internal key pointer.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_open
fs: resource dba_open ( string $path , string $mode [, string $handler [, mixed $... ]] )
fd: dba_open() establishes a database instance for path with mode using handler.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_optimize
fs: bool dba_optimize ( resource $handle )
fd: dba_optimize() optimizes the underlying database.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_popen
fs: resource dba_popen ( string $path , string $mode [, string $handler [, mixed $... ]] )
fd: dba_popen() establishes a persistent database instance for path with mode using handler.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_replace
fs: bool dba_replace ( string $key , string $value , resource $handle )
fd: dba_replace() replaces or inserts the entry described with key and value into the database specified by handle.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dba_sync
fs: bool dba_sync ( resource $handle )
fd: dba_sync() synchronizes the database. This will probably trigger a physical write to the disk, if supported.
vi: PHP 4, PHP 5
pt: Database (dbm-style) Abstraction Layer
fn: dbase_add_record
fs: bool dbase_add_record ( int $dbase_identifier , array $record )
fd: Adds the given data to the database.
vi: PHP 4, PHP 5
pt: dBase
fn: dbase_close
fs: bool dbase_close ( int $dbase_identifier )
fd: Closes the given database link identifier.
vi: PHP 4, PHP 5
pt: dBase
fn: dbase_create
fs: int dbase_create ( string $filename , array $fields )
fd: dbase_create() creates a dBase database with the given definition. 
vi: PHP 4, PHP 5
pt: dBase
fn: dbase_delete_record
fs: bool dbase_delete_record ( int $dbase_identifier , int $record_number )
fd: Marks the given record to be deleted from the database. 
vi: PHP 4, PHP 5
pt: dBase
fn: dbase_get_header_info
fs: array dbase_get_header_info ( int $dbase_identifier )
fd: Returns information on the column structure of the given database link identifier.
vi: PHP 5
pt: dBase
fn: dbase_get_record
fs: array dbase_get_record ( int $dbase_identifier , int $record_number )
fd: Gets a record from a database as an indexed array.
vi: PHP 4, PHP 5
pt: dBase
fn: dbase_get_record_with_names
fs: array dbase_get_record_with_names ( int $dbase_identifier , int $record_number )
fd: Gets a record from a dBase database as an associative array.
vi: PHP 4, PHP 5
pt: dBase
fn: dbase_numfields
fs: int dbase_numfields ( int $dbase_identifier )
fd: Gets the number of fields (columns) in the specified database. 
vi: PHP 4, PHP 5
pt: dBase
fn: dbase_numrecords
fs: int dbase_numrecords ( int $dbase_identifier )
fd: Gets the number of records (rows) in the specified database. 
vi: PHP 4, PHP 5
pt: dBase
fn: dbase_open
fs: int dbase_open ( string $filename , int $mode )
fd: dbase_open() opens a dBase database with the given access mode. 
vi: PHP 4, PHP 5
pt: dBase
fn: dbase_pack
fs: bool dbase_pack ( int $dbase_identifier )
fd: 
vi: PHP 4, PHP 5
pt: dBase
fn: dbase_replace_record
fs: bool dbase_replace_record ( int $dbase_identifier , array $record , int $record_number )
fd: Replaces the given record in the database with the given data.
vi: PHP 4, PHP 5
pt: dBase
fn: dblist
fs: string dblist ( void )
fd: Describes the GDBM version.
vi: PHP 4
pt: DBM [deprecated]
fn: dbmclose
fs: bool dbmclose ( resource $dbm_identifier )
fd: Unlocks and closes the specified database.
vi: PHP 4
pt: DBM [deprecated]
fn: dbmdelete
fs: bool dbmdelete ( resource $dbm_identifier , string $key )
fd: Deletes the value for key in the database.
vi: PHP 4
pt: DBM [deprecated]
fn: dbmexists
fs: bool dbmexists ( resource $dbm_identifier , string $key )
fd: Returns TRUE if there is a value associated with the key.
vi: PHP 4
pt: DBM [deprecated]
fn: dbmfetch
fs: string dbmfetch ( resource $dbm_identifier , string $key )
fd: Gets the value associated with the given key.
vi: PHP 4
pt: DBM [deprecated]
fn: dbmfirstkey
fs: string dbmfirstkey ( resource $dbm_identifier )
fd: Returns the first key in the database. Note that no particular order is guaranteed since the database may be built using a hash-table, which doesn't guarantee any ordering.
vi: PHP 4
pt: DBM [deprecated]
fn: dbminsert
fs: int dbminsert ( resource $dbm_identifier , string $key , string $value )
fd: Adds the value to the database with the specified key.
vi: PHP 4
pt: DBM [deprecated]
fn: dbmnextkey
fs: string dbmnextkey ( resource $dbm_identifier , string $key )
fd: Returns the next key after key.
vi: PHP 4
pt: DBM [deprecated]
fn: dbmopen
fs: resource dbmopen ( string $filename , string $flags )
fd: Opens the specified DBM database in the given mode.
vi: PHP 4
pt: DBM [deprecated]
fn: dbmreplace
fs: int dbmreplace ( resource $dbm_identifier , string $key , string $value )
fd: Replaces the value for the specified key in the database. 
vi: PHP 4
pt: DBM [deprecated]
fn: dbplus_add
fs: int dbplus_add ( resource $relation , array $tuple )
fd: Adds a tuple to a relation.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_aql
fs: resource dbplus_aql ( string $query [, string $server [, string $dbpath ]] )
fd: Executes an AQL query on the given server and dbpath.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_chdir
fs: string dbplus_chdir ([ string $newdir ] )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_close
fs: mixed dbplus_close ( resource $relation )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_curr
fs: int dbplus_curr ( resource $relation , array &$tuple )
fd: Reads the data for the current tuple for the given relation.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_errcode
fs: string dbplus_errcode ([ int $errno ] )
fd: Returns a clear error string for the given error code.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_errno
fs: int dbplus_errno ( void )
fd: Returns the error code returned by the last db++ operation.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_find
fs: int dbplus_find ( resource $relation , array $constraints , mixed $tuple )
fd: Places a constraint on the given relation. 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_first
fs: int dbplus_first ( resource $relation , array &$tuple )
fd: Reads the data for the first tuple for the given relation, makes it the current tuple and pass it back as an associative array in tuple.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_flush
fs: int dbplus_flush ( resource $relation )
fd: Writes all changes applied to relation since the last flush to disk.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_freealllocks
fs: int dbplus_freealllocks ( void )
fd: Frees all tuple locks held by this client.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_freelock
fs: int dbplus_freelock ( resource $relation , string $tuple )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_freerlocks
fs: int dbplus_freerlocks ( resource $relation )
fd: Frees all tuple locks held on the given relation.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_getlock
fs: int dbplus_getlock ( resource $relation , string $tuple )
fd: Requests a write lock on the specified tuple.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_getunique
fs: int dbplus_getunique ( resource $relation , int $uniqueid )
fd: Obtains a number guaranteed to be unique for the given relation and will pass it back in the variable given as uniqueid.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_info
fs: int dbplus_info ( resource $relation , string $key , array &$result )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_last
fs: int dbplus_last ( resource $relation , array &$tuple )
fd: Reads the data for the last tuple for the given relation, makes it the current tuple and pass it back as an associative array in tuple.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_lockrel
fs: int dbplus_lockrel ( resource $relation )
fd: Requests a write lock on the given relation. 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_next
fs: int dbplus_next ( resource $relation , array &$tuple )
fd: Reads the data for the next tuple for the given relation, makes it the current tuple and will pass it back as an associative array in tuple.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_open
fs: resource dbplus_open ( string $name )
fd: Opens the given relation file.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_prev
fs: int dbplus_prev ( resource $relation , array &$tuple )
fd: Reads the data for the previous tuple for the given relation, makes it the current tuple and will pass it back as an associative array in tuple.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_rchperm
fs: int dbplus_rchperm ( resource $relation , int $mask , string $user , string $group )
fd: Changes access permissions as specified by mask, user and group. The values for these are operating system specific.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_rcreate
fs: resource dbplus_rcreate ( string $name , mixed $domlist [, bool $overwrite ] )
fd: Creates a new relation. Any existing relation sharing the same name will be overwritten if the relation is currently not in use and overwrite is set to TRUE.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_rcrtexact
fs: mixed dbplus_rcrtexact ( string $name , resource $relation [, bool $overwrite ] )
fd: dbplus_rcrtexact() will create an exact but empty copy of the given relation under a new name.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_rcrtlike
fs: mixed dbplus_rcrtlike ( string $name , resource $relation [, int $overwrite ] )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_resolve
fs: array dbplus_resolve ( string $relation_name )
fd: dbplus_resolve() will try to resolve the given relation_name and find out internal server id, real hostname and the database path on this host.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_restorepos
fs: int dbplus_restorepos ( resource $relation , array $tuple )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_rkeys
fs: mixed dbplus_rkeys ( resource $relation , mixed $domlist )
fd: dbplus_rkeys() will replace the current primary key for relation with the combination of domains specified by domlist.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_ropen
fs: resource dbplus_ropen ( string $name )
fd: dbplus_ropen() will open the relation file locally for quick access without any client/server overhead.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_rquery
fs: resource dbplus_rquery ( string $query [, string $dbpath ] )
fd: dbplus_rquery() performs a local (raw) AQL query using an AQL interpreter embedded into the db++ client library.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_rrename
fs: int dbplus_rrename ( resource $relation , string $name )
fd: dbplus_rrename() will change the name of relation to name.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_rsecindex
fs: mixed dbplus_rsecindex ( resource $relation , mixed $domlist , int $type )
fd: dbplus_rsecindex() will create a new secondary index for relation with consists of the domains specified by domlist and is of type type
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_runlink
fs: int dbplus_runlink ( resource $relation )
fd: dbplus_unlink() will close and remove the relation.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_rzap
fs: int dbplus_rzap ( resource $relation )
fd: dbplus_rzap() will remove all tuples from relation.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_savepos
fs: int dbplus_savepos ( resource $relation )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_setindex
fs: int dbplus_setindex ( resource $relation , string $idx_name )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_setindexbynumber
fs: int dbplus_setindexbynumber ( resource $relation , int $idx_number )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_sql
fs: resource dbplus_sql ( string $query [, string $server [, string $dbpath ]] )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_tcl
fs: string dbplus_tcl ( int $sid , string $script )
fd: A db++ server will prepare a TCL interpreter for each client connection. This interpreter will enable the server to execute TCL code provided by the client as a sort of stored procedures to improve the performance of database operations by avoiding client/server data transfers and context switches. 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_tremove
fs: int dbplus_tremove ( resource $relation , array $tuple [, array &$current ] )
fd: dbplus_tremove() removes tuple from relation if it perfectly matches a tuple within the relation. current, if given, will contain the data of the new current tuple after calling dbplus_tremove().
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_undo
fs: int dbplus_undo ( resource $relation )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_undoprepare
fs: int dbplus_undoprepare ( resource $relation )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_unlockrel
fs: int dbplus_unlockrel ( resource $relation )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_unselect
fs: int dbplus_unselect ( resource $relation )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_update
fs: int dbplus_update ( resource $relation , array $old , array $new )
fd: dbplus_update() replaces the old tuple with the data from the new one, only if the old completely matches a tuple within relation.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_xlockrel
fs: int dbplus_xlockrel ( resource $relation )
fd: Request an exclusive lock on relation preventing even read access from other clients.
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbplus_xunlockrel
fs: int dbplus_xunlockrel ( resource $relation )
fd: 
vi: PHP 4 >= 4.0.7, PECL dbplus:0.9
pt: DB++
fn: dbx_close
fs: int dbx_close ( object $link_identifier )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL dbx:1.1.0
pt: dbx
fn: dbx_compare
fs: int dbx_compare ( array $row_a , array $row_b , string $column_key [, int $flags ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5 <= 5.0.5, PECL dbx:1.1.0
pt: dbx
fn: dbx_connect
fs: object dbx_connect ( mixed $module , string $host , string $database , string $username , string $password [, int $persistent ] )
fd: Opens a connection to a database.
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL dbx:1.1.0
pt: dbx
fn: dbx_error
fs: string dbx_error ( object $link_identifier )
fd: dbx_error() returns the last error message.
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL dbx:1.1.0
pt: dbx
fn: dbx_escape_string
fs: string dbx_escape_string ( object $link_identifier , string $text )
fd: Escape the given string so that it can safely be used in an sql-statement.
vi: PHP 4 >= 4.3.0, PHP 5 <= 5.0.5, PECL dbx:1.1.0
pt: dbx
fn: dbx_fetch_row
fs: mixed dbx_fetch_row ( object $result_identifier )
fd: dbx_fetch_row() fetches rows from a result identifier that had the DBX_RESULT_UNBUFFERED flag set. 
vi: PHP 5 <= 5.0.5, PECL dbx:1.1.0
pt: dbx
fn: dbx_query
fs: mixed dbx_query ( object $link_identifier , string $sql_statement [, int $flags ] )
fd: Sends a query and fetch all results.
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL dbx:1.1.0
pt: dbx
fn: dbx_sort
fs: bool dbx_sort ( object $result , string $user_compare_function )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL dbx:1.1.0
pt: dbx
fn: dcgettext
fs: string dcgettext ( string $domain , string $message , int $category )
fd: This function allows you to override the current domain for a single message lookup.
vi: PHP 4, PHP 5
pt: Gettext
fn: dcngettext
fs: string dcngettext ( string $domain , string $msgid1 , string $msgid2 , int $n , int $category )
fd: This function allows you to override the current domain for a single plural message lookup.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Gettext
fn: deaggregate
fs: void deaggregate ( object $object [, string $class_name ] )
fd: Removes the methods and properties from classes that were aggregated to an object.
vi: PHP 4 >= 4.2.0
pt: Object Aggregation/Composition
fn: debug_backtrace
fs: array debug_backtrace ( void )
fd: debug_backtrace() generates a PHP backtrace.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Error Handling and Logging
fn: debug_print_backtrace
fs: void debug_print_backtrace ( void )
fd: debug_print_backtrace() prints a PHP backtrace.
vi: PHP 5
pt: Error Handling and Logging
fn: debug_zval_dump
fs: void debug_zval_dump ( mixed $variable )
fd: Dumps a string representation of an internal zend value to output.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Variable Handling
fn: debugger_off
fs: int debugger_off ( void )
fd: Disable internal PHP debugger.
vi: 
pt: Network
fn: debugger_on
fs: int debugger_on ( string $address )
fd: Enables the internal PHP debugger, connecting it to address.
vi: 
pt: Network
fn: decbin
fs: string decbin ( int $number )
fd: Returns a string containing a binary representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to a string of 32 1's.
vi: PHP 4, PHP 5
pt: Mathematical
fn: dechex
fs: string dechex ( int $number )
fd: Returns a string containing a hexadecimal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to ffffffff.
vi: PHP 4, PHP 5
pt: Mathematical
fn: decoct
fs: string decoct ( int $number )
fd: Returns a string containing an octal representation of the given number argument. The largest number that can be converted is 4294967295 in decimal resulting to 37777777777.
vi: PHP 4, PHP 5
pt: Mathematical
fn: define
fs: bool define ( string $name , mixed $value [, bool $case_insensitive ] )
fd: Defines a named constant at runtime.
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: define_syslog_variables
fs: void define_syslog_variables ( void )
fd: Initializes all constants used in the syslog functions.
vi: PHP 4, PHP 5
pt: Network
fn: defined
fs: bool defined ( string $name )
fd: Checks whether the given constant exists and is defined. 
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: deg2rad
fs: float deg2rad ( float $number )
fd: This function converts number from degrees to the radian equivalent.
vi: PHP 4, PHP 5
pt: Mathematical
fn: delete
fs: void delete ( void )
fd: 
vi: PECL zip:1.1.0-1.4.1
pt: Filesystem
fn: dgettext
fs: string dgettext ( string $domain , string $message )
fd: The dgettext() function allows you to override the current domain for a single message lookup.
vi: PHP 4, PHP 5
pt: Gettext
fn: die
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: dio_close
fs: void dio_close ( resource $fd )
fd: The function dio_close() closes the file descriptor fd.
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.0.5
pt: Direct IO
fn: dio_fcntl
fs: mixed dio_fcntl ( resource $fd , int $cmd [, mixed $args ] )
fd: The dio_fcntl() function performs the operation specified by cmd on the file descriptor fd. Some commands require additional arguments args to be supplied. 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.0.5
pt: Direct IO
fn: dio_open
fs: resource dio_open ( string $filename , int $flags [, int $mode ] )
fd: dio_open() opens a file and returns a new file descriptor for it.
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.0.5
pt: Direct IO
fn: dio_read
fs: string dio_read ( resource $fd [, int $len ] )
fd: The function dio_read() reads and returns len bytes from file with descriptor fd.
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.0.5
pt: Direct IO
fn: dio_seek
fs: int dio_seek ( resource $fd , int $pos [, int $whence ] )
fd: The function dio_seek() is used to change the file position of the given file descriptor.
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.0.5
pt: Direct IO
fn: dio_stat
fs: array dio_stat ( resource $fd )
fd: dio_stat() returns information about the given file descriptor.
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.0.5
pt: Direct IO
fn: dio_tcsetattr
fs: bool dio_tcsetattr ( resource $fd , array $options )
fd: dio_tcsetattr() sets the terminal attributes and baud rate of the open fd. 
vi: PHP 4 >= 4.3.0, PHP 5 <= 5.0.5
pt: Direct IO
fn: dio_truncate
fs: bool dio_truncate ( resource $fd , int $offset )
fd: dio_truncate() truncates a file to at most offset bytes in size. 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.0.5
pt: Direct IO
fn: dio_write
fs: int dio_write ( resource $fd , string $data [, int $len ] )
fd: dio_write() writes up to len bytes from data to file fd.
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.0.5
pt: Direct IO
fn: dir
fs: Directory ( string $directory )
fd: Return an instance of the Directory class
vi: PHP 4, PHP 5
pt: Directory
fn: dirname
fs: string dirname ( string $path )
fd: Given a string containing a path to a file, this function will return the name of the directory.
vi: PHP 4, PHP 5
pt: Filesystem
fn: disk_free_space
fs: float disk_free_space ( string $directory )
fd: Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Filesystem
fn: disk_total_space
fs: float disk_total_space ( string $directory )
fd: Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Filesystem
fn: diskfreespace
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Filesystem
fn: dl
fs: int dl ( string $library )
fd: Loads the PHP extension given by the parameter library. 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: dngettext
fs: string dngettext ( string $domain , string $msgid1 , string $msgid2 , int $n )
fd: The dngettext() function allows you to override the current domain for a single plural message lookup.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Gettext
fn: dns_check_record
fs: 
fd: 
vi: PHP 5
pt: Network
fn: dns_get_mx
fs: 
fd: 
vi: PHP 5
pt: Network
fn: dns_get_record
fs: array dns_get_record ( string $hostname [, int $type [, array &$authns ]], array &$addtl )
fd: Fetch DNS Resource Records associated with the given hostname.
vi: PHP 5
pt: Network
fn: dom_domattr_construct
fs: 
fd: 
vi: PHP 5
pt: DOM
fn: dom_domattr_isid
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domcharacterdata_appenddata
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domcharacterdata_deletedata
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domcharacterdata_insertdata
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domcharacterdata_replacedata
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domcharacterdata_substringdata
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domcomment_construct
fs: 
fd: 
vi: PHP 5
pt: DOM
fn: dom_domdocument_construct
fs: 
fd: 
vi: PHP 5
pt: DOM
fn: dom_domdocument_createattribute
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_createattributens
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_createcdatasection
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_createcomment
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_createdocumentfragment
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_createelement
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_createelementns
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_createentityreference
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_createprocessinginstruction
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_createtextnode
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_getelementbyid
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_getelementsbytagname
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_getelementsbytagnamens
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_importnode
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_load
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_loadhtml
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_loadhtmlfile
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_loadxml
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_normalizedocument
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_registernodeclass
fs: 
fd: 
vi: PHP 5 >= 5.2.0
pt: DOM
fn: dom_domdocument_relaxngvalidate
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_relaxngvalidatesource
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_save
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_savehtml
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_savehtmlfile
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_savexml
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_schemavalidate
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_schemavalidatesource
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_validate
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocument_xinclude
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domdocumentfragment_appendxml
fs: 
fd: 
vi: PHP 5 >= 5.1.0
pt: DOM
fn: dom_domelement_construct
fs: 
fd: 
vi: PHP 5
pt: DOM
fn: dom_domelement_getattribute
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_getattributenode
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_getattributenodens
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_getattributens
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_getelementsbytagname
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_getelementsbytagnamens
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_hasattribute
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_hasattributens
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_removeattribute
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_removeattributenode
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_removeattributens
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_setattribute
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_setattributenode
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_setattributenodens
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_setattributens
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_setidattribute
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_setidattributenode
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domelement_setidattributens
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domentityreference_construct
fs: 
fd: 
vi: PHP 5
pt: DOM
fn: dom_domimplementation_construct
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domimplementation_createdocument
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domimplementation_createdocumenttype
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domimplementation_hasfeature
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnamednodemap_getnameditem
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnamednodemap_getnameditemns
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnamednodemap_item
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_appendchild
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_clonenode
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_hasattributes
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_haschildnodes
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_insertbefore
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_isdefaultnamespace
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_issamenode
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_issupported
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_lookupnamespaceuri
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_lookupprefix
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_normalize
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_removechild
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnode_replacechild
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domnodelist_item
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domprocessinginstruction_construct
fs: 
fd: 
vi: PHP 5
pt: DOM
fn: dom_domtext_construct
fs: 
fd: 
vi: PHP 5
pt: DOM
fn: dom_domtext_iswhitespaceinelementcontent
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domtext_splittext
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domxpath_construct
fs: 
fd: 
vi: PHP 5
pt: DOM
fn: dom_domxpath_evaluate
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domxpath_query
fs: 
fd: 
vi: 
pt: DOM
fn: dom_domxpath_registernamespace
fs: 
fd: 
vi: 
pt: DOM
fn: dom_import_simplexml
fs: DOMElement dom_import_simplexml ( SimpleXMLElement $node )
fd: 
vi: PHP 5
pt: DOM
fn: domattribute_name
fs: 
fd: 
vi: 
pt: DOM XML
fn: domattribute_set_value
fs: 
fd: 
vi: 
pt: DOM XML
fn: domattribute_specified
fs: 
fd: 
vi: 
pt: DOM XML
fn: domattribute_value
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_add_root
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_create_attribute
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_create_cdata_section
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_create_comment
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_create_element
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_create_element_ns
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_create_entity_reference
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_create_processing_instruction
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_create_text_node
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_doctype
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_document_element
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_dump_file
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_dump_mem
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_get_element_by_id
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_get_elements_by_tagname
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_html_dump_mem
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocument_xinclude
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocumenttype_entities
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocumenttype_internal_subset
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocumenttype_name
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocumenttype_notations
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocumenttype_public_id
fs: 
fd: 
vi: 
pt: DOM XML
fn: domdocumenttype_system_id
fs: 
fd: 
vi: 
pt: DOM XML
fn: domelement_get_attribute
fs: 
fd: 
vi: 
pt: DOM XML
fn: domelement_get_attribute_node
fs: 
fd: 
vi: 
pt: DOM XML
fn: domelement_get_elements_by_tagname
fs: 
fd: 
vi: 
pt: DOM XML
fn: domelement_has_attribute
fs: 
fd: 
vi: 
pt: DOM XML
fn: domelement_remove_attribute
fs: 
fd: 
vi: 
pt: DOM XML
fn: domelement_set_attribute
fs: 
fd: 
vi: 
pt: DOM XML
fn: domelement_set_attribute_node
fs: 
fd: 
vi: 
pt: DOM XML
fn: domelement_tagname
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_add_namespace
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_append_child
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_append_sibling
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_attributes
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_child_nodes
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_clone_node
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_dump_node
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_first_child
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_get_content
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_has_attributes
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_has_child_nodes
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_insert_before
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_is_blank_node
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_last_child
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_next_sibling
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_node_name
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_node_type
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_node_value
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_owner_document
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_parent_node
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_prefix
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_previous_sibling
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_remove_child
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_replace_child
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_replace_node
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_set_content
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_set_name
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_set_namespace
fs: 
fd: 
vi: 
pt: DOM XML
fn: domnode_unlink_node
fs: 
fd: 
vi: 
pt: DOM XML
fn: domprocessinginstruction_data
fs: 
fd: 
vi: 
pt: DOM XML
fn: domprocessinginstruction_target
fs: 
fd: 
vi: 
pt: DOM XML
fn: domxml_new_doc
fs: DomDocument domxml_new_doc ( string $version )
fd: Creates a new Dom document from scratch and returns it.
vi: PHP 4 >= 4.2.0
pt: DOM XML
fn: domxml_open_file
fs: DomDocument domxml_open_file ( string $filename [, int $mode [, array &$error ]] )
fd: The function parses the XML document in the given file.
vi: PHP 4 >= 4.2.0
pt: DOM XML
fn: domxml_open_mem
fs: DomDocument domxml_open_mem ( string $str [, int $mode [, array &$error ]] )
fd: The function parses the XML document in the given string.
vi: PHP 4 >= 4.2.0
pt: DOM XML
fn: domxml_version
fs: string domxml_version ( void )
fd: Gets the version of the XML library currently used.
vi: PHP 4 >= 4.0.7
pt: DOM XML
fn: domxml_xmltree
fs: DomDocument domxml_xmltree ( string $str )
fd: The function parses the XML document in str and returns a tree PHP objects as the parsed document. 
vi: PHP 4 >= 4.2.0
pt: DOM XML
fn: domxml_xslt_stylesheet
fs: DomXsltStylesheet domxml_xslt_stylesheet ( string $xsl_buf )
fd: Creates a DomXsltStylesheet object from the given XSL buffer.
vi: PHP 4 >= 4.2.0
pt: DOM XML
fn: domxml_xslt_stylesheet_doc
fs: DomXsltStylesheet domxml_xslt_stylesheet_doc ( DomDocument $xsl_doc )
fd: Creates a DomXsltStylesheet object from the given XSL document.
vi: PHP 4 >= 4.2.0
pt: DOM XML
fn: domxml_xslt_stylesheet_file
fs: DomXsltStylesheet domxml_xslt_stylesheet_file ( string $xsl_file )
fd: Creates a DomXsltStylesheet object from the given XSL file.
vi: PHP 4 >= 4.2.0
pt: DOM XML
fn: domxml_xslt_version
fs: int domxml_xslt_version ( void )
fd: Gets the XSLT library version.
vi: PHP 4 >= 4.2.0
pt: DOM XML
fn: domxsltstylesheet_process
fs: 
fd: 
vi: 
pt: DOM XML
fn: domxsltstylesheet_result_dump_file
fs: 
fd: 
vi: 
pt: DOM XML
fn: domxsltstylesheet_result_dump_mem
fs: 
fd: 
vi: 
pt: DOM XML
fn: dotnet
fs: string DOTNET::DOTNET ( string $assembly_name , string $class_name [, int $codepage ] )
fd: The DOTNET class allows you to instantiate a class from a .Net assembly and call its methods and access its properties.
vi: COM and .Net (Windows)
pt: 
fn: dotnet_load
fs: int dotnet_load ( string $assembly_name [, string $datatype_name [, int $codepage ]] )
fd: 
vi: 
pt: .NET
fn: doubleval
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: each
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: easter_date
fs: int easter_date ([ int $year ] )
fd: Returns the Unix timestamp corresponding to midnight on Easter of the given year. 
vi: PHP 4, PHP 5
pt: Calendar
fn: easter_days
fs: int easter_days ([ int $year [, int $method ]] )
fd: Returns the number of days after March 21 on which Easter falls for a given year. If no year is specified, the current year is assumed. 
vi: PHP 4, PHP 5
pt: Calendar
fn: ebcdic2ascii
fs: int ebcdic2ascii ( string $ebcdic_str )
fd: ebcdic2ascii() is an Apache-specific function which is available only on EBCDIC based operating systems (OS/390, BS2000). It translates the EBCDIC encoded string ebcdic_str to its equivalent ASCII representation (binary safe), and returns the result.
vi: 
pt: Apache-specific
fn: echo
fs: void echo ( string $arg1 [, string $... ] )
fd: echo() is not actually a function (it is a language construct), so you are not required to use parentheses with it. echo() (unlike some other language constructs) does not behave like a function, so it cannot always be used in the context of a function. Additionally, if you want to pass more than one parameter to echo(), the parameters must not be enclosed within parentheses. 
vi: PHP 4, PHP 5
pt: String
fn: empty
fs: bool empty ( mixed $var )
fd: Determine whether a variable is considered to be empty.
vi: PHP 4, PHP 5
pt: Variable Handling
fn: enchant_broker_describe
fs: array enchant_broker_describe ( resource $broker )
fd: Enumerates the Enchant providers and tells you some rudimentary information about them. The same info is provided through phpinfo().
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_broker_dict_exists
fs: bool enchant_broker_dict_exists ( resource $broker , string $tag )
fd: Tells if a dictionary exists or not, using a non-empty tags
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_broker_free
fs: bool enchant_broker_free ( resource $broker )
fd: Free a broker resource with all its dictionaries.
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_broker_free_dict
fs: bool enchant_broker_free_dict ( resource $dict )
fd: Free a dictionary resource.
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_broker_get_error
fs: string enchant_broker_get_error ( resource $broker )
fd: Returns the last error which occurred in this broker.
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_broker_init
fs: resource enchant_broker_init ( void )
fd: 
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_broker_list_dicts
fs: mixed enchant_broker_list_dicts ( resource $broker )
fd: Returns a list of available dictionaries with their details.
vi: PECL enchant:1.0.1
pt: enchant
fn: enchant_broker_request_dict
fs: resource enchant_broker_request_dict ( resource $broker , string $tag )
fd: create a new dictionary using tag, the non-empty language tag you wish to request a dictionary for (en_US, de_DE, ...)
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_broker_request_pwl_dict
fs: resource enchant_broker_request_pwl_dict ( resource $broker , string $filename )
fd: creates a dictionary using a PWL file. A PWL file is personal word file one word per line.
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_broker_set_ordering
fs: bool enchant_broker_set_ordering ( resource $broker , string $tag , string $ordering )
fd: Declares a preference of dictionaries to use for the language described/referred to by 'tag'. The ordering is a comma delimited list of provider names. As a special exception, the * tag can be used as a language tag to declare a default ordering for any language that does not explicitly declare an ordering.
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_dict_add_to_personal
fs: void enchant_dict_add_to_personal ( resource $dict , string $word )
fd: Add a word to personal word list of the given dictionary.
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_dict_add_to_session
fs: void enchant_dict_add_to_session ( resource $dict , string $word )
fd: Add a word to the given dictionary. It will be added only for the active spell-checking session.
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_dict_check
fs: bool enchant_dict_check ( resource $dict , string $word )
fd: If the word is correctly spelled return TRUE, otherwise return FALSE
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_dict_describe
fs: mixed enchant_dict_describe ( resource $dict )
fd: Returns the details of the dictionary.
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_dict_get_error
fs: string enchant_dict_get_error ( resource $dict )
fd: Returns the last error of the current spelling-session
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_dict_is_in_session
fs: bool enchant_dict_is_in_session ( resource $dict , string $word )
fd: Tells whether or not a word already exists in the current session.
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_dict_quick_check
fs: bool enchant_dict_quick_check ( resource $dict , string $word [, array &$suggestions ] )
fd: If the word is correctly spelled return TRUE, otherwise return FALSE, if suggestions variable is provided, fill it with spelling alternatives.
vi: PECL enchant:0.2.0-1.0.1
pt: enchant
fn: enchant_dict_store_replacement
fs: void enchant_dict_store_replacement ( resource $dict , string $mis , string $cor )
fd: Add a correction for 'mis' using 'cor'. Notes that you replaced @mis with @cor, so it's possibly more likely that future occurrences of @mis will be replaced with @cor. So it might bump @cor up in the suggestion list.
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: enchant_dict_suggest
fs: array enchant_dict_suggest ( resource $dict , string $word )
fd: 
vi: PECL enchant:0.1-1.0.1
pt: enchant
fn: end
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: ereg
fs: int ereg ( string $pattern , string $string [, array &$regs ] )
fd: 
vi: PHP 4, PHP 5
pt: Regular Expression (POSIX Extended)
fn: ereg_replace
fs: string ereg_replace ( string $pattern , string $replacement , string $string )
fd: 
vi: PHP 4, PHP 5
pt: Regular Expression (POSIX Extended)
fn: eregi
fs: int eregi ( string $pattern , string $string [, array &$regs ] )
fd: 
vi: PHP 4, PHP 5
pt: Regular Expression (POSIX Extended)
fn: eregi_replace
fs: string eregi_replace ( string $pattern , string $replacement , string $string )
fd: 
vi: PHP 4, PHP 5
pt: Regular Expression (POSIX Extended)
fn: error_get_last
fs: array error_get_last ( void )
fd: Gets information about the last error that occured.
vi: PHP 5 >= 5.2.0
pt: Error Handling and Logging
fn: error_log
fs: bool error_log ( string $message [, int $message_type [, string $destination [, string $extra_headers ]]] )
fd: 
vi: PHP 4, PHP 5
pt: Error Handling and Logging
fn: error_reporting
fs: int error_reporting ([ int $level ] )
fd: 
vi: PHP 4, PHP 5
pt: Error Handling and Logging
fn: escapeshellarg
fs: string escapeshellarg ( string $arg )
fd: escapeshellarg() adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument. This function should be used to escape individual arguments to shell functions coming from user input.
vi: PHP 4 >= 4.0.3, PHP 5
pt: Program Execution
fn: escapeshellcmd
fs: string escapeshellcmd ( string $command )
fd: escapeshellcmd() escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands.
vi: PHP 4, PHP 5
pt: Program Execution
fn: eval
fs: mixed eval ( string $code_str )
fd: Evaluates the string given in code_str as PHP code. Among other things, this can be useful for storing code in a database text field for later execution. 
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: exec
fs: string exec ( string $command [, array &$output [, int &$return_var ]] )
fd: exec() executes the given command.
vi: PHP 4, PHP 5
pt: Program Execution
fn: exif_imagetype
fs: int exif_imagetype ( string $filename )
fd: exif_imagetype() reads the first bytes of an image and checks its signature. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Exif
fn: exif_read_data
fs: array exif_read_data ( string $filename [, string $sections [, bool $arrays [, bool $thumbnail ]]] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Exif
fn: exif_tagname
fs: string exif_tagname ( string $index )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Exif
fn: exif_thumbnail
fs: string exif_thumbnail ( string $filename [, int &$width [, int &$height [, int &$imagetype ]]] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Exif
fn: exit
fs: void exit ([ string $status ] )
fd: 
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: exp
fs: float exp ( float $arg )
fd: Returns e raised to the power of arg. 
vi: PHP 4, PHP 5
pt: Mathematical
fn: expect_expectl
fs: int expect_expectl ( resource $expect , array $cases [, array &$match ] )
fd: Waits until the output from a process matches one of the patterns, a specified time period has passed, or an EOF is seen. 
vi: PECL expect:0.1-0.2.2
pt: Expect
fn: expect_popen
fs: resource expect_popen ( string $command )
fd: Execute command via Bourne shell, and open the PTY stream to the process.
vi: PECL expect:0.1-0.2.2
pt: Expect
fn: explode
fs: array explode ( string $delimiter , string $string [, int $limit ] )
fd: Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.
vi: PHP 4, PHP 5
pt: String
fn: expm1
fs: float expm1 ( float $arg )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Mathematical
fn: extension_loaded
fs: bool extension_loaded ( string $name )
fd: Finds out whether the extension is loaded.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: extract
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: ezmlm_hash
fs: int ezmlm_hash ( string $addr )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mail
fn: fam_cancel_monitor
fs: bool fam_cancel_monitor ( resource $fam , resource $fam_monitor )
fd: Terminates monitoring on a resource. 
vi: PHP 5 <= 5.0.5
pt: File Alteration Monitor
fn: fam_close
fs: void fam_close ( resource $fam )
fd: Closes a connection to the FAM service.
vi: PHP 5 <= 5.0.5
pt: File Alteration Monitor
fn: fam_monitor_collection
fs: resource fam_monitor_collection ( resource $fam , string $dirname , int $depth , string $mask )
fd: Requests monitoring for a collection of files within a directory. 
vi: PHP 5 <= 5.0.5
pt: File Alteration Monitor
fn: fam_monitor_directory
fs: resource fam_monitor_directory ( resource $fam , string $dirname )
fd: Requests monitoring for a directory and all contained files. 
vi: PHP 5 <= 5.0.5
pt: File Alteration Monitor
fn: fam_monitor_file
fs: resource fam_monitor_file ( resource $fam , string $filename )
fd: Requests monitoring for a single file. A FAM event will be generated whenever the file status changes (i.e.
vi: PHP 5 <= 5.0.5
pt: File Alteration Monitor
fn: fam_next_event
fs: array fam_next_event ( resource $fam )
fd: Returns the next pending FAM event. 
vi: PHP 5 <= 5.0.5
pt: File Alteration Monitor
fn: fam_open
fs: resource fam_open ([ string $appname ] )
fd: Opens a connection to the FAM service daemon.
vi: PHP 5 <= 5.0.5
pt: File Alteration Monitor
fn: fam_pending
fs: int fam_pending ( resource $fam )
fd: Checks for pending FAM events.
vi: PHP 5 <= 5.0.5
pt: File Alteration Monitor
fn: fam_resume_monitor
fs: bool fam_resume_monitor ( resource $fam , resource $fam_monitor )
fd: 
vi: PHP 5 <= 5.0.5
pt: File Alteration Monitor
fn: fam_suspend_monitor
fs: bool fam_suspend_monitor ( resource $fam , resource $fam_monitor )
fd: fam_suspend_monitor() temporarily suspend monitoring of a resource. 
vi: PHP 5 <= 5.0.5
pt: File Alteration Monitor
fn: fbsql_affected_rows
fs: int fbsql_affected_rows ([ resource $link_identifier ] )
fd: fbsql_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query associated with link_identifier. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_autocommit
fs: bool fbsql_autocommit ( resource $link_identifier [, bool $OnOff ] )
fd: Returns the current autocommit status.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_blob_size
fs: int fbsql_blob_size ( string $blob_handle [, resource $link_identifier ] )
fd: Returns the size of the given BLOB.
vi: PHP 4 >= 4.2.0, PHP 5
pt: FrontBase
fn: fbsql_change_user
fs: bool fbsql_change_user ( string $user , string $password [, string $database [, resource $link_identifier ]] )
fd: fbsql_change_user() changes the logged in user of the specified connection. If the new user and password authorization fails, the current connected user stays active.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_clob_size
fs: int fbsql_clob_size ( string $clob_handle [, resource $link_identifier ] )
fd: Returns the size of the given CLOB.
vi: PHP 4 >= 4.2.0, PHP 5
pt: FrontBase
fn: fbsql_close
fs: bool fbsql_close ([ resource $link_identifier ] )
fd: Closes the connection to the FrontBase server that's associated with the specified link identifier. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_commit
fs: bool fbsql_commit ([ resource $link_identifier ] )
fd: Ends the current transaction by writing all inserts, updates and deletes to the disk and unlocking all row and table locks held by the transaction. This command is only needed if autocommit is set to false.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_connect
fs: resource fbsql_connect ([ string $hostname [, string $username [, string $password ]]] )
fd: fbsql_connect() establishes a connection to a FrontBase server. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_create_blob
fs: string fbsql_create_blob ( string $blob_data [, resource $link_identifier ] )
fd: Creates a BLOB from the given data.
vi: PHP 4 >= 4.2.0, PHP 5
pt: FrontBase
fn: fbsql_create_clob
fs: string fbsql_create_clob ( string $clob_data [, resource $link_identifier ] )
fd: Creates a CLOB from the given data.
vi: PHP 4 >= 4.2.0, PHP 5
pt: FrontBase
fn: fbsql_create_db
fs: bool fbsql_create_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )
fd: Attempts to create a new database on the specied server.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_data_seek
fs: bool fbsql_data_seek ( resource $result , int $row_number )
fd: Moves the internal row pointer of the FrontBase result associated with the specified result identifier to point to the specified row number. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_database
fs: string fbsql_database ( resource $link_identifier [, string $database ] )
fd: Get or set the database name used with the connection.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_database_password
fs: string fbsql_database_password ( resource $link_identifier [, string $database_password ] )
fd: Sets and retrieves the database password used by the connection.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_db_query
fs: resource fbsql_db_query ( string $database , string $query [, resource $link_identifier ] )
fd: Selects a database and executes a query on it.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_db_status
fs: int fbsql_db_status ( string $database_name [, resource $link_identifier ] )
fd: Gets the current status of the specified database.
vi: PHP 4 >= 4.0.7, PHP 5
pt: FrontBase
fn: fbsql_drop_db
fs: bool fbsql_drop_db ( string $database_name [, resource $link_identifier ] )
fd: fbsql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_errno
fs: int fbsql_errno ([ resource $link_identifier ] )
fd: Returns the numerical value of the error message from previous FrontBase operation. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_error
fs: string fbsql_error ([ resource $link_identifier ] )
fd: Returns the error message from previous FrontBase operation. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_fetch_array
fs: array fbsql_fetch_array ( resource $result [, int $result_type ] )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_fetch_assoc
fs: array fbsql_fetch_assoc ( resource $result )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_fetch_field
fs: object fbsql_fetch_field ( resource $result [, int $field_offset ] )
fd: Used in order to obtain information about fields in a certain query result.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_fetch_lengths
fs: array fbsql_fetch_lengths ( resource $result )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_fetch_object
fs: object fbsql_fetch_object ( resource $result )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_fetch_row
fs: array fbsql_fetch_row ( resource $result )
fd: fbsql_fetch_row() fetches one row of data from the result associated with the specified result identifier. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_field_flags
fs: string fbsql_field_flags ( resource $result [, int $field_offset ] )
fd: Gets the flags associated with the specified field in a result.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_field_len
fs: int fbsql_field_len ( resource $result [, int $field_offset ] )
fd: Returns the length of the specified field.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_field_name
fs: string fbsql_field_name ( resource $result [, int $field_index ] )
fd: Returns the name of the specified field index.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_field_seek
fs: bool fbsql_field_seek ( resource $result [, int $field_offset ] )
fd: Seeks to the specified field offset.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_field_table
fs: string fbsql_field_table ( resource $result [, int $field_offset ] )
fd: Returns the name of the table that the specified field is in.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_field_type
fs: string fbsql_field_type ( resource $result [, int $field_offset ] )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_free_result
fs: bool fbsql_free_result ( resource $result )
fd: Frees all memory associated with the given result identifier. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_get_autostart_info
fs: array fbsql_get_autostart_info ([ resource $link_identifier ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: FrontBase
fn: fbsql_hostname
fs: string fbsql_hostname ( resource $link_identifier [, string $host_name ] )
fd: Gets or sets the host name used with a connection.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_insert_id
fs: int fbsql_insert_id ([ resource $link_identifier ] )
fd: Gets the id generated from the previous INSERT operation which created a DEFAULT UNIQUE value. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_list_dbs
fs: resource fbsql_list_dbs ([ resource $link_identifier ] )
fd: Return a result pointer containing the databases available from the current fbsql daemon.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_list_fields
fs: resource fbsql_list_fields ( string $database_name , string $table_name [, resource $link_identifier ] )
fd: Retrieves information about the given table.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_list_tables
fs: resource fbsql_list_tables ( string $database [, resource $link_identifier ] )
fd: Returns a result pointer describing the database.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_next_result
fs: bool fbsql_next_result ( resource $result )
fd: When sending more than one SQL statement to the server or executing a stored procedure with multiple results will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the words from the new result set.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_num_fields
fs: int fbsql_num_fields ( resource $result )
fd: Returns the number of fields in the given result set.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_num_rows
fs: int fbsql_num_rows ( resource $result )
fd: Gets the number of rows in the given result set. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_password
fs: string fbsql_password ( resource $link_identifier [, string $password ] )
fd: Get or set the user password used with a connection.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_pconnect
fs: resource fbsql_pconnect ([ string $hostname [, string $username [, string $password ]]] )
fd: Establishes a persistent connection to a FrontBase server. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_query
fs: resource fbsql_query ( string $query [, resource $link_identifier [, int $batch_size ]] )
fd: Sends a query to the currently active database on the server. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_read_blob
fs: string fbsql_read_blob ( string $blob_handle [, resource $link_identifier ] )
fd: Reads BLOB data from the database. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: FrontBase
fn: fbsql_read_clob
fs: string fbsql_read_clob ( string $clob_handle [, resource $link_identifier ] )
fd: Reads CLOB data from the database. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: FrontBase
fn: fbsql_result
fs: mixed fbsql_result ( resource $result [, int $row [, mixed $field ]] )
fd: Returns the contents of one cell from a FrontBase result set. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_rollback
fs: bool fbsql_rollback ([ resource $link_identifier ] )
fd: Ends the current transaction by rolling back all statements issued since last commit. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_rows_fetched
fs: int fbsql_rows_fetched ( resource $result )
fd: Gets the number of rows affected by the last statement.
vi: PHP 5 >= 5.1.0
pt: FrontBase
fn: fbsql_select_db
fs: bool fbsql_select_db ([ string $database_name [, resource $link_identifier ]] )
fd: Sets the current active database on the given link identifier. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_set_characterset
fs: void fbsql_set_characterset ( resource $link_identifier , int $characterset [, int $in_out_both ] )
fd: 
vi: PHP 5 >= 5.1.0
pt: FrontBase
fn: fbsql_set_lob_mode
fs: bool fbsql_set_lob_mode ( resource $result , int $lob_mode )
fd: Sets the mode for retrieving LOB data from the database. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: FrontBase
fn: fbsql_set_password
fs: bool fbsql_set_password ( resource $link_identifier , string $user , string $password , string $old_password )
fd: Changes the password for the given user.
vi: PHP 5
pt: FrontBase
fn: fbsql_set_transaction
fs: void fbsql_set_transaction ( resource $link_identifier , int $locking , int $isolation )
fd: Sets the transaction locking and isolation.
vi: PHP 4 >= 4.2.0, PHP 5
pt: FrontBase
fn: fbsql_start_db
fs: bool fbsql_start_db ( string $database_name [, resource $link_identifier [, string $database_options ]] )
fd: Start a database on local or remote server.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_stop_db
fs: bool fbsql_stop_db ( string $database_name [, resource $link_identifier ] )
fd: Stops a database on local or remote server.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_table_name
fs: string fbsql_table_name ( resource $result , int $index )
fd: fbsql_table_name() gets the name of the current table in the given result set. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: FrontBase
fn: fbsql_tablename
fs: 
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: FrontBase
fn: fbsql_username
fs: string fbsql_username ( resource $link_identifier [, string $username ] )
fd: Get or set the username used for the connection.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fbsql_warnings
fs: bool fbsql_warnings ([ bool $OnOff ] )
fd: Enables or disables FrontBase warnings.
vi: PHP 4 >= 4.0.6, PHP 5
pt: FrontBase
fn: fclose
fs: bool fclose ( resource $handle )
fd: The file pointed to by handle is closed.
vi: PHP 4, PHP 5
pt: Filesystem
fn: fdf_add_doc_javascript
fs: bool fdf_add_doc_javascript ( resource $fdf_document , string $script_name , string $script_code )
fd: Adds a script to the FDF, which Acrobat then adds to the doc-level scripts of a document, once the FDF is imported into it.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_add_template
fs: bool fdf_add_template ( resource $fdf_document , int $newpage , string $filename , string $template , int $rename )
fd: 
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_close
fs: void fdf_close ( resource $fdf_document )
fd: Closes the FDF document.
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_create
fs: resource fdf_create ( void )
fd: Creates a new FDF document. 
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_enum_values
fs: bool fdf_enum_values ( resource $fdf_document , callback $function [, mixed $userdata ] )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_errno
fs: int fdf_errno ( void )
fd: Gets the error code set by the last FDF function call. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_error
fs: string fdf_error ([ int $error_code ] )
fd: Gets a textual description for the FDF error code given in error_code.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_get_ap
fs: bool fdf_get_ap ( resource $fdf_document , string $field , int $face , string $filename )
fd: Gets the appearance of a field (i.e. the value of the /AP key) and stores it in a file.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_get_attachment
fs: array fdf_get_attachment ( resource $fdf_document , string $fieldname , string $savepath )
fd: Extracts a file uploaded by means of the file selection field fieldname and stores it under savepath.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_get_encoding
fs: string fdf_get_encoding ( resource $fdf_document )
fd: Gets the value of the /Encoding key.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_get_file
fs: string fdf_get_file ( resource $fdf_document )
fd: Gets the value of the /F key.
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_get_flags
fs: int fdf_get_flags ( resource $fdf_document , string $fieldname , int $whichflags )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_get_opt
fs: mixed fdf_get_opt ( resource $fdf_document , string $fieldname [, int $element ] )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_get_status
fs: string fdf_get_status ( resource $fdf_document )
fd: Gets the value of the /STATUS key.
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_get_value
fs: mixed fdf_get_value ( resource $fdf_document , string $fieldname [, int $which ] )
fd: Gets the value for the requested field.
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_get_version
fs: string fdf_get_version ([ resource $fdf_document ] )
fd: Return the FDF version for the given document, or the toolkit API version number if no parameter is given.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_header
fs: void fdf_header ( void )
fd: This is a convenience function to set appropriate HTTP headers for FDF output. It sets the Content-type: to application/vnd.fdf.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_next_field_name
fs: string fdf_next_field_name ( resource $fdf_document [, string $fieldname ] )
fd: Gets the name of the field after the given field. This name can be used with several functions.
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_open
fs: resource fdf_open ( string $filename )
fd: Opens a file with form data. 
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_open_string
fs: resource fdf_open_string ( string $fdf_data )
fd: Reads form data from a string. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_remove_item
fs: bool fdf_remove_item ( resource $fdf_document , string $fieldname , int $item )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_save
fs: bool fdf_save ( resource $fdf_document [, string $filename ] )
fd: Saves a FDF document.
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_save_string
fs: string fdf_save_string ( resource $fdf_document )
fd: Returns the FDF document as a string.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_set_ap
fs: bool fdf_set_ap ( resource $fdf_document , string $field_name , int $face , string $filename , int $page_number )
fd: Sets the appearance of a field (i.e. the value of the /AP key).
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_set_encoding
fs: bool fdf_set_encoding ( resource $fdf_document , string $encoding )
fd: Sets the character encoding for the FDF document.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Forms Data Format
fn: fdf_set_file
fs: bool fdf_set_file ( resource $fdf_document , string $url [, string $target_frame ] )
fd: Selects a different PDF document to display the form results in then the form it originated from.
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_set_flags
fs: bool fdf_set_flags ( resource $fdf_document , string $fieldname , int $whichFlags , int $newFlags )
fd: Sets certain flags of the given field.
vi: PHP 4 >= 4.0.2, PHP 5
pt: Forms Data Format
fn: fdf_set_javascript_action
fs: bool fdf_set_javascript_action ( resource $fdf_document , string $fieldname , int $trigger , string $script )
fd: Sets a javascript action for the given field.
vi: PHP 4 >= 4.0.2, PHP 5
pt: Forms Data Format
fn: fdf_set_on_import_javascript
fs: bool fdf_set_on_import_javascript ( resource $fdf_document , string $script , bool $before_data_import )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_set_opt
fs: bool fdf_set_opt ( resource $fdf_document , string $fieldname , int $element , string $str1 , string $str2 )
fd: Sets options of the given field.
vi: PHP 4 >= 4.0.2, PHP 5
pt: Forms Data Format
fn: fdf_set_status
fs: bool fdf_set_status ( resource $fdf_document , string $status )
fd: Sets the value of the /STATUS key. When a client receives a FDF with a status set it will present the value in an alert box.
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_set_submit_form_action
fs: bool fdf_set_submit_form_action ( resource $fdf_document , string $fieldname , int $trigger , string $script , int $flags )
fd: Sets a submit form action for the given field.
vi: PHP 4 >= 4.0.2, PHP 5
pt: Forms Data Format
fn: fdf_set_target_frame
fs: bool fdf_set_target_frame ( resource $fdf_document , string $frame_name )
fd: Sets the target frame to display a result PDF defined with fdf_save_file() in.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: fdf_set_value
fs: bool fdf_set_value ( resource $fdf_document , string $fieldname , mixed $value [, int $isName ] )
fd: Sets the value for the given field.
vi: PHP 4, PHP 5
pt: Forms Data Format
fn: fdf_set_version
fs: bool fdf_set_version ( resource $fdf_document , string $version )
fd: Sets the FDF version for the given document. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Forms Data Format
fn: feof
fs: bool feof ( resource $handle )
fd: Tests for end-of-file on a file pointer.
vi: PHP 4, PHP 5
pt: Filesystem
fn: fflush
fs: bool fflush ( resource $handle )
fd: This function forces a write of all buffered output to the resource pointed to by the file handle.
vi: PHP 4 >= 4.0.1, PHP 5
pt: Filesystem
fn: fgetc
fs: string fgetc ( resource $handle )
fd: Gets a character from the given file pointer.
vi: PHP 4, PHP 5
pt: Filesystem
fn: fgetcsv
fs: array fgetcsv ( resource $handle [, int $length [, string $delimiter [, string $enclosure [, string $escape ]]]] )
fd: 
vi: PHP 4, PHP 5
pt: Filesystem
fn: fgets
fs: string fgets ( resource $handle [, int $length ] )
fd: Gets a line from file pointer.
vi: PHP 4, PHP 5
pt: Filesystem
fn: fgetss
fs: string fgetss ( resource $handle [, int $length [, string $allowable_tags ]] )
fd: 
vi: PHP 4, PHP 5
pt: Filesystem
fn: file
fs: array file ( string $filename [, int $flags [, resource $context ]] )
fd: Reads an entire file into an array. 
vi: PHP 4, PHP 5
pt: Filesystem
fn: file_exists
fs: bool file_exists ( string $filename )
fd: Checks whether a file or directory exists.
vi: PHP 4, PHP 5
pt: Filesystem
fn: file_get_contents
fs: string file_get_contents ( string $filename [, int $flags [, resource $context [, int $offset [, int $maxlen ]]]] )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Filesystem
fn: file_put_contents
fs: int file_put_contents ( string $filename , mixed $data [, int $flags [, resource $context ]] )
fd: 
vi: PHP 5
pt: Filesystem
fn: fileatime
fs: int fileatime ( string $filename )
fd: 
vi: PHP 4, PHP 5
pt: Filesystem
fn: filectime
fs: int filectime ( string $filename )
fd: Gets the inode change time of a file.
vi: PHP 4, PHP 5
pt: Filesystem
fn: filegroup
fs: int filegroup ( string $filename )
fd: Gets the file group.
vi: PHP 4, PHP 5
pt: Filesystem
fn: fileinode
fs: int fileinode ( string $filename )
fd: Gets the file inode.
vi: PHP 4, PHP 5
pt: Filesystem
fn: filemtime
fs: int filemtime ( string $filename )
fd: This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed.
vi: PHP 4, PHP 5
pt: Filesystem
fn: fileowner
fs: int fileowner ( string $filename )
fd: Gets the file owner.
vi: PHP 4, PHP 5
pt: Filesystem
fn: fileperms
fs: int fileperms ( string $filename )
fd: Gets permissions for the given file.
vi: PHP 4, PHP 5
pt: Filesystem
fn: filepro
fs: bool filepro ( string $directory )
fd: This reads and verifies the map file, storing the field count and info. 
vi: PHP 4, PHP 5 <= 5.1.6
pt: filePro
fn: filepro_fieldcount
fs: int filepro_fieldcount ( void )
fd: Returns the number of fields (columns) in the opened filePro database.
vi: PHP 4, PHP 5 <= 5.1.6
pt: filePro
fn: filepro_fieldname
fs: string filepro_fieldname ( int $field_number )
fd: Returns the name of the field corresponding to field_number.
vi: PHP 4, PHP 5 <= 5.1.6
pt: filePro
fn: filepro_fieldtype
fs: string filepro_fieldtype ( int $field_number )
fd: Returns the edit type of the field corresponding to field_number.
vi: PHP 4, PHP 5 <= 5.1.6
pt: filePro
fn: filepro_fieldwidth
fs: int filepro_fieldwidth ( int $field_number )
fd: Returns the width of the field corresponding to field_number.
vi: PHP 4, PHP 5 <= 5.1.6
pt: filePro
fn: filepro_retrieve
fs: string filepro_retrieve ( int $row_number , int $field_number )
fd: Returns the data from the specified location in the database. 
vi: PHP 4, PHP 5 <= 5.1.6
pt: filePro
fn: filepro_rowcount
fs: int filepro_rowcount ( void )
fd: Returns the number of rows in the opened filePro database. 
vi: PHP 4, PHP 5 <= 5.1.6
pt: filePro
fn: filesize
fs: int filesize ( string $filename )
fd: Gets the size for the given file.
vi: PHP 4, PHP 5
pt: Filesystem
fn: filetype
fs: string filetype ( string $filename )
fd: Returns the type of the given file.
vi: PHP 4, PHP 5
pt: Filesystem
fn: filter_has_var
fs: bool filter_has_var ( int $type , string $variable_name )
fd: 
vi: PHP 5 >= 5.2.0, PECL filter:0.11.0
pt: Filter
fn: filter_id
fs: int filter_id ( string $filtername )
fd: 
vi: PHP 5 >= 5.2.0, PECL filter:0.11.0
pt: Filter
fn: filter_input
fs: mixed filter_input ( int $type , string $variable_name [, int $filter [, mixed $options ]] )
fd: 
vi: PHP 5 >= 5.2.0, PECL filter:0.11.0
pt: Filter
fn: filter_input_array
fs: mixed filter_input_array ( int $type [, mixed $definition ] )
fd: 
vi: PHP 5 >= 5.2.0, PECL filter:0.11.0
pt: Filter
fn: filter_list
fs: array filter_list ( void )
fd: 
vi: PHP 5 >= 5.2.0, PECL filter:0.11.0
pt: Filter
fn: filter_var
fs: mixed filter_var ( mixed $variable [, int $filter [, mixed $options ]] )
fd: 
vi: PHP 5 >= 5.2.0, PECL filter:0.11.0
pt: Filter
fn: filter_var_array
fs: mixed filter_var_array ( array $data [, mixed $definition ] )
fd: 
vi: PHP 5 >= 5.2.0, PECL filter:0.11.0
pt: Filter
fn: finfo_buffer
fs: string finfo_buffer ( resource $finfo , string $string [, int $options [, resource $context ]] )
fd: 
vi: PECL fileinfo:0.1-1.0.4
pt: Fileinfo
fn: finfo_close
fs: bool finfo_close ( resource $finfo )
fd: 
vi: PECL fileinfo:0.1-1.0.4
pt: Fileinfo
fn: finfo_file
fs: string finfo_file ( resource $finfo , string $file_name [, int $options [, resource $context ]] )
fd: 
vi: PECL fileinfo:0.1-1.0.4
pt: Fileinfo
fn: finfo_open
fs: resource finfo_open ([ int $options [, string $arg ]] )
fd: 
vi: 
pt: Fileinfo
fn: finfo_set_flags
fs: bool finfo_set_flags ( resource $finfo , int $options )
fd: 
vi: PECL fileinfo:0.1-1.0.4
pt: Fileinfo
fn: floatval
fs: float floatval ( mixed $var )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Variable Handling
fn: flock
fs: bool flock ( resource $handle , int $operation [, int &$wouldblock ] )
fd: flock() allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows). 
vi: PHP 4, PHP 5
pt: Filesystem
fn: floor
fs: float floor ( float $value )
fd: 
vi: PHP 4, PHP 5
pt: Mathematical
fn: flush
fs: void flush ( void )
fd: Flushes the output buffers of PHP and whatever backend PHP is using (CGI, a web server, etc). This effectively tries to push all the output so far to the user's browser. 
vi: PHP 4, PHP 5
pt: Output Control
fn: fmod
fs: float fmod ( float $x , float $y )
fd: Returns the floating point remainder of dividing the dividend (x) by the divisor (y). The reminder (r) is defined as: x = i * y + r, for some integer i. If y is non-zero, r has the same sign as x and a magnitude less than the magnitude of y.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Mathematical
fn: fnmatch
fs: bool fnmatch ( string $pattern , string $string [, int $flags ] )
fd: fnmatch() checks if the passed string would match the given shell wildcard pattern.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Filesystem
fn: fopen
fs: resource fopen ( string $filename , string $mode [, bool $use_include_path [, resource $context ]] )
fd: fopen() binds a named resource, specified by filename, to a stream.
vi: PHP 4, PHP 5
pt: Filesystem
fn: fpassthru
fs: int fpassthru ( resource $handle )
fd: Reads to EOF on the given file pointer from the current position and writes the results to the output buffer. 
vi: PHP 4, PHP 5
pt: Filesystem
fn: fprintf
fs: int fprintf ( resource $handle , string $format [, mixed $args [, mixed $... ]] )
fd: Write a string produced according to format to the stream resource specified by handle.
vi: PHP 5
pt: String
fn: fputcsv
fs: int fputcsv ( resource $handle , array $fields [, string $delimiter [, string $enclosure ]] )
fd: fputcsv() formats a line (passed as a fields array) as CSV and write it (terminated by a newline) to the specified file handle.
vi: PHP 5 >= 5.1.0
pt: Filesystem
fn: fputs
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Filesystem
fn: fread
fs: string fread ( resource $handle , int $length )
fd: fread() reads up to length bytes from the file pointer referenced by handle. Reading stops as soon as one of the following conditions is met: length bytes have been read. EOF (end of file) is reached. a packet becomes available (for network streams). 8192 bytes have been read (after opening userspace stream)
vi: PHP 4, PHP 5
pt: Filesystem
fn: frenchtojd
fs: int frenchtojd ( int $month , int $day , int $year )
fd: Converts a date from the French Republican Calendar to a Julian Day Count. 
vi: PHP 4, PHP 5
pt: Calendar
fn: fribidi_log2vis
fs: string fribidi_log2vis ( string $str , string $direction , int $charset )
fd: Converts a logical string to a visual one.
vi: PHP 4 >= 4.0.4, PECL fribidi:1.0
pt: FriBiDi
fn: fscanf
fs: mixed fscanf ( resource $handle , string $format [, mixed &$... ] )
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Filesystem
fn: fseek
fs: int fseek ( resource $handle , int $offset [, int $whence ] )
fd: Sets the file position indicator for the file referenced by handle. The new position, measured in bytes from the beginning of the file, is obtained by adding offset to the position specified by whence.
vi: PHP 4, PHP 5
pt: Filesystem
fn: fsockopen
fs: resource fsockopen ( string $hostname [, int $port [, int &$errno [, string &$errstr [, float $timeout ]]]] )
fd: Initiates a socket connection to the resource specified by hostname. 
vi: PHP 4, PHP 5
pt: Network
fn: fstat
fs: array fstat ( resource $handle )
fd: Gathers the statistics of the file opened by the file pointer handle.
vi: PHP 4, PHP 5
pt: Filesystem
fn: ftell
fs: int ftell ( resource $handle )
fd: Tells the file pointer read/write position.
vi: PHP 4, PHP 5
pt: Filesystem
fn: ftok
fs: int ftok ( string $pathname , string $proj )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: ftp_alloc
fs: bool ftp_alloc ( resource $ftp_stream , int $filesize [, string &$result ] )
fd: Sends an ALLO command to the remote FTP server to allocate space for a file to be uploaded. 
vi: PHP 5
pt: FTP
fn: ftp_cdup
fs: bool ftp_cdup ( resource $ftp_stream )
fd: Changes to the parent directory.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_chdir
fs: bool ftp_chdir ( resource $ftp_stream , string $directory )
fd: Changes the current directory to the specified one.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_chmod
fs: int ftp_chmod ( resource $ftp_stream , int $mode , string $filename )
fd: Sets the permissions on the specified remote file to mode.
vi: PHP 5
pt: FTP
fn: ftp_close
fs: bool ftp_close ( resource $ftp_stream )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: FTP
fn: ftp_connect
fs: resource ftp_connect ( string $host [, int $port [, int $timeout ]] )
fd: ftp_connect() opens an FTP connection to the specified host.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_delete
fs: bool ftp_delete ( resource $ftp_stream , string $path )
fd: ftp_delete() deletes the file specified by path from the FTP server.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_exec
fs: bool ftp_exec ( resource $ftp_stream , string $command )
fd: Sends a SITE EXEC command request to the FTP server.
vi: PHP 4 >= 4.0.3, PHP 5
pt: FTP
fn: ftp_fget
fs: bool ftp_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos ] )
fd: ftp_fget() retrieves remote_file from the FTP server, and writes it to the given file pointer.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_fput
fs: bool ftp_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos ] )
fd: ftp_fput() uploads the data from a file pointer to a remote file on the FTP server.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_get
fs: bool ftp_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos ] )
fd: ftp_get() retrieves a remote file from the FTP server, and saves it into a local file.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_get_option
fs: mixed ftp_get_option ( resource $ftp_stream , int $option )
fd: This function returns the value for the requested option from the specified FTP connection.
vi: PHP 4 >= 4.2.0, PHP 5
pt: FTP
fn: ftp_login
fs: bool ftp_login ( resource $ftp_stream , string $username , string $password )
fd: Logs in to the given FTP stream.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_mdtm
fs: int ftp_mdtm ( resource $ftp_stream , string $remote_file )
fd: ftp_mdtm() gets the last modified time for a remote file. 
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_mkdir
fs: string ftp_mkdir ( resource $ftp_stream , string $directory )
fd: Creates the specified directory on the FTP server.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_nb_continue
fs: int ftp_nb_continue ( resource $ftp_stream )
fd: Continues retrieving/sending a file non-blocking.
vi: PHP 4 >= 4.3.0, PHP 5
pt: FTP
fn: ftp_nb_fget
fs: int ftp_nb_fget ( resource $ftp_stream , resource $handle , string $remote_file , int $mode [, int $resumepos ] )
fd: ftp_nb_fget() retrieves a remote file from the FTP server. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: FTP
fn: ftp_nb_fput
fs: int ftp_nb_fput ( resource $ftp_stream , string $remote_file , resource $handle , int $mode [, int $startpos ] )
fd: ftp_nb_fput() uploads the data from a file pointer to a remote file on the FTP server. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: FTP
fn: ftp_nb_get
fs: int ftp_nb_get ( resource $ftp_stream , string $local_file , string $remote_file , int $mode [, int $resumepos ] )
fd: ftp_nb_get() retrieves a remote file from the FTP server, and saves it into a local file. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: FTP
fn: ftp_nb_put
fs: int ftp_nb_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos ] )
fd: ftp_nb_put() stores a local file on the FTP server. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: FTP
fn: ftp_nlist
fs: array ftp_nlist ( resource $ftp_stream , string $directory )
fd: 
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_pasv
fs: bool ftp_pasv ( resource $ftp_stream , bool $pasv )
fd: ftp_pasv() turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall. 
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_put
fs: bool ftp_put ( resource $ftp_stream , string $remote_file , string $local_file , int $mode [, int $startpos ] )
fd: ftp_put() stores a local file on the FTP server.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_pwd
fs: string ftp_pwd ( resource $ftp_stream )
fd: 
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_quit
fs: 
fd: 
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_raw
fs: array ftp_raw ( resource $ftp_stream , string $command )
fd: Sends an arbitrary command to the FTP server.
vi: PHP 5
pt: FTP
fn: ftp_rawlist
fs: array ftp_rawlist ( resource $ftp_stream , string $directory [, bool $recursive ] )
fd: ftp_rawlist() executes the FTP LIST command, and returns the result as an array.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_rename
fs: bool ftp_rename ( resource $ftp_stream , string $oldname , string $newname )
fd: ftp_rename() renames a file or a directory on the FTP server.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_rmdir
fs: bool ftp_rmdir ( resource $ftp_stream , string $directory )
fd: Removes the specified directory on the FTP server.
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_set_option
fs: bool ftp_set_option ( resource $ftp_stream , int $option , mixed $value )
fd: This function controls various runtime options for the specified FTP stream.
vi: PHP 4 >= 4.2.0, PHP 5
pt: FTP
fn: ftp_site
fs: bool ftp_site ( resource $ftp_stream , string $command )
fd: ftp_site() sends the given SITE command to the FTP server. 
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_size
fs: int ftp_size ( resource $ftp_stream , string $remote_file )
fd: ftp_size() returns the size of the given file in bytes. 
vi: PHP 4, PHP 5
pt: FTP
fn: ftp_ssl_connect
fs: resource ftp_ssl_connect ( string $host [, int $port [, int $timeout ]] )
fd: ftp_ssl_connect() opens a SSL-FTP connection to the specified host. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: FTP
fn: ftp_systype
fs: string ftp_systype ( resource $ftp_stream )
fd: Returns the system type identifier of the remote FTP server.
vi: PHP 4, PHP 5
pt: FTP
fn: ftruncate
fs: bool ftruncate ( resource $handle , int $size )
fd: Takes the filepointer, handle, and truncates the file to length, size.
vi: PHP 4, PHP 5
pt: Filesystem
fn: func_get_arg
fs: mixed func_get_arg ( int $arg_num )
fd: Gets the specified argument from a user-defined function's argument list. 
vi: PHP 4, PHP 5
pt: Function Handling
fn: func_get_args
fs: array func_get_args ( void )
fd: Gets an array of the function's argument list. 
vi: PHP 4, PHP 5
pt: Function Handling
fn: func_num_args
fs: int func_num_args ( void )
fd: Gets the number of arguments passed to the function. 
vi: PHP 4, PHP 5
pt: Function Handling
fn: function_exists
fs: bool function_exists ( string $function_name )
fd: Checks the list of defined functions, both built-in (internal) and user-defined, for function_name.
vi: PHP 4, PHP 5
pt: Function Handling
fn: fwrite
fs: int fwrite ( resource $handle , string $string [, int $length ] )
fd: 
vi: PHP 4, PHP 5
pt: Filesystem
fn: gd_info
fs: array gd_info ( void )
fd: Gets information about the version and capabilities of the installed GD library.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Image
fn: geoip_country_code3_by_name
fs: string geoip_country_code3_by_name ( string $hostname )
fd: The geoip_country_code3_by_name() function will return the three letter country code corresponding to a hostname or an IP address.
vi: PECL geoip:0.2.0-1.0.1
pt: GeoIP
fn: geoip_country_code_by_name
fs: string geoip_country_code_by_name ( string $hostname )
fd: The geoip_country_code_by_name() function will return the two letter country code corresponding to a hostname or an IP address.
vi: PECL geoip:0.2.0-1.0.1
pt: GeoIP
fn: geoip_country_name_by_name
fs: string geoip_country_name_by_name ( string $hostname )
fd: The geoip_country_name_by_name() function will return the full country name corresponding to a hostname or an IP address.
vi: PECL geoip:0.2.0-1.0.1
pt: GeoIP
fn: geoip_database_info
fs: string geoip_database_info ([ int $database ] )
fd: The geoip_database_info() function returns the corresponding GeoIP Database version as it is defined inside the binary file. 
vi: PECL geoip:0.2.0-1.0.1
pt: GeoIP
fn: geoip_db_avail
fs: bool geoip_db_avail ( int $database )
fd: The geoip_db_avail() function returns if the corresponding GeoIP Database is available and can be opened on disk. 
vi: PECL geoip:1.0.1
pt: GeoIP
fn: geoip_db_filename
fs: string geoip_db_filename ( int $database )
fd: The geoip_db_filename() function returns the filename of the corresponding GeoIP Database. 
vi: PECL geoip:1.0.1
pt: GeoIP
fn: geoip_db_get_all_info
fs: array geoip_db_get_all_info ( void )
fd: The geoip_db_get_all_info() function will return detailed informations as a multi-dimensional array about all the GeoIP database types. 
vi: PECL geoip:1.0.1
pt: GeoIP
fn: geoip_id_by_name
fs: int geoip_id_by_name ( string $hostname )
fd: The geoip_id_by_name() function will return the country and region corresponding to a hostname or an IP address. 
vi: PECL geoip:0.2.0-1.0.1
pt: GeoIP
fn: geoip_isp_by_name
fs: string geoip_isp_by_name ( string $hostname )
fd: The geoip_isp_by_name() function will return the name of the Internet Service Provider (ISP) that an IP is assigned to. 
vi: 
pt: GeoIP
fn: geoip_org_by_name
fs: string geoip_org_by_name ( string $hostname )
fd: The geoip_org_by_name() function will return the name of the organization that an IP is assigned to. 
vi: PECL geoip:0.2.0-1.0.1
pt: GeoIP
fn: geoip_record_by_name
fs: array geoip_record_by_name ( string $hostname )
fd: The geoip_record_by_name() function will return the record information corresponding to a hostname or an IP address. 
vi: PECL geoip:0.2.0-1.0.1
pt: GeoIP
fn: geoip_region_by_name
fs: array geoip_region_by_name ( string $hostname )
fd: The geoip_region_by_name() function will return the country and region corresponding to a hostname or an IP address. 
vi: PECL geoip:0.2.0-1.0.1
pt: GeoIP
fn: get_browser
fs: mixed get_browser ([ string $user_agent [, bool $return_array ]] )
fd: Attempts to determine the capabilities of the user's browser, by looking up the browser's information in the browscap.ini file.
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: get_cfg_var
fs: string get_cfg_var ( string $option )
fd: Gets the value of a PHP configuration option. 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: get_class
fs: string get_class ([ object $object ] )
fd: Gets the name of the class of the given object.
vi: PHP 4, PHP 5
pt: Class/Object
fn: get_class_methods
fs: array get_class_methods ( mixed $class_name )
fd: Gets the class methods names.
vi: PHP 4, PHP 5
pt: Class/Object
fn: get_class_vars
fs: array get_class_vars ( string $class_name )
fd: Get the default properties of the given class.
vi: PHP 4, PHP 5
pt: Class/Object
fn: get_current_user
fs: string get_current_user ( void )
fd: 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: get_declared_classes
fs: array get_declared_classes ( void )
fd: Gets the declared classes.
vi: PHP 4, PHP 5
pt: Class/Object
fn: get_declared_interfaces
fs: array get_declared_interfaces ( void )
fd: Gets the declared interfaces.
vi: PHP 5
pt: Class/Object
fn: get_defined_constants
fs: array get_defined_constants ([ mixed $categorize ] )
fd: Returns the names and values of all the constants currently defined.
vi: PHP 4 >= 4.0.7, PHP 5
pt: PHP Options&Information
fn: get_defined_functions
fs: array get_defined_functions ( void )
fd: Gets an array of all defined functions.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Function Handling
fn: get_defined_vars
fs: array get_defined_vars ( void )
fd: This function returns a multidimensional array containing a list of all defined variables, be them environment, server or user-defined variables, within the scope that get_defined_vars() is called.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Variable Handling
fn: get_extension_funcs
fs: array get_extension_funcs ( string $module_name )
fd: This function returns the names of all the functions defined in the module indicated by module_name.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: get_headers
fs: array get_headers ( string $url [, int $format ] )
fd: get_headers() returns an array with the headers sent by the server in response to a HTTP request.
vi: PHP 5
pt: URL
fn: get_html_translation_table
fs: array get_html_translation_table ([ int $table [, int $quote_style ]] )
fd: 
vi: PHP 4, PHP 5
pt: String
fn: get_include_path
fs: string get_include_path ( void )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: PHP Options&Information
fn: get_included_files
fs: array get_included_files ( void )
fd: 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: get_loaded_extensions
fs: array get_loaded_extensions ([ bool $zend_extensions=FALSE ] )
fd: This function returns the names of all the modules compiled and loaded in the PHP interpreter.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: get_magic_quotes_gpc
fs: int get_magic_quotes_gpc ( void )
fd: 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: get_magic_quotes_runtime
fs: int get_magic_quotes_runtime ( void )
fd: 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: get_meta_tags
fs: array get_meta_tags ( string $filename [, bool $use_include_path ] )
fd: Opens filename and parses it line by line for <meta> tags in the file. The parsing stops at </head>.
vi: PHP 4, PHP 5
pt: URL
fn: get_object_vars
fs: array get_object_vars ( object $object )
fd: Gets the properties of the given object.
vi: PHP 4, PHP 5
pt: Class/Object
fn: get_parent_class
fs: string get_parent_class ([ mixed $object ] )
fd: Retrieves the parent class name for object or class.
vi: PHP 4, PHP 5
pt: Class/Object
fn: get_required_files
fs: 
fd: 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: get_resource_type
fs: string get_resource_type ( resource $handle )
fd: This function gets the type of the given resource.
vi: PHP 4 >= 4.0.2, PHP 5
pt: Variable Handling
fn: getallheaders
fs: array getallheaders ( void )
fd: Fetches all HTTP requests from the current request. 
vi: PHP 4, PHP 5
pt: Apache-specific
fn: getcwd
fs: string getcwd ( void )
fd: Gets the current working directory.
vi: PHP 4, PHP 5
pt: Directory
fn: getdate
fs: array getdate ([ int $timestamp ] )
fd: 
vi: PHP 4, PHP 5
pt: Date and Time
fn: getenv
fs: string getenv ( string $varname )
fd: Gets the value of an environment variable. 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: gethostbyaddr
fs: string gethostbyaddr ( string $ip_address )
fd: Returns the host name of the Internet host specified by ip_address.
vi: PHP 4, PHP 5
pt: Network
fn: gethostbyname
fs: string gethostbyname ( string $hostname )
fd: Returns the IP address of the Internet host specified by hostname.
vi: PHP 4, PHP 5
pt: Network
fn: gethostbynamel
fs: array gethostbynamel ( string $hostname )
fd: Returns a list of IP addresses to which the Internet host specified by hostname resolves.
vi: PHP 4, PHP 5
pt: Network
fn: getimagesize
fs: array getimagesize ( string $filename [, array &$imageinfo ] )
fd: 
vi: PHP 4, PHP 5
pt: Image
fn: getlastmod
fs: int getlastmod ( void )
fd: Gets the time of the last modification of the current page. 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: getmxrr
fs: bool getmxrr ( string $hostname , array &$mxhosts [, array &$weight ] )
fd: Searches DNS for MX records corresponding to hostname.
vi: PHP 4, PHP 5
pt: Network
fn: getmygid
fs: int getmygid ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: PHP Options&Information
fn: getmyinode
fs: int getmyinode ( void )
fd: Gets the inode of the current script.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: getmypid
fs: int getmypid ( void )
fd: Gets the current PHP process ID.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: getmyuid
fs: int getmyuid ( void )
fd: 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: getopt
fs: array getopt ( string $options [, array $longopts ] )
fd: Parses options passed to the script.
vi: PHP 4 >= 4.3.0, PHP 5
pt: PHP Options&Information
fn: getprotobyname
fs: int getprotobyname ( string $name )
fd: getprotobyname() returns the protocol number associated with the protocol name as per /etc/protocols.
vi: PHP 4, PHP 5
pt: Network
fn: getprotobynumber
fs: string getprotobynumber ( int $number )
fd: getprotobynumber() returns the protocol name associated with protocol number as per /etc/protocols.
vi: PHP 4, PHP 5
pt: Network
fn: getrandmax
fs: int getrandmax ( void )
fd: 
vi: PHP 4, PHP 5
pt: Mathematical
fn: getrusage
fs: array getrusage ([ int $who ] )
fd: This is an interface to getrusage(2). It gets data returned from the system call.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: getservbyname
fs: int getservbyname ( string $service , string $protocol )
fd: getservbyname() returns the Internet port which corresponds to service for the specified protocol as per /etc/services.
vi: PHP 4, PHP 5
pt: Network
fn: getservbyport
fs: string getservbyport ( int $port , string $protocol )
fd: getservbyport() returns the Internet service associated with port for the specified protocol as per /etc/services.
vi: PHP 4, PHP 5
pt: Network
fn: gettext
fs: string gettext ( string $message )
fd: Looks up a message in the current domain.
vi: PHP 4, PHP 5, PECL axis2:0.1.0-0.1.1
pt: Gettext
fn: gettimeofday
fs: mixed gettimeofday ([ bool $return_float ] )
fd: This is an interface to gettimeofday(2). It returns an associative array containing the data returned from the system call.
vi: PHP 4, PHP 5
pt: Date and Time
fn: gettype
fs: string gettype ( mixed $var )
fd: Returns the type of the PHP variable var. 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: glob
fs: array glob ( string $pattern [, int $flags ] )
fd: The glob() function searches for all the pathnames matching pattern according to the rules used by the libc glob() function, which is similar to the rules used by common shells.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Filesystem
fn: gmdate
fs: string gmdate ( string $format [, int $timestamp ] )
fd: 
vi: PHP 4, PHP 5
pt: Date and Time
fn: gmmktime
fs: int gmmktime ([ int $hour [, int $minute [, int $second [, int $month [, int $day [, int $year [, int $is_dst ]]]]]]] )
fd: 
vi: PHP 4, PHP 5
pt: Date and Time
fn: gmp_abs
fs: resource gmp_abs ( resource $a )
fd: Get the absolute value of a number.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_add
fs: resource gmp_add ( resource $a , resource $b )
fd: Add two numbers.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_and
fs: resource gmp_and ( resource $a , resource $b )
fd: Calculates logical AND of two GMP numbers.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_clrbit
fs: void gmp_clrbit ( resource &$a , int $index )
fd: Clears (sets to 0) bit index in a. The index starts at 0.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_cmp
fs: int gmp_cmp ( resource $a , resource $b )
fd: Compares two numbers.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_com
fs: resource gmp_com ( resource $a )
fd: Returns the one's complement of a.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_div
fs: 
fd: 
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_div_q
fs: resource gmp_div_q ( resource $a , resource $b [, int $round ] )
fd: Divides a by b and returns the integer result.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_div_qr
fs: array gmp_div_qr ( resource $n , resource $d [, int $round ] )
fd: The function divides n by d.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_div_r
fs: resource gmp_div_r ( resource $n , resource $d [, int $round ] )
fd: Calculates remainder of the integer division of n by d. The remainder has the sign of the n argument, if not zero.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_divexact
fs: resource gmp_divexact ( resource $n , resource $d )
fd: Divides n by d, using fast exact division algorithm. This function produces correct results only when it is known in advance that d divides n.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_fact
fs: resource gmp_fact ( int $a )
fd: Calculates factorial (a!) of a.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_gcd
fs: resource gmp_gcd ( resource $a , resource $b )
fd: Calculate greatest common divisor of a and b. The result is always positive even if either of, or both, input operands are negative.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_gcdext
fs: array gmp_gcdext ( resource $a , resource $b )
fd: Calculates g, s, and t, such that a*s + b*t = g = gcd(a,b), where gcd is the greatest common divisor. Returns an array with respective elements g, s and t. 
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_hamdist
fs: int gmp_hamdist ( resource $a , resource $b )
fd: Returns the hamming distance between a and b. Both operands should be non-negative.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_init
fs: resource gmp_init ( mixed $number [, int $base ] )
fd: Creates a GMP number from an integer or string.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_intval
fs: int gmp_intval ( resource $gmpnumber )
fd: This function allows to convert GMP number to integer.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_invert
fs: resource gmp_invert ( resource $a , resource $b )
fd: Computes the inverse of a modulo b.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_jacobi
fs: int gmp_jacobi ( resource $a , resource $p )
fd: 
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_legendre
fs: int gmp_legendre ( resource $a , resource $p )
fd: 
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_mod
fs: resource gmp_mod ( resource $n , resource $d )
fd: Calculates n modulo d. The result is always non-negative, the sign of d is ignored.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_mul
fs: resource gmp_mul ( resource $a , resource $b )
fd: Multiplies a by b and returns the result.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_neg
fs: resource gmp_neg ( resource $a )
fd: Returns the negative value of a number.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_nextprime
fs: resource gmp_nextprime ( int $a )
fd: Find next prime number
vi: PHP 5 >= 5.2.0
pt: GMP
fn: gmp_or
fs: resource gmp_or ( resource $a , resource $b )
fd: Calculates logical inclusive OR of two GMP numbers.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_perfect_square
fs: bool gmp_perfect_square ( resource $a )
fd: Check if a number is a perfect square.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_popcount
fs: int gmp_popcount ( resource $a )
fd: Get the population count.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_pow
fs: resource gmp_pow ( resource $base , int $exp )
fd: Raise base into power exp.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_powm
fs: resource gmp_powm ( resource $base , resource $exp , resource $mod )
fd: Calculate (base raised into power exp) modulo mod. If exp is negative, result is undefined.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_prob_prime
fs: int gmp_prob_prime ( resource $a [, int $reps ] )
fd: The function uses Miller-Rabin's probabilistic test to check if a number is a prime.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_random
fs: resource gmp_random ( int $limiter )
fd: Generate a random number. The number will be between zero and the number of bits per limb multiplied by limiter. If limiter is negative, negative numbers are generated. 
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_scan0
fs: int gmp_scan0 ( resource $a , int $start )
fd: Scans a, starting with bit start, towards more significant bits, until the first clear bit is found.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_scan1
fs: int gmp_scan1 ( resource $a , int $start )
fd: Scans a, starting with bit start, towards more significant bits, until the first set bit is found.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_setbit
fs: void gmp_setbit ( resource &$a , int $index [, bool $set_clear ] )
fd: Sets bit index in a.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_sign
fs: int gmp_sign ( resource $a )
fd: Checks the sign of a number.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_sqrt
fs: resource gmp_sqrt ( resource $a )
fd: Calculates square root of a.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_sqrtrem
fs: array gmp_sqrtrem ( resource $a )
fd: Calculate the square root of a number, with remainder.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_strval
fs: string gmp_strval ( resource $gmpnumber [, int $base ] )
fd: Convert GMP number to string representation in base base. The default base is 10.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_sub
fs: resource gmp_sub ( resource $a , resource $b )
fd: Subtracts b from a and returns the result.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmp_testbit
fs: bool gmp_testbit ( resource $a , int $index )
fd: Tests if the specified bit is set.
vi: 
pt: GMP
fn: gmp_xor
fs: resource gmp_xor ( resource $a , resource $b )
fd: Calculates logical exclusive OR (XOR) of two GMP numbers.
vi: PHP 4 >= 4.0.4, PHP 5
pt: GMP
fn: gmstrftime
fs: string gmstrftime ( string $format [, int $timestamp ] )
fd: 
vi: PHP 4, PHP 5
pt: Date and Time
fn: gnupg_adddecryptkey
fs: bool gnupg_adddecryptkey ( resource $identifier , string $fingerprint , string $passphrase )
fd: 
vi: PECL gnupg:0.5-1.3.1
pt: gnupg
fn: gnupg_addencryptkey
fs: bool gnupg_addencryptkey ( resource $identifier , string $fingerprint )
fd: 
vi: PECL gnupg:0.5-1.3.1
pt: gnupg
fn: gnupg_addsignkey
fs: bool gnupg_addsignkey ( resource $identifier , string $fingerprint [, string $passphrase ] )
fd: 
vi: PECL gnupg:0.5-1.3.1
pt: gnupg
fn: gnupg_cleardecryptkeys
fs: bool gnupg_cleardecryptkeys ( resource $identifier )
fd: 
vi: 
pt: gnupg
fn: gnupg_clearencryptkeys
fs: bool gnupg_clearencryptkeys ( resource $identifier )
fd: 
vi: PECL gnupg:0.5-1.3.1
pt: gnupg
fn: gnupg_clearsignkeys
fs: bool gnupg_clearsignkeys ( resource $identifier )
fd: 
vi: 
pt: gnupg
fn: gnupg_decrypt
fs: string gnupg_decrypt ( resource $identifier , string $text )
fd: 
vi: PECL gnupg:0.1-1.3.1
pt: gnupg
fn: gnupg_decryptverify
fs: array gnupg_decryptverify ( resource $identifier , string $text , string &$plaintext )
fd: Decrypts and verifies a given text and returns information about the signature. The parameter plaintext gets filled with the decrypted text.
vi: PECL gnupg:0.2-1.3.1
pt: gnupg
fn: gnupg_encrypt
fs: string gnupg_encrypt ( resource $identifier , string $plaintext )
fd: 
vi: PECL gnupg:0.1-1.3.1
pt: gnupg
fn: gnupg_encryptsign
fs: string gnupg_encryptsign ( resource $identifier , string $plaintext )
fd: 
vi: 
pt: gnupg
fn: gnupg_export
fs: string gnupg_export ( resource $identifier , string $fingerprint )
fd: Exports the key fingerprint.
vi: PECL gnupg:0.1-1.3.1
pt: gnupg
fn: gnupg_geterror
fs: string gnupg_geterror ( resource $identifier )
fd: 
vi: PECL gnupg:0.1-1.3.1
pt: gnupg
fn: gnupg_getprotocol
fs: int gnupg_getprotocol ( resource $identifier )
fd: 
vi: PECL gnupg:0.1-1.3.1
pt: gnupg
fn: gnupg_import
fs: array gnupg_import ( resource $identifier , string $keydata )
fd: Imports the key keydata and returns an array with information about the importprocess.
vi: PECL gnupg:0.3-1.3.1
pt: gnupg
fn: gnupg_keyinfo
fs: array gnupg_keyinfo ( resource $identifier , string $pattern )
fd: 
vi: PECL gnupg:0.1-1.3.1
pt: gnupg
fn: gnupg_setarmor
fs: bool gnupg_setarmor ( resource $identifier , int $armor )
fd: Pass a non-zero integer-value to this function to enable armored-output (default). Pass 0 to disable armored output.
vi: PECL gnupg:0.1-1.3.1
pt: gnupg
fn: gnupg_seterrormode
fs: void gnupg_seterrormode ( resource $identifier , int $errormode )
fd: errormode takes a constant indicating what type of error_reporting should be used. The possible values are GNUPG_ERROR_WARNING, GNUPG_ERROR_EXCEPTION and GNUPG_ERROR_SILENT. By default GNUPG_ERROR_SILENT is used.
vi: PECL gnupg:0.6-1.3.1
pt: gnupg
fn: gnupg_setsignmode
fs: bool gnupg_setsignmode ( resource $identifier , int $signmode )
fd: signmode takes a constant indicating what type of signature should be produced. The possible values are GNUPG_SIG_MODE_NORMAL, GNUPG_SIG_MODE_DETACH and GNUPG_SIG_MODE_CLEAR. By default GNUPG_SIG_MODE_CLEAR is used.
vi: PECL gnupg:0.1-1.3.1
pt: gnupg
fn: gnupg_sign
fs: string gnupg_sign ( resource $identifier , string $plaintext )
fd: 
vi: PECL gnupg:0.1-1.3.1
pt: gnupg
fn: gnupg_verify
fs: array gnupg_verify ( resource $identifier , string $signed_text , string $signature [, string &$plaintext ] )
fd: Verifies the given signed_text and returns information about the signature. To verify a clearsigned text, set signature to FALSE. If the optional parameter plaintext is passed, it is filled with the plaintext.
vi: PECL gnupg:0.1-1.3.1
pt: gnupg
fn: gopher_parsedir
fs: array gopher_parsedir ( string $dirent )
fd: gopher_parsedir() parses a gopher formatted directory entry into an associative array. 
vi: PECL net_gopher:0.1-1.0.0
pt: Net_Gopher
fn: gregoriantojd
fs: int gregoriantojd ( int $month , int $day , int $year )
fd: Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D. 
vi: PHP 4, PHP 5
pt: Calendar
fn: gzclose
fs: bool gzclose ( resource $zp )
fd: Closes the given gz-file pointer.
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzcompress
fs: string gzcompress ( string $data [, int $level ] )
fd: This function compress the given string using the ZLIB data format. 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Zlib Compression
fn: gzdecode
fs: string gzdecode ( string $data [, int $length ] )
fd: This function returns a decoded version of the input data.
vi: 
pt: Zlib Compression
fn: gzdeflate
fs: string gzdeflate ( string $data [, int $level ] )
fd: This function compress the given string using the DEFLATE data format. 
vi: PHP 4 >= 4.0.4, PHP 5
pt: Zlib Compression
fn: gzencode
fs: string gzencode ( string $data [, int $level [, int $encoding_mode ]] )
fd: This function returns a compressed version of the input data compatible with the output of the gzip program. 
vi: PHP 4 >= 4.0.4, PHP 5
pt: Zlib Compression
fn: gzeof
fs: int gzeof ( resource $zp )
fd: Tests the given GZ file pointer for EOF (end-of-file).
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzfile
fs: array gzfile ( string $filename [, int $use_include_path ] )
fd: 
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzgetc
fs: string gzgetc ( resource $zp )
fd: Returns a string containing a single (uncompressed) character read from the given gz-file pointer.
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzgets
fs: string gzgets ( resource $zp , int $length )
fd: Gets a (uncompressed) string of up to length - 1 bytes read from the given file pointer. Reading ends when length - 1 bytes have been read, on a newline, or on EOF (whichever comes first).
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzgetss
fs: string gzgetss ( resource $zp , int $length [, string $allowable_tags ] )
fd: 
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzinflate
fs: string gzinflate ( string $data [, int $length ] )
fd: This function inflate a deflated string.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Zlib Compression
fn: gzopen
fs: resource gzopen ( string $filename , string $mode [, int $use_include_path ] )
fd: Opens a gzip (.gz) file for reading or writing. 
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzpassthru
fs: int gzpassthru ( resource $zp )
fd: Reads to EOF on the given gz-file pointer from the current position and writes the (uncompressed) results to standard output. 
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzputs
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzread
fs: string gzread ( resource $zp , int $length )
fd: gzread() reads up to length bytes from the given gz-file pointer. Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzrewind
fs: bool gzrewind ( resource $zp )
fd: Sets the file position indicator of the given gz-file pointer to the beginning of the file stream.
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzseek
fs: int gzseek ( resource $zp , int $offset )
fd: Sets the file position indicator for the given file pointer to the given offset byte into the file stream. Equivalent to calling (in C) gzseek(zp, offset, SEEK_SET). 
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gztell
fs: int gztell ( resource $zp )
fd: Gets the position of the given file pointer; i.e., its offset into the uncompressed file stream.
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: gzuncompress
fs: string gzuncompress ( string $data [, int $length ] )
fd: This function uncompress a compressed string.
vi: PHP 4 >= 4.0.1, PHP 5
pt: Zlib Compression
fn: gzwrite
fs: int gzwrite ( resource $zp , string $string [, int $length ] )
fd: gzwrite() writes the contents of string to the given gz-file.
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: halt_compiler
fs: void __halt_compiler ( void )
fd: Halts the execution of the compiler. This can be useful to embed data in PHP scripts, like the installation files. 
vi: 
pt: Miscellaneous
fn: haruannotation_setborderstyle
fs: bool HaruAnnotation::setBorderStyle ( float $width , int $dash_on , int $dash_off )
fd: Defines the style of the border of the annotation. This function may be used with link annotations only.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruannotation_sethighlightmode
fs: bool HaruAnnotation::setHighlightMode ( int $mode )
fd: Defines the appearance of the annotation when clicked. This function may be used with link annotations only.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruannotation_seticon
fs: bool HaruAnnotation::setIcon ( int $icon )
fd: Defines the style of the annotation icon. This function may be used with text annotations only.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruannotation_setopened
fs: bool HaruAnnotation::setOpened ( bool $opened )
fd: Defines whether the annotation is initially displayed open. This function may be used with text annotations only.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudestination_setfit
fs: bool HaruDestination::setFit ( void )
fd: Defines the appearance of the page to fit the window.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudestination_setfitb
fs: bool HaruDestination::setFitB ( void )
fd: Defines the appearance of the page to fit the bounding box of the page within the window.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudestination_setfitbh
fs: bool HaruDestination::setFitBH ( float $top )
fd: Defines the appearance of the page to magnifying to fit the width of the bounding box and setting the top position of the page to the value of top.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudestination_setfitbv
fs: bool HaruDestination::setFitBV ( float $left )
fd: Defines the appearance of the page to magnifying to fit the height of the bounding box and setting the left position of the page to the value of left.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudestination_setfith
fs: bool HaruDestination::setFitH ( float $top )
fd: Defines the appearance of the page to fit the window width and sets the top position of the page to the value of top.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudestination_setfitr
fs: bool HaruDestination::setFitR ( float $left , float $bottom , float $right , float $top )
fd: Defines the appearance of the page to fit the rectangle by the parameters.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudestination_setfitv
fs: bool HaruDestination::setFitV ( float $left )
fd: Defines the appearance of the page to fit the window height.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudestination_setxyz
fs: bool HaruDestination::setXYZ ( float $left , float $top , float $zoom )
fd: Defines the appearance of the page using three parameters: left, top and zoom.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_addpage
fs: object HaruDoc::addPage ( void )
fd: Adds new page to the document and returns new HaruPage instance.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_addpagelabel
fs: bool HaruDoc::addPageLabel ( int $first_page , int $style , int $first_num [, string $prefix ] )
fd: Set the numbering style for the specified range of pages.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_construct
fs: void HaruDoc::__construct ( void )
fd: Constructs new HaruDoc instance.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_createoutline
fs: object HaruDoc::createOutline ( string $title [, object $parent_outline [, object $encoder ]] )
fd: Creates and returns new HaruOutline instance.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_getcurrentencoder
fs: object HaruDoc::getCurrentEncoder ( void )
fd: Returns HaruEncoder currently used in the document or FALSE if encoder is not set.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_getcurrentpage
fs: object HaruDoc::getCurrentPage ( void )
fd: Get current page of the document. Returns HaruPage instance on success or FALSE if there is no current page at the moment.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_getencoder
fs: object HaruDoc::getEncoder ( string $encoding )
fd: Returns HaruEncoder instance for the specified encoding.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_getfont
fs: object HaruDoc::getFont ( string $fontname [, string $encoding ] )
fd: Creates and returns HaruFont instance with the specified fontname and encoding.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_getinfoattr
fs: string HaruDoc::getInfoAttr ( int $type )
fd: Returns the string value of the specified document attribute.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_getpagelayout
fs: int HaruDoc::getPageLayout ( void )
fd: Returns the page layout currently set in the document or FALSE if page layout was not set.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_getpagemode
fs: int HaruDoc::getPageMode ( void )
fd: Returns the page mode currently set in the document.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_getstreamsize
fs: int HaruDoc::getStreamSize ( void )
fd: Returns the size of the data in the temporary stream of the document. The size is zero if the document was not saved to the temporary stream.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_insertpage
fs: object HaruDoc::insertPage ( object $page )
fd: Creates new page and inserts just before the specified page. Returns new HaruPage instance.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_loadjpeg
fs: object HaruDoc::loadJPEG ( string $filename )
fd: Loads the specified JPEG image and returns new HaruImage instance.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_loadpng
fs: object HaruDoc::loadPNG ( string $filename [, bool $deferred ] )
fd: Loads PNG image and returns HaruImage instance. You can set deferred parameter to TRUE for deferred data loading, in this case only size and color are loaded immediately. Default value of deferred is FALSE. 
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_loadraw
fs: object HaruDoc::loadRaw ( string $filename , int $width , int $height , int $color_space )
fd: Loads RAW image and returns new HaruImage instance.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_loadttc
fs: string HaruDoc::loadTTC ( string $fontfile , int $index [, bool $embed ] )
fd: Loads the TrueType font with the specified index from a TrueType collection file.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_loadttf
fs: string HaruDoc::loadTTF ( string $fontfile [, bool $embed ] )
fd: Loads the given TTF file and (optionally) embed its data into the document.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_loadtype1
fs: string HaruDoc::loadType1 ( string $afmfile [, string $pfmfile ] )
fd: Loads Type1 font from the given file and registers it in the PDF document.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_output
fs: bool HaruDoc::output ( void )
fd: Writes the document data into standard output.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_readfromstream
fs: string HaruDoc::readFromStream ( int $bytes )
fd: Returns data from the temporary stream. The bytes parameter specifies how much bytes to read, though the stream may contain less bytes than requested.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_reseterror
fs: bool HaruDoc::resetError ( void )
fd: Once an error code is set, most of the operations, including I/O processing functions cannot be performed. In case if you want to continue after the cause of the error has been fixed, you have to invoke this function in order to reset the document error state.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_resetstream
fs: bool HaruDoc::resetStream ( void )
fd: Rewinds the temporary stream of the document.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_save
fs: bool HaruDoc::save ( string $file )
fd: Saves the document into the specified file.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_savetostream
fs: bool HaruDoc::saveToStream ( void )
fd: Saves the document data into a temporary stream.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setcompressionmode
fs: bool HaruDoc::setCompressionMode ( int $mode )
fd: Defines compression mode for the document. In case when libharu was compiled without Zlib support this function will always throw HaruException.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setcurrentencoder
fs: bool HaruDoc::setCurrentEncoder ( string $encoding )
fd: Defines the encoder currently used in the document.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setencryptionmode
fs: bool HaruDoc::setEncryptionMode ( int $mode [, int $key_len ] )
fd: Defines encryption mode for the document. The encryption mode cannot be set before setting the password.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setinfoattr
fs: bool HaruDoc::setInfoAttr ( int $type , string $info )
fd: Defines an info attribute. Uses the current encoding of the document.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setinfodateattr
fs: bool HaruDoc::setInfoDateAttr ( int $type , int $year , int $month , int $day , int $hour , int $min , int $sec , string $ind , int $off_hour , int $off_min )
fd: Sets the datetime info attributes of the document.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setopenaction
fs: bool HaruDoc::setOpenAction ( object $destination )
fd: Defines wich page should be shown when the document is opened.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setpagelayout
fs: bool HaruDoc::setPageLayout ( int $layout )
fd: Defines how pages should be displayed.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setpagemode
fs: bool HaruDoc::setPageMode ( int $mode )
fd: Defines how the document should be displayed.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setpagesconfiguration
fs: bool HaruDoc::setPagesConfiguration ( int $page_per_pages )
fd: By default the document has one pages object as a root for all pages. All page objects are create as branches of this object. One pages object can contain only 8191, therefore the maximum number of pages per document is 8191. But you can change that fact by setting page_per_pages parameter, so that the root pages object contains 8191 more pages (not page) objects, which in turn contain 8191 pages each. So the maximum number of pages in the document becomes 8191*page_per_pages.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setpassword
fs: bool HaruDoc::setPassword ( string $owner_password , string $user_password )
fd: Defines owner and user passwords for the document. Setting the passwords makes the document contents encrypted.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_setpermission
fs: bool HaruDoc::setPermission ( int $permission )
fd: Defines permissions for the document.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_usecnsencodings
fs: bool HaruDoc::useCNSEncodings ( void )
fd: Enables Chinese simplified encodings.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_usecnsfonts
fs: bool HaruDoc::useCNSFonts ( void )
fd: Enableis builtin Chinese simplified fonts.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_usecntencodings
fs: bool HaruDoc::useCNTEncodings ( void )
fd: Enables Chinese traditional encodings.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_usecntfonts
fs: bool HaruDoc::useCNTFonts ( void )
fd: Enables builtin Chinese traditional fonts.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_usejpencodings
fs: bool HaruDoc::useJPEncodings ( void )
fd: Enables Japanese encodings.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_usejpfonts
fs: bool HaruDoc::useJPFonts ( void )
fd: Enables builtin Japanese fonts.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_usekrencodings
fs: bool HaruDoc::useKREncodings ( void )
fd: Enables Korean encodings.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harudoc_usekrfonts
fs: bool HaruDoc::useKRFonts ( void )
fd: Enables builtin Korean fonts.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruencoder_getbytetype
fs: int HaruEncoder::getByteType ( string $text , int $index )
fd: Returns the type of the byte in the text on the specified position. The result is one of the following values: HaruEncoder::BYTE_TYPE_SINGLE - single byte character. HaruEncoder::BYTE_TYPE_LEAD - lead byte of a double-byte character. HaruEncoder::BYTE_TYPE_TRAIL - trailing byte of a double-byte character. HaruEncoder::BYTE_TYPE_UNKNOWN - invalid encoder or cannot detect the byte type.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruencoder_gettype
fs: int HaruEncoder::getType ( void )
fd: Returns the type of the encoder. The result is one of the followin values: HaruEncoder::TYPE_SINGLE_BYTE - the encoder is for single byte characters. HaruEncoder::TYPE_DOUBLE_BYTE - the encoder is for multibyte characters. HaruEncoder::TYPE_UNINITIALIZED - the encoder is not initialized. HaruEncoder::UNKNOWN - the encoder is invalid.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruencoder_getunicode
fs: int HaruEncoder::getUnicode ( int $character )
fd: Converts the specified character to unicode.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruencoder_getwritingmode
fs: int HaruEncoder::getWritingMode ( void )
fd: Returns the writing mode of the encoder. The result value is on of the following: HaruEncoder::WMODE_HORIZONTAL - horizontal writing mode. HaruEncoder::WMODE_VERTICAL - vertical writing mode.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harufont_getascent
fs: int HaruFont::getAscent ( void )
fd: Returns the vertical ascent of the font.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harufont_getcapheight
fs: int HaruFont::getCapHeight ( void )
fd: Returns the distance from the baseline of uppercase letters.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harufont_getdescent
fs: int HaruFont::getDescent ( void )
fd: Return the vertical descent of the font.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harufont_getencodingname
fs: string HaruFont::getEncodingName ( void )
fd: Returns the name of the font encoding.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harufont_getfontname
fs: string HaruFont::getFontName ( void )
fd: Returns the name of the font.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harufont_gettextwidth
fs: array HaruFont::getTextWidth ( string $text )
fd: Returns the total width of the text, number of characters, number of words and number of spaces in the given text.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harufont_getunicodewidth
fs: int HaruFont::getUnicodeWidth ( int $character )
fd: Returns the width of the character in the font.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harufont_getxheight
fs: int HaruFont::getXHeight ( void )
fd: Returns the distance from the baseline of lowercase letters.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harufont_measuretext
fs: int HaruFont::measureText ( string $text , float $width , float $font_size , float $char_space , float $word_space [, bool $word_wrap ] )
fd: Returns the number of characters which can be included within the specified width.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruimage_getbitspercomponent
fs: int HaruImage::getBitsPerComponent ( void )
fd: Returns the number of bits used to describe each color component of the image.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruimage_getcolorspace
fs: string HaruImage::getColorSpace ( void )
fd: Returns the name of the color space of the image. The name is one of the following values: DeviceGray, DeviceRGB, DeviceCMYK, Indexed
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruimage_getheight
fs: int HaruImage::getHeight ( void )
fd: Returns the height of the image.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruimage_getsize
fs: array HaruImage::getSize ( void )
fd: Returns an array with two elements: width and height, which contain appropriate dimensions of the image.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruimage_getwidth
fs: int HaruImage::getWidth ( void )
fd: Returns the width of the image.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruimage_setcolormask
fs: bool HaruImage::setColorMask ( int $rmin , int $rmax , int $gmin , int $gmax , int $bmin , int $bmax )
fd: Defines the transparent color of the image using the RGB range values. The color within the range is displayed as a transparent color. The color space of the image must be RGB.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruimage_setmaskimage
fs: bool HaruImage::setMaskImage ( object $mask_image )
fd: Sets the image used as image-mask. It must be 1bit gray-scale color image.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruoutline_setdestination
fs: bool HaruOutline::setDestination ( object $destination )
fd: Sets a destination object which becomes a target to jump to when the outline is clicked.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: haruoutline_setopened
fs: bool HaruOutline::setOpened ( bool $opened )
fd: Defines whether this node is opened or not when the outline is displayed for the first time.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_arc
fs: bool HaruPage::arc ( float $x , float $y , float $ray , float $ang1 , float $ang2 )
fd: Appends an arc to the current path.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_begintext
fs: bool HaruPage::beginText ( void )
fd: Begins new text object and sets the current text position to (0,0).
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_circle
fs: bool HaruPage::circle ( float $x , float $y , float $ray )
fd: Appends a circle to the current path.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_closepath
fs: bool HaruPage::closePath ( void )
fd: Appends a straight line from the current point to the start point of the path.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_concat
fs: bool HaruPage::concat ( float $a , float $b , float $c , float $d , float $x , float $y )
fd: Concatenates current transformation matrix of the page and the specified matrix.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_createdestination
fs: object HaruPage::createDestination ( void )
fd: Creates and returns new HaruDestination instance.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_createlinkannotation
fs: object HaruPage::createLinkAnnotation ( array $rectangle , object $destination )
fd: Creates and returns new HaruAnnotation instance.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_createtextannotation
fs: object HaruPage::createTextAnnotation ( array $rectangle , string $text [, object $encoder ] )
fd: Creates and returns new HaruAnnotation instance.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_createurlannotation
fs: object HaruPage::createURLAnnotation ( array $rectangle , string $url )
fd: Creates and returns new HaruAnnotation instance.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_curveto
fs: bool HaruPage::curveTo ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
fd: Append a Bezier curve to the current path. The point (x1, y1) and the point (x2, y2) are used as the control points for a Bezier curve and current point is moved to the point (x3, y3).
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_curveto2
fs: bool HaruPage::curveTo2 ( float $x2 , float $y2 , float $x3 , float $y3 )
fd: Appends a Bezier curve to the current path. The current point and the point (x2, y2) are used as the control points for the Bezier curve and current point is moved to the point (x3, y3).
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_curveto3
fs: bool HaruPage::curveTo3 ( float $x1 , float $y1 , float $x3 , float $y3 )
fd: Appends a Bezier curve to the current path. The point (x1, y1) and the point (x3, y3) are used as the control points for a Bezier curve and current point is moved to the point (x3, y3).
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_drawimage
fs: bool HaruPage::drawImage ( object $image , float $x , float $y , float $width , float $height )
fd: Show image at the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_ellipse
fs: bool HaruPage::ellipse ( float $x , float $y , float $xray , float $yray )
fd: Appends an ellipse to the current path.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_endpath
fs: bool HaruPage::endPath ( void )
fd: Ends current path object without performing filling and painting operations.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_endtext
fs: bool HaruPage::endText ( void )
fd: Finalizes current text object.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_eofill
fs: bool HaruPage::eofill ( void )
fd: Fills current path using even-odd rule.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_eofillstroke
fs: bool HaruPage::eoFillStroke ([ bool $close_path ] )
fd: Fills current path using even-odd rule, then paints the path.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_fill
fs: bool HaruPage::fill ( void )
fd: Fills current path using nonzero winding number rule.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_fillstroke
fs: bool HaruPage::fillStroke ([ bool $close_path ] )
fd: Fills current path using nonzero winding number rule, then paints the path.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getcharspace
fs: float HaruPage::getCharSpace ( void )
fd: Returns the current value of character spacing.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getcmykfill
fs: array HaruPage::getCMYKFill ( void )
fd: Returns the current filling color as an array with 4 elements (c, m, y and k).
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getcmykstroke
fs: array HaruPage::getCMYKStroke ( void )
fd: Returns the current stroking color as an array with 4 elements (c, m, y and k).
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getcurrentfont
fs: object HaruPage::getCurrentFont ( void )
fd: Returns the currently used font as an instance of HaruFont.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getcurrentfontsize
fs: float HaruPage::getCurrentFontSize ( void )
fd: Returns the current font size.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getcurrentpos
fs: array HaruPage::getCurrentPos ( void )
fd: Returns the current position for path painting as an array of with two elements - x and y.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getcurrenttextpos
fs: array HaruPage::getCurrentTextPos ( void )
fd: Returns the current position for text printing as an array with 2 elements - x and y.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getdash
fs: array HaruPage::getDash ( void )
fd: Returns the current dash pattern as an array of two elements - pattern and phase or FALSE if dash pattern was not set.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getfillingcolorspace
fs: int HaruPage::getFillingColorSpace ( void )
fd: Returns the current filling color space. The result value is one of the following: HaruDoc::CS_DEVICE_GRAY. HaruDoc::CS_DEVICE_RGB. HaruDoc::CS_DEVICE_CMYK. HaruDoc::CS_CAL_GRAY. HaruDoc::CS_CAL_RGB. HaruDoc::CS_LAB. HaruDoc::CS_ICC_BASED. HaruDoc::CS_SEPARATION. HaruDoc::CS_DEVICE_N. HaruDoc::CS_INDEXED. HaruDoc::CS_PATTERN.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getflatness
fs: float HaruPage::getFlatness ( void )
fd: Returns the flatness of the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getgmode
fs: int HaruPage::getGMode ( void )
fd: Returns the current graphics mode. The result value is one of the following: HaruPage::GMODE_PAGE_DESCRIPTION. HaruPage::GMODE_TEXT_OBJECT. HaruPage::GMODE_PATH_OBJECT. HaruPage::GMODE_CLIPPING_PATH. HaruPage::GMODE_SHADING. HaruPage::GMODE_INLINE_IMAGE. HaruPage::GMODE_EXTERNAL_OBJECT.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getgrayfill
fs: float HaruPage::getGrayFill ( void )
fd: Returns the current filling color.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getgraystroke
fs: float HaruPage::getGrayStroke ( void )
fd: Returns the current stroking color.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getheight
fs: float HaruPage::getHeight ( void )
fd: Returns the height of the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_gethorizontalscaling
fs: float HaruPage::getHorizontalScaling ( void )
fd: Returns the current value of horizontal scaling.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getlinecap
fs: int HaruPage::getLineCap ( void )
fd: Returns the current line cap style. The result value is one of the following: HaruPage::BUTT_END - the line is squared off at the endpoint of the path. HaruPage::ROUND_END - the end of the line becomes a semicircle with center in the end point of the path. HaruPage::PROJECTING_SCUARE_END - the line continues to the point that exceeds half of the stroke width the end point.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getlinejoin
fs: int HaruPage::getLineJoin ( void )
fd: Returns the current line join style. The result value is one of the following: HaruPage::MITER_JOIN. HaruPage::ROUND_JOIN. HaruPage::BEVEL_JOIN.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getlinewidth
fs: float HaruPage::getLineWidth ( void )
fd: Returns the current line width.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getmiterlimit
fs: float HaruPage::getMiterLimit ( void )
fd: Returns the value of miter limit.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getrgbfill
fs: array HaruPage::getRGBFill ( void )
fd: Returns the current filling color as an array with 3 elements: r, g and b.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getrgbstroke
fs: array HaruPage::getRGBStroke ( void )
fd: Returns the current stroking color.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getstrokingcolorspace
fs: int HaruPage::getStrokingColorSpace ( void )
fd: Returns the current stroking color space.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_gettextleading
fs: float HaruPage::getTextLeading ( void )
fd: Returns the current value of line spacing.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_gettextmatrix
fs: array HaruPage::getTextMatrix ( void )
fd: Returns the current text transformation matrix of the page as an array of 6 elements: a, b, c, d, x and y.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_gettextrenderingmode
fs: int HaruPage::getTextRenderingMode ( void )
fd: Returns the current text rendering mode. The result value is one of the following: HaruPage::FILL. HaruPage::STROKE. HaruPage::FILL_THEN_STROKE. HaruPage::INVISIBLE. HaruPage::FILL_CLIPPING. HaruPage::STROKE_CLIPPING. HaruPage::FILL_STROKE_CLIPPING. HaruPage::CLIPPING.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_gettextrise
fs: float HaruPage::getTextRise ( void )
fd: Returns the current value of text rising.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_gettextwidth
fs: float HaruPage::getTextWidth ( string $text )
fd: Returns the width of the text using current fontsize, character spacing and word spacing.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_gettransmatrix
fs: array HaruPage::getTransMatrix ( void )
fd: Returns the current transformation matrix of the page as an array of 6 elements: a, b, c, d, x and y.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getwidth
fs: float HaruPage::getWidth ( void )
fd: Returns the width of the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_getwordspace
fs: float HaruPage::getWordSpace ( void )
fd: Returns the current value of word spacing.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_lineto
fs: bool HaruPage::lineTo ( float $x , float $y )
fd: Draws a line from the current point to the specified point.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_measuretext
fs: int HaruPage::measureText ( string $text , float $width [, bool $wordwrap ] )
fd: Returns the number of characters which can be included within the specified width.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_movetextpos
fs: bool HaruPage::moveTextPos ( float $x , float $y [, bool $set_leading ] )
fd: Moves text position to the specified offset. If the start position of the current line is (x1, y1), the start of the next line is (x1 + x, y1 + y). If optional parameter set_leading is TRUE, the function sets the text leading to -y. The default value of set_leading is FALSE.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_moveto
fs: bool HaruPage::moveTo ( float $x , float $y )
fd: Defines starting point for new drawing path.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_movetonextline
fs: bool HaruPage::moveToNextLine ( void )
fd: Moves text position to the start of the next line.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_rectangle
fs: bool HaruPage::rectangle ( float $x , float $y , float $width , float $height )
fd: Appends a rectangle to the current drawing path.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setcharspace
fs: bool HaruPage::setCharSpace ( float $char_space )
fd: Defines character spacing for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setcmykfill
fs: bool HaruPage::setCMYKFill ( float $c , float $m , float $y , float $k )
fd: Defines filling color for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setcmykstroke
fs: bool HaruPage::setCMYKStroke ( float $c , float $m , float $y , float $k )
fd: Defines stroking color for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setdash
fs: bool HaruPage::setDash ( array $pattern , int $phase )
fd: Defines the dash pattern for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setflatness
fs: bool HaruPage::setFlatness ( float $flatness )
fd: Defines flatness for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setfontandsize
fs: bool HaruPage::setFontAndSize ( object $font , float $size )
fd: Defines current font and its size for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setgrayfill
fs: bool HaruPage::setGrayFill ( float $value )
fd: Defines filling color for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setgraystroke
fs: bool HaruPage::setGrayStroke ( float $value )
fd: Defines stroking color for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setheight
fs: bool HaruPage::setHeight ( float $height )
fd: Defines height of the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_sethorizontalscaling
fs: bool HaruPage::setHorizontalScaling ( float $scaling )
fd: Defines horizontal scaling for text showing on the page. The initial value is 100.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setlinecap
fs: bool HaruPage::setLineCap ( int $cap )
fd: Defines the shape to be used at the ends of lines.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setlinejoin
fs: bool HaruPage::setLineJoin ( int $join )
fd: Defines line join style for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setlinewidth
fs: bool HaruPage::setLineWidth ( float $width )
fd: Defines line width for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setmiterlimit
fs: bool HaruPage::setMiterLimit ( float $limit )
fd: Defines the current value of the miter limit of the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setrgbfill
fs: bool HaruPage::setRGBFill ( float $r , float $g , float $b )
fd: Defines filling color for the page. All values must be between 0 and 1.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setrgbstroke
fs: bool HaruPage::setRGBStroke ( float $r , float $g , float $b )
fd: Defines stroking color for the page. All values must be between 0 and 1.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setrotate
fs: bool HaruPage::setRotate ( int $angle )
fd: Defines rotation angle of the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setsize
fs: bool HaruPage::setSize ( int $size , int $direction )
fd: Changes size and direction of the page to a predefined format.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setslideshow
fs: bool HaruPage::setSlideShow ( int $type , float $disp_time , float $trans_time )
fd: Defines transition style for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_settextleading
fs: bool HaruPage::setTextLeading ( float $text_leading )
fd: Defines line spacing for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_settextmatrix
fs: bool HaruPage::setTextMatrix ( float $a , float $b , float $c , float $d , float $x , float $y )
fd: Defines the text transformation matrix of the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_settextrenderingmode
fs: bool HaruPage::setTextRenderingMode ( int $mode )
fd: Defines text rendering mode for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_settextrise
fs: bool HaruPage::setTextRise ( float $rise )
fd: Defines the current value of text rising.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setwidth
fs: bool HaruPage::setWidth ( float $width )
fd: Defines width of the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_setwordspace
fs: bool HaruPage::setWordSpace ( float $word_space )
fd: Defines word spacing for the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_showtext
fs: bool HaruPage::showText ( string $text )
fd: Prints out the text at the current position of the page.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_showtextnextline
fs: bool HaruPage::showTextNextLine ( string $text [, float $word_space [, float $char_space ]] )
fd: Moves the current position to the start of the next line and print out the text.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_stroke
fs: bool HaruPage::stroke ([ bool $close_path ] )
fd: Paints the current path.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_textout
fs: bool HaruPage::textOut ( float $x , float $y , string $text )
fd: Prints the text on the specified position.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: harupage_textrect
fs: bool HaruPage::textRect ( float $left , float $top , float $right , float $bottom , string $text [, int $align ] )
fd: Prints the text inside the specified region.
vi: PECL haru:0.0.1
pt: Haru PDF
fn: hash
fs: string hash ( string $algo , string $data [, bool $raw_output ] )
fd: 
vi: PHP 5 >= 5.1.2, PECL hash:1.1-1.5
pt: hash
fn: hash_algos
fs: array hash_algos ( void )
fd: 
vi: PHP 5 >= 5.1.2, PECL hash:1.1-1.5
pt: hash
fn: hash_file
fs: string hash_file ( string $algo , string $filename [, bool $raw_output ] )
fd: 
vi: PHP 5 >= 5.1.2, PECL hash:1.1-1.5
pt: hash
fn: hash_final
fs: string hash_final ( resource $context [, bool $raw_output ] )
fd: 
vi: PHP 5 >= 5.1.2, PECL hash:1.1-1.5
pt: hash
fn: hash_hmac
fs: string hash_hmac ( string $algo , string $data , string $key [, bool $raw_output ] )
fd: 
vi: PHP 5 >= 5.1.2, PECL hash:1.1-1.5
pt: hash
fn: hash_hmac_file
fs: string hash_hmac_file ( string $algo , string $filename , string $key [, bool $raw_output ] )
fd: 
vi: PHP 5 >= 5.1.2, PECL hash:1.1-1.5
pt: hash
fn: hash_init
fs: resource hash_init ( string $algo [, int $options ], string $key )
fd: 
vi: PHP 5 >= 5.1.2, PECL hash:1.1-1.5
pt: hash
fn: hash_update
fs: bool hash_update ( resource $context , string $data )
fd: 
vi: PHP 5 >= 5.1.2, PECL hash:1.1-1.5
pt: hash
fn: hash_update_file
fs: bool hash_update_file ( resource $context , string $filename [, resource $context ] )
fd: 
vi: PHP 5 >= 5.1.2, PECL hash:1.1-1.5
pt: hash
fn: hash_update_stream
fs: int hash_update_stream ( resource $context , resource $handle [, int $length ] )
fd: 
vi: PHP 5 >= 5.1.2, PECL hash:1.1-1.5
pt: hash
fn: header
fs: void header ( string $string [, bool $replace [, int $http_response_code ]] )
fd: 
vi: PHP 4, PHP 5
pt: Network
fn: headers_list
fs: array headers_list ( void )
fd: headers_list() will return a list of headers to be sent to the browser / client.
vi: PHP 5
pt: Network
fn: headers_sent
fs: bool headers_sent ([ string &$file [, int &$line ]] )
fd: Checks if or where headers have been sent. 
vi: PHP 4, PHP 5
pt: Network
fn: hebrev
fs: string hebrev ( string $hebrew_text [, int $max_chars_per_line ] )
fd: Converts logical Hebrew text to visual text. 
vi: PHP 4, PHP 5
pt: String
fn: hebrevc
fs: string hebrevc ( string $hebrew_text [, int $max_chars_per_line ] )
fd: 
vi: PHP 4, PHP 5
pt: String
fn: hexdec
fs: number hexdec ( string $hex_string )
fd: Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number. 
vi: PHP 4, PHP 5
pt: Mathematical
fn: highlight_file
fs: mixed highlight_file ( string $filename [, bool $return ] )
fd: Prints out or returns a syntax highlighted version of the code contained in filename using the colors defined in the built-in syntax highlighter for PHP. 
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: highlight_string
fs: mixed highlight_string ( string $str [, bool $return ] )
fd: 
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: html_entity_decode
fs: string html_entity_decode ( string $string [, int $quote_style [, string $charset ]] )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: String
fn: htmlentities
fs: string htmlentities ( string $string [, int $quote_style [, string $charset [, bool $double_encode ]]] )
fd: 
vi: PHP 4, PHP 5
pt: String
fn: htmlspecialchars
fs: 
fd: 
vi: PHP 4, PHP 5
pt: String
fn: htmlspecialchars_decode
fs: string htmlspecialchars_decode ( string $string [, int $quote_style ] )
fd: 
vi: PHP 5 >= 5.1.0
pt: String
fn: http_build_cookie
fs: string http_build_cookie ( array $cookie )
fd: 
vi: PECL pecl_http:1.2.0-1.5.5
pt: HTTP
fn: http_build_query
fs: string http_build_query ( array $formdata [, string $numeric_prefix [, string $arg_separator ]] )
fd: Generates a URL-encoded query string from the associative (or indexed) array provided.
vi: PHP 5, PECL pecl_http:0.1.0-0.9.0
pt: URL
fn: http_build_str
fs: string http_build_str ( array $query [, string $prefix [, string $arg_separator ]] )
fd: Opponent to parse_str().
vi: PECL pecl_http:0.23.0-1.5.5
pt: HTTP
fn: http_build_url
fs: string http_build_url ([ mixed $url [, mixed $parts [, int $flags = HTTP_URL_REPLACE [, array &$new_url ]]]] )
fd: Build an URL. 
vi: PECL pecl_http:0.21.0-1.5.5
pt: HTTP
fn: http_cache_etag
fs: bool http_cache_etag ([ string $etag ] )
fd: 
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_cache_last_modified
fs: bool http_cache_last_modified ([ int $timestamp_or_expires ] )
fd: Attempts to cache the sent entity by its last modification date. 
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_chunked_decode
fs: string http_chunked_decode ( string $encoded )
fd: Decodes a string which is HTTP-chunked encoded.
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_date
fs: string http_date ([ int $timestamp ] )
fd: Compose a valid HTTP date regarding RFC 1123 looking like: Wed, 22 Dec 2004 11:34:47 GMT.
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_deflate
fs: string http_deflate ( string $data [, int $flags = 0 ] )
fd: Compress data with gzip, zlib AKA deflate or raw deflate encoding. 
vi: PECL pecl_http:0.15.0-1.5.5
pt: HTTP
fn: http_get
fs: string http_get ( string $url [, array $options [, array &$info ]] )
fd: Performs an HTTP GET request on the supplied url. 
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_get_request_body
fs: string http_get_request_body ( void )
fd: Get the raw request body (e.g. POST or PUT data). 
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_get_request_body_stream
fs: resource http_get_request_body_stream ( void )
fd: Create a stream to read the raw request body (e.g. POST or PUT data). 
vi: PECL pecl_http:0.22.0-1.5.5
pt: HTTP
fn: http_get_request_headers
fs: array http_get_request_headers ( void )
fd: Get a list of incoming HTTP headers.
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_head
fs: string http_head ([ string $url [, array $options [, array &$info ]]] )
fd: Performs an HTTP HEAD request on the supplied url. 
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_inflate
fs: string http_inflate ( string $data )
fd: Decompress data compressed with either gzip, deflate AKA zlib or raw deflate encoding.
vi: PECL pecl_http:0.15.0-1.5.5
pt: HTTP
fn: http_match_etag
fs: bool http_match_etag ( string $etag [, bool $for_range = FALSE ] )
fd: Matches the given ETag against the clients If-Match resp. If-None-Match HTTP headers.
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_match_modified
fs: bool http_match_modified ([ int $timestamp [, bool $for_range = FALSE ]] )
fd: Matches the given Unix timestamp against the clients If-Modified-Since resp. If-Unmodified-Since HTTP headers.
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_match_request_header
fs: bool http_match_request_header ( string $header , string $value [, bool $match_case = FALSE ] )
fd: Match an incoming HTTP header.
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_negotiate_charset
fs: string http_negotiate_charset ( array $supported [, array &$result ] )
fd: This function negotiates the clients preferred charset based on its Accept-Charset HTTP header. The qualifier is recognized and charsets without qualifier are rated highest.
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_negotiate_content_type
fs: string http_negotiate_content_type ( array $supported [, array &$result ] )
fd: This function negotiates the clients preferred content type based on its Accept HTTP header. The qualifier is recognized and content types without qualifier are rated highest.
vi: PECL pecl_http:0.19.0-1.5.5
pt: HTTP
fn: http_negotiate_language
fs: string http_negotiate_language ( array $supported [, array &$result ] )
fd: This function negotiates the clients preferred language based on its Accept-Language HTTP header. The qualifier is recognized and languages without qualifier are rated highest. The qualifier will be decreased by 10% for partial matches (i.e. matching primary language).
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_parse_cookie
fs: object http_parse_cookie ( string $cookie [, int $flags [, array $allowed_extras ]] )
fd: Parses HTTP cookies like sent in a response into a struct.
vi: PECL pecl_http:0.20.0-1.5.5
pt: HTTP
fn: http_parse_headers
fs: array http_parse_headers ( string $header )
fd: Parses HTTP headers into an associative array.
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_parse_message
fs: object http_parse_message ( string $message )
fd: 
vi: PECL pecl_http:0.12.0-1.5.5
pt: HTTP
fn: http_parse_params
fs: object http_parse_params ( string $param [, int $flags = HTTP_PARAMS_DEFAULT ] )
fd: Parse parameter list. 
vi: PECL pecl_http:1.0.0-1.5.5
pt: HTTP
fn: http_persistent_handles_clean
fs: string http_persistent_handles_clean ([ string $ident ] )
fd: Clean up (close) persistent handles, optionally identified with ident.
vi: PECL pecl_http:1.5.0-1.5.5
pt: HTTP
fn: http_persistent_handles_count
fs: object http_persistent_handles_count ( void )
fd: List statistics about persistent handles usage.
vi: PECL pecl_http:1.5.0-1.5.5
pt: HTTP
fn: http_persistent_handles_ident
fs: string http_persistent_handles_ident ( string $ident )
fd: Query or define the ident of persistent handles.
vi: PECL pecl_http:1.5.0-1.5.5
pt: HTTP
fn: http_post_data
fs: string http_post_data ( string $url [, string $data [, array $options [, array &$info ]]] )
fd: Performs an HTTP POST request on the supplied url. 
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_post_fields
fs: string http_post_fields ( string $url [, array $data [, array $files [, array $options [, array &$info ]]]] )
fd: Performs an HTTP POST request on the supplied url. 
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_put_data
fs: string http_put_data ( string $url [, string $data [, array $options [, array &$info ]]] )
fd: Performs an HTTP PUT request on the supplied url. 
vi: PECL pecl_http:0.25.0-1.5.5
pt: HTTP
fn: http_put_file
fs: string http_put_file ( string $url [, string $file [, array $options [, array &$info ]]] )
fd: Performs an HTTP PUT request on the supplied url. 
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_put_stream
fs: string http_put_stream ( string $url [, resource $stream [, array $options [, array &$info ]]] )
fd: Performs an HTTP PUT request on the supplied url. 
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_redirect
fs: void http_redirect ([ string $url [, array $params [, bool $session = FALSE [, int $status ]]]] )
fd: Redirect to the given url. 
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_request
fs: string http_request ( int $method [, string $url [, string $body [, array $options [, array &$info ]]]] )
fd: Performs a custom HTTP request on the supplied url. 
vi: PECL pecl_http:1.0.0-1.5.5
pt: HTTP
fn: http_request_body_encode
fs: string http_request_body_encode ( array $fields , array $files )
fd: Generate x-www-form-urlencoded resp. form-data encoded request body.
vi: PECL pecl_http:1.0.0-1.5.5
pt: HTTP
fn: http_request_method_exists
fs: int http_request_method_exists ( mixed $method )
fd: Check if a request method is registered (or available by default).
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_request_method_name
fs: string http_request_method_name ( int $method )
fd: Get the literal string representation of a standard or registered request method.
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_request_method_register
fs: int http_request_method_register ( string $method )
fd: Register a custom request method.
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_request_method_unregister
fs: bool http_request_method_unregister ( mixed $method )
fd: Unregister a previously registered custom request method.
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_send_content_disposition
fs: bool http_send_content_disposition ( string $filename [, bool $inline = FALSE ] )
fd: Send the Content-Disposition. The Content-Disposition header is very useful if the data actually sent came from a file or something similar, that should be saved by the client/user (i.e. by browsers Save as... popup window). 
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_send_content_type
fs: bool http_send_content_type ([ string $content_type = 'application/x-octetstream' ] )
fd: Send the Content-Type of the sent entity. 
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: http_send_data
fs: bool http_send_data ( string $data )
fd: Sends raw data with support for (multiple) range requests.
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_send_file
fs: bool http_send_file ( string $file )
fd: Sends a file with support for (multiple) range requests. 
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_send_last_modified
fs: bool http_send_last_modified ([ int $timestamp ] )
fd: Send a Last-Modified header with a valid HTTP date. 
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_send_status
fs: bool http_send_status ( int $status )
fd: Send HTTP status code.
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_send_stream
fs: bool http_send_stream ( resource $stream )
fd: Sends an already opened stream with support for (multiple) range requests.
vi: PECL pecl_http:0.1.0-1.5.5
pt: HTTP
fn: http_support
fs: int http_support ([ int $feature = 0 ] )
fd: Check for features that require external libraries. 
vi: PECL pecl_http:0.15.0-1.5.5
pt: HTTP
fn: http_throttle
fs: void http_throttle ([ float $sec [, int $bytes = 40960 ]] )
fd: Sets the throttle delay and send buffer size. 
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: hw_array2objrec
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_changeobject
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_children
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_childrenobj
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_close
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_connect
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_connection_info
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_cp
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_deleteobject
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_docbyanchor
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_docbyanchorobj
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_document_attributes
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_document_bodytag
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_document_content
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_document_setcontent
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_document_size
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_dummy
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_edittext
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_error
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_errormsg
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_free_document
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getanchors
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getanchorsobj
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getandlock
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getchildcoll
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getchildcollobj
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getchilddoccoll
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getchilddoccollobj
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getobject
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getobjectbyquery
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getobjectbyquerycoll
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getobjectbyquerycollobj
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getobjectbyqueryobj
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getparents
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getparentsobj
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getrellink
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getremote
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getremotechildren
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getsrcbydestobj
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_gettext
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_getusername
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_identify
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_incollections
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_info
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_inscoll
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_insdoc
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_insertanchors
fs: 
fd: 
vi: PHP 4 >= 4.0.4
pt: Hyperwave
fn: hw_insertdocument
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_insertobject
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_mapid
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_modifyobject
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_mv
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_new_document
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_objrec2array
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_output_document
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_pconnect
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_pipedocument
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_root
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_setlinkroot
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_stat
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_unlock
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hw_who
fs: 
fd: 
vi: PHP 4
pt: Hyperwave
fn: hwapi_attribute
fs: HW_API_Attribute hw_api_attribute ([ string $name [, string $value ]] )
fd: Creates a new instance of hw_api_attribute with the given name and value.
vi: 
pt: Hyperwave API
fn: hwapi_attribute_key
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_attribute_langdepvalue
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_attribute_value
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_attribute_values
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_checkin
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_checkout
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_children
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_content
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_content_mimetype
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_content_read
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_copy
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_dbstat
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_dcstat
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_dstanchors
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_dstofsrcanchor
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_error_count
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_error_reason
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_find
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_ftstat
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_hgcsp
fs: HW_API hwapi_hgcsp ( string $hostname [, int $port ] )
fd: Opens a connection to the Hyperwave server on host hostname. The protocol used is HGCSP.
vi: 
pt: Hyperwave API
fn: hwapi_hwstat
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_identify
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_info
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_insert
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_insertanchor
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_insertcollection
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_insertdocument
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_link
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_lock
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_move
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_new_content
fs: HW_API_Content hw_api_content ( string $content , string $mimetype )
fd: Creates a new content object from the string content.
vi: 
pt: Hyperwave API
fn: hwapi_object
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_object_assign
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_object_attreditable
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_object_count
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_object_insert
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_object_new
fs: hw_api_object hw_api_object ( array $parameter )
fd: Creates a new instance of the class hw_api_object.
vi: 
pt: Hyperwave API
fn: hwapi_object_remove
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_object_title
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_object_value
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_objectbyanchor
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_parents
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_reason_description
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_reason_type
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_remove
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_replace
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_setcommittedversion
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_srcanchors
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_srcsofdst
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_unlock
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_user
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hwapi_userlist
fs: 
fd: 
vi: 
pt: Hyperwave API
fn: hypot
fs: float hypot ( float $x , float $y )
fd: hypot() returns the length of the hypotenuse of a right-angle triangle with sides of length x and y, or the distance of the point (x, y) from the origin. This is equivalent to sqrt(x*x + y*y).
vi: PHP 4 >= 4.0.7, PHP 5
pt: Mathematical
fn: ibase_add_user
fs: bool ibase_add_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )
fd: PHP 4 uses server, dba_user_name and dba_user_password instead of service_handle parameter. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Firebird/InterBase
fn: ibase_affected_rows
fs: int ibase_affected_rows ([ resource $link_identifier ] )
fd: This function returns the number of rows that were affected by the previous query (INSERT, UPDATE or DELETE) that was executed from within the specified transaction context.
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_backup
fs: mixed ibase_backup ( resource $service_handle , string $source_db , string $dest_file [, int $options [, bool $verbose ]] )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_blob_add
fs: void ibase_blob_add ( resource $blob_handle , string $data )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_blob_cancel
fs: bool ibase_blob_cancel ( resource $blob_handle )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_blob_close
fs: mixed ibase_blob_close ( resource $blob_handle )
fd: This function closes a BLOB that has either been opened for reading by ibase_open_blob() or has been opened for writing by ibase_create_blob().
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_blob_create
fs: resource ibase_blob_create ([ resource $link_identifier ] )
fd: ibase_blob_create() creates a new BLOB for filling with data.
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_blob_echo
fs: bool ibase_blob_echo ([ resource $link_identifier ], string $blob_id )
fd: This function opens a BLOB for reading and sends its contents directly to standard output (the browser, in most cases).
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_blob_get
fs: string ibase_blob_get ( resource $blob_handle , int $len )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_blob_import
fs: string ibase_blob_import ( resource $link_identifier , resource $file_handle )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_blob_info
fs: array ibase_blob_info ( resource $link_identifier , string $blob_id )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_blob_open
fs: resource ibase_blob_open ( resource $link_identifier , string $blob_id )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_close
fs: bool ibase_close ([ resource $connection_id ] )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_commit
fs: bool ibase_commit ([ resource $link_or_trans_identifier ] )
fd: Commits a transaction.
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_commit_ret
fs: bool ibase_commit_ret ([ resource $link_or_trans_identifier ] )
fd: Commits a transaction without closing it.
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_connect
fs: resource ibase_connect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )
fd: Establishes a connection to an InterBase server. 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_db_info
fs: string ibase_db_info ( resource $service_handle , string $db , int $action [, int $argument ] )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_delete_user
fs: bool ibase_delete_user ( resource $service_handle , string $user_name )
fd: PHP 4 uses server, dba_user_name and dba_user_password instead of service_handle parameter. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Firebird/InterBase
fn: ibase_drop_db
fs: bool ibase_drop_db ([ resource $connection ] )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_errcode
fs: int ibase_errcode ( void )
fd: Returns the error code that resulted from the most recent InterBase function call.
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_errmsg
fs: string ibase_errmsg ( void )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_execute
fs: resource ibase_execute ( resource $query [, mixed $bind_arg [, mixed $... ]] )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_fetch_assoc
fs: array ibase_fetch_assoc ( resource $result [, int $fetch_flag ] )
fd: Fetch a result row from a query as an associative array. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Firebird/InterBase
fn: ibase_fetch_object
fs: object ibase_fetch_object ( resource $result_id [, int $fetch_flag ] )
fd: Fetches a row as a pseudo-object from a given result identifier. 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_fetch_row
fs: array ibase_fetch_row ( resource $result_identifier [, int $fetch_flag ] )
fd: ibase_fetch_row() fetches one row of data from the given result set. 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_field_info
fs: array ibase_field_info ( resource $result , int $field_number )
fd: Returns an array with information about a field after a select query has been run.
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_free_event_handler
fs: bool ibase_free_event_handler ( resource $event )
fd: This function causes the registered event handler specified by event to be cancelled. The callback function will no longer be called for the events it was registered to handle.
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_free_query
fs: bool ibase_free_query ( resource $query )
fd: Frees a prepared query.
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_free_result
fs: bool ibase_free_result ( resource $result_identifier )
fd: Frees a result set.
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_gen_id
fs: mixed ibase_gen_id ( string $generator [, int $increment [, resource $link_identifier ]] )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_maintain_db
fs: bool ibase_maintain_db ( resource $service_handle , string $db , int $action [, int $argument ] )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_modify_user
fs: bool ibase_modify_user ( resource $service_handle , string $user_name , string $password [, string $first_name [, string $middle_name [, string $last_name ]]] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Firebird/InterBase
fn: ibase_name_result
fs: bool ibase_name_result ( resource $result , string $name )
fd: This function assigns a name to a result set. This name can be used later in UPDATE|DELETE ... WHERE CURRENT OF name statements.
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_num_fields
fs: int ibase_num_fields ( resource $result_id )
fd: Get the number of fields in a result set.
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_num_params
fs: int ibase_num_params ( resource $query )
fd: This function returns the number of parameters in the prepared query specified by query.
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_param_info
fs: array ibase_param_info ( resource $query , int $param_number )
fd: Returns an array with information about a parameter after a query has been prepared.
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_pconnect
fs: resource ibase_pconnect ([ string $database [, string $username [, string $password [, string $charset [, int $buffers [, int $dialect [, string $role [, int $sync ]]]]]]]] )
fd: Opens a persistent connection to an InterBase database. 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_prepare
fs: resource ibase_prepare ( string $query )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_query
fs: resource ibase_query ([ resource $link_identifier ], string $query [, int $bind_args ] )
fd: 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_restore
fs: mixed ibase_restore ( resource $service_handle , string $source_file , string $dest_db [, int $options [, bool $verbose ]] )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_rollback
fs: bool ibase_rollback ([ resource $link_or_trans_identifier ] )
fd: Rolls back a transaction.
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_rollback_ret
fs: bool ibase_rollback_ret ([ resource $link_or_trans_identifier ] )
fd: Rolls back a transaction without closing it.
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_server_info
fs: string ibase_server_info ( resource $service_handle , int $action )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_service_attach
fs: resource ibase_service_attach ( string $host , string $dba_username , string $dba_password )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_service_detach
fs: bool ibase_service_detach ( resource $service_handle )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_set_event_handler
fs: resource ibase_set_event_handler ( callback $event_handler , string $event_name1 [, string $event_name2 [, string $... ]] )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: ibase_timefmt
fs: bool ibase_timefmt ( string $format [, int $columntype ] )
fd: Sets the format of timestamp, date or time type columns returned from queries. 
vi: PHP 4
pt: Firebird/InterBase
fn: ibase_trans
fs: resource ibase_trans ([ int $trans_args [, resource $link_identifier ]] )
fd: Begins a transaction. 
vi: PHP 4, PHP 5
pt: Firebird/InterBase
fn: ibase_wait_event
fs: string ibase_wait_event ( string $event_name1 [, string $event_name2 [, string $... ]] )
fd: 
vi: PHP 5
pt: Firebird/InterBase
fn: iconv
fs: string iconv ( string $in_charset , string $out_charset , string $str )
fd: Performs a character set conversion on the string str from in_charset to out_charset.
vi: PHP 4 >= 4.0.5, PHP 5
pt: iconv
fn: iconv_get_encoding
fs: mixed iconv_get_encoding ([ string $type ] )
fd: Retrieve internal configuration variables of iconv extension.
vi: PHP 4 >= 4.0.5, PHP 5
pt: iconv
fn: iconv_mime_decode
fs: string iconv_mime_decode ( string $encoded_header [, int $mode [, string $charset ]] )
fd: Decodes a MIME header field.
vi: PHP 5
pt: iconv
fn: iconv_mime_decode_headers
fs: array iconv_mime_decode_headers ( string $encoded_headers [, int $mode [, string $charset ]] )
fd: Returns an associative array that holds a whole set of MIME header fields specified by encoded_headers on success, or FALSE if an error occurs during the decoding. 
vi: PHP 5
pt: iconv
fn: iconv_mime_encode
fs: string iconv_mime_encode ( string $field_name , string $field_value [, array $preferences ] )
fd: Composes and returns a string that represents a valid MIME header field.
vi: PHP 5
pt: iconv
fn: iconv_set_encoding
fs: bool iconv_set_encoding ( string $type , string $charset )
fd: Changes the value of the internal configuration variable specified by type to charset.
vi: PHP 4 >= 4.0.5, PHP 5
pt: iconv
fn: iconv_strlen
fs: int iconv_strlen ( string $str [, string $charset ] )
fd: 
vi: PHP 5
pt: iconv
fn: iconv_strpos
fs: int iconv_strpos ( string $haystack , string $needle [, int $offset [, string $charset ]] )
fd: Finds position of first occurrence of a needle within a haystack. 
vi: PHP 5
pt: iconv
fn: iconv_strrpos
fs: int iconv_strrpos ( string $haystack , string $needle [, string $charset ] )
fd: 
vi: PHP 5
pt: iconv
fn: iconv_substr
fs: string iconv_substr ( string $str , int $offset [, int $length [, string $charset ]] )
fd: Cuts a portion of str specified by the offset and length parameters.
vi: PHP 5
pt: iconv
fn: id3_get_frame_long_name
fs: string id3_get_frame_long_name ( string $frameId )
fd: id3_get_frame_long_name() returns the long name for an ID3v2 frame.
vi: PECL id3:0.2
pt: ID3
fn: id3_get_frame_short_name
fs: string id3_get_frame_short_name ( string $frameId )
fd: id3_get_frame_short_name() returns the short name for an ID3v2 frame.
vi: PECL id3:0.2
pt: ID3
fn: id3_get_genre_id
fs: int id3_get_genre_id ( string $genre )
fd: id3_get_genre_id() returns the id for a genre.
vi: PECL id3:0.1-0.2
pt: ID3
fn: id3_get_genre_list
fs: array id3_get_genre_list ( void )
fd: id3_get_genre_list() returns an array containing all possible genres that may be stored in an ID3 tag. This list has been created by Eric Kemp and later extended by WinAmp. 
vi: PECL id3:0.1-0.2
pt: ID3
fn: id3_get_genre_name
fs: string id3_get_genre_name ( int $genre_id )
fd: id3_get_genre_name() returns the name for a genre id.
vi: PECL id3:0.1-0.2
pt: ID3
fn: id3_get_tag
fs: array id3_get_tag ( string $filename [, int $version ] )
fd: id3_get_tag() is used to get all information stored in the id3 tag of the specified file.
vi: PECL id3:0.1-0.2
pt: ID3
fn: id3_get_version
fs: int id3_get_version ( string $filename )
fd: id3_get_version() retrieves the version(s) of the ID3 tag(s) in the MP3 file. 
vi: PECL id3:0.1-0.2
pt: ID3
fn: id3_remove_tag
fs: bool id3_remove_tag ( string $filename [, int $version ] )
fd: id3_remove_tag() is used to remove the information stored of an ID3 tag.
vi: PECL id3:0.1-0.2
pt: ID3
fn: id3_set_tag
fs: bool id3_set_tag ( string $filename , array $tag [, int $version ] )
fd: id3_set_tag() is used to change the information stored of an ID3 tag. If no tag has been present, it will be added to the file.
vi: PECL id3:0.1-0.2
pt: ID3
fn: idate
fs: int idate ( string $format [, int $timestamp ] )
fd: Returns a number formatted according to the given format string using the given integer timestamp or the current local time if no timestamp is given.
vi: PHP 5
pt: Date and Time
fn: ifx_affected_rows
fs: int ifx_affected_rows ( resource $result_id )
fd: Returns the number of rows affected by a query associated with result_id. 
vi: 
pt: Informix
fn: ifx_blobinfile_mode
fs: bool ifx_blobinfile_mode ( int $mode )
fd: Set the default blob mode for all select queries.
vi: 
pt: Informix
fn: ifx_byteasvarchar
fs: bool ifx_byteasvarchar ( int $mode )
fd: Sets the default byte mode for all select-queries.
vi: 
pt: Informix
fn: ifx_close
fs: bool ifx_close ([ resource $link_identifier ] )
fd: ifx_close() closes the link to an Informix database that's associated with the specified link identifier. 
vi: 
pt: Informix
fn: ifx_connect
fs: resource ifx_connect ([ string $database [, string $userid [, string $password ]]] )
fd: ifx_connect() establishes a connection to an Informix server. 
vi: 
pt: Informix
fn: ifx_copy_blob
fs: int ifx_copy_blob ( int $bid )
fd: Duplicates the given blob object.
vi: 
pt: Informix
fn: ifx_create_blob
fs: int ifx_create_blob ( int $type , int $mode , string $param )
fd: Creates a blob object.
vi: 
pt: Informix
fn: ifx_create_char
fs: int ifx_create_char ( string $param )
fd: Creates an char object.
vi: 
pt: Informix
fn: ifx_do
fs: bool ifx_do ( resource $result_id )
fd: Executes a previously prepared query or opens a cursor for it. 
vi: 
pt: Informix
fn: ifx_error
fs: string ifx_error ([ resource $link_identifier ] )
fd: Returns in a string one character describing the general results of a statement and both SQLSTATE and SQLCODE associated with the most recent SQL statement executed.
vi: 
pt: Informix
fn: ifx_errormsg
fs: string ifx_errormsg ([ int $errorcode ] )
fd: Returns the Informix error message associated with the most recent Informix error.
vi: 
pt: Informix
fn: ifx_fetch_row
fs: array ifx_fetch_row ( resource $result_id [, mixed $position ] )
fd: Fetches one row of data from the result associated with the specified result identifier. 
vi: 
pt: Informix
fn: ifx_fieldproperties
fs: array ifx_fieldproperties ( resource $result_id )
fd: Returns the Informix SQL fieldproperties of every field in the query as an associative array. Properties are encoded as: SQLTYPE;length;precision;scale;ISNULLABLE where SQLTYPE = the Informix type like SQLVCHAR etc. and ISNULLABLE = Y or N.
vi: 
pt: Informix
fn: ifx_fieldtypes
fs: array ifx_fieldtypes ( resource $result_id )
fd: Returns an associative array with fieldnames as key and the SQL fieldtypes as data for the query associated with result_id.
vi: 
pt: Informix
fn: ifx_free_blob
fs: bool ifx_free_blob ( int $bid )
fd: Deletes the blobobject for the given blob object-id.
vi: 
pt: Informix
fn: ifx_free_char
fs: bool ifx_free_char ( int $bid )
fd: Deletes the charobject for the given char object-id.
vi: 
pt: Informix
fn: ifx_free_result
fs: bool ifx_free_result ( resource $result_id )
fd: Releases resources for the query associated with result_id.
vi: 
pt: Informix
fn: ifx_get_blob
fs: string ifx_get_blob ( int $bid )
fd: Returns the content of the blob object.
vi: 
pt: Informix
fn: ifx_get_char
fs: string ifx_get_char ( int $bid )
fd: Returns the content of the char object.
vi: 
pt: Informix
fn: ifx_getsqlca
fs: array ifx_getsqlca ( resource $result_id )
fd: Returns a pseudo-row with sqlca.sqlerrd[0] ... sqlca.sqlerrd[5] after the query associated with result_id. 
vi: 
pt: Informix
fn: ifx_htmltbl_result
fs: int ifx_htmltbl_result ( resource $result_id [, string $html_table_options ] )
fd: Formats and prints all rows of the result_id query into a HTML table.
vi: 
pt: Informix
fn: ifx_nullformat
fs: bool ifx_nullformat ( int $mode )
fd: Sets the default return value of a NULL-value on a fetch row.
vi: 
pt: Informix
fn: ifx_num_fields
fs: int ifx_num_fields ( resource $result_id )
fd: After preparing or executing a query, this call gives you the number of columns in the query.
vi: 
pt: Informix
fn: ifx_num_rows
fs: int ifx_num_rows ( resource $result_id )
fd: 
vi: 
pt: Informix
fn: ifx_pconnect
fs: resource ifx_pconnect ([ string $database [, string $userid [, string $password ]]] )
fd: 
vi: 
pt: Informix
fn: ifx_prepare
fs: resource ifx_prepare ( string $query , resource $link_identifier [, int $cursor_def ], mixed $blobidarray )
fd: 
vi: 
pt: Informix
fn: ifx_query
fs: resource ifx_query ( string $query , resource $link_identifier [, int $cursor_type [, mixed $blobidarray ]] )
fd: Sends a query to the currently active database on the server that's associated with the specified link identifier. 
vi: 
pt: Informix
fn: ifx_textasvarchar
fs: bool ifx_textasvarchar ( int $mode )
fd: Sets the default text mode for all select-queries.
vi: 
pt: Informix
fn: ifx_update_blob
fs: bool ifx_update_blob ( int $bid , string $content )
fd: Updates the content of the blob object for the given blob object bid.
vi: 
pt: Informix
fn: ifx_update_char
fs: bool ifx_update_char ( int $bid , string $content )
fd: Updates the content of the char object for the given char object bid.
vi: 
pt: Informix
fn: ifxus_close_slob
fs: bool ifxus_close_slob ( int $bid )
fd: Deletes the slob object on the given slob object-id bid.
vi: 
pt: Informix
fn: ifxus_create_slob
fs: int ifxus_create_slob ( int $mode )
fd: Creates an slob object and opens it.
vi: 
pt: Informix
fn: ifxus_free_slob
fs: bool ifxus_free_slob ( int $bid )
fd: Deletes the slob object.
vi: 
pt: Informix
fn: ifxus_open_slob
fs: int ifxus_open_slob ( int $bid , int $mode )
fd: Opens an slob object. bid should be an existing slob id.
vi: 
pt: Informix
fn: ifxus_read_slob
fs: string ifxus_read_slob ( int $bid , int $nbytes )
fd: Reads nbytes of the slob object.
vi: 
pt: Informix
fn: ifxus_seek_slob
fs: int ifxus_seek_slob ( int $bid , int $mode , int $offset )
fd: Sets the current file or seek position of an open slob object.
vi: 
pt: Informix
fn: ifxus_tell_slob
fs: int ifxus_tell_slob ( int $bid )
fd: Returns the current file or seek position of an open slob object
vi: 
pt: Informix
fn: ifxus_write_slob
fs: int ifxus_write_slob ( int $bid , string $content )
fd: Writes a string into the slob object.
vi: 
pt: Informix
fn: ignore_user_abort
fs: int ignore_user_abort ([ bool $setting ] )
fd: Sets whether a client disconnect should cause a script to be aborted.
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: iis_add_server
fs: int iis_add_server ( string $path , string $comment , string $server_ip , int $port , string $host_name , int $rights , int $start_server )
fd: 
vi: 
pt: IIS Administration
fn: iis_get_dir_security
fs: int iis_get_dir_security ( int $server_instance , string $virtual_path )
fd: 
vi: 
pt: IIS Administration
fn: iis_get_script_map
fs: string iis_get_script_map ( int $server_instance , string $virtual_path , string $script_extension )
fd: 
vi: 
pt: IIS Administration
fn: iis_get_server_by_comment
fs: int iis_get_server_by_comment ( string $comment )
fd: 
vi: 
pt: IIS Administration
fn: iis_get_server_by_path
fs: int iis_get_server_by_path ( string $path )
fd: Each virtual server in IIS is associated with an instance number. iis_get_server_by_path() finds the instance number from the actual path to the root directory.
vi: 
pt: IIS Administration
fn: iis_get_server_rights
fs: int iis_get_server_rights ( int $server_instance , string $virtual_path )
fd: 
vi: 
pt: IIS Administration
fn: iis_get_service_state
fs: int iis_get_service_state ( string $service_id )
fd: 
vi: 
pt: IIS Administration
fn: iis_remove_server
fs: int iis_remove_server ( int $server_instance )
fd: 
vi: 
pt: IIS Administration
fn: iis_set_app_settings
fs: int iis_set_app_settings ( int $server_instance , string $virtual_path , string $application_scope )
fd: 
vi: 
pt: IIS Administration
fn: iis_set_dir_security
fs: int iis_set_dir_security ( int $server_instance , string $virtual_path , int $directory_flags )
fd: 
vi: 
pt: IIS Administration
fn: iis_set_script_map
fs: int iis_set_script_map ( int $server_instance , string $virtual_path , string $script_extension , string $engine_path , int $allow_scripting )
fd: 
vi: 
pt: IIS Administration
fn: iis_set_server_rights
fs: int iis_set_server_rights ( int $server_instance , string $virtual_path , int $directory_flags )
fd: 
vi: 
pt: IIS Administration
fn: iis_start_server
fs: int iis_start_server ( int $server_instance )
fd: 
vi: 
pt: IIS Administration
fn: iis_start_service
fs: int iis_start_service ( string $service_id )
fd: 
vi: 
pt: IIS Administration
fn: iis_stop_server
fs: int iis_stop_server ( int $server_instance )
fd: 
vi: 
pt: IIS Administration
fn: iis_stop_service
fs: int iis_stop_service ( string $service_id )
fd: 
vi: 
pt: IIS Administration
fn: image2wbmp
fs: bool image2wbmp ( resource $image [, string $filename [, int $threshold ]] )
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: Image
fn: image_type_to_extension
fs: string image_type_to_extension ( int $imagetype [, bool $include_dot ] )
fd: Returns the extension for the given IMAGETYPE_XXX constant.
vi: PHP 5
pt: Image
fn: image_type_to_mime_type
fs: string image_type_to_mime_type ( int $imagetype )
fd: The image_type_to_mime_type() function will determine the Mime-Type for an IMAGETYPE constant.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Image
fn: imagealphablending
fs: bool imagealphablending ( resource $image , bool $blendmode )
fd: imagealphablending() allows for two different modes of drawing on truecolor images.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imageantialias
fs: bool imageantialias ( resource $image , bool $on )
fd: Activate the fast drawing antialiased methods for lines and wired polygons. It does not support alpha components. It works using a direct blend operation. It works only with truecolor images. 
vi: PHP 4 >= 4.3.2, PHP 5
pt: Image
fn: imagearc
fs: bool imagearc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color )
fd: imagearc() draws an arc of circle centered at the given coordinates.
vi: PHP 4, PHP 5
pt: Image
fn: imagechar
fs: bool imagechar ( resource $image , int $font , int $x , int $y , string $c , int $color )
fd: imagechar() draws the first character of c in the image identified by image with its upper-left at x,y (top left is 0, 0) with the color color.
vi: PHP 4, PHP 5
pt: Image
fn: imagecharup
fs: bool imagecharup ( resource $image , int $font , int $x , int $y , string $c , int $color )
fd: Draws the character c vertically at the specified coordinate on the given image.
vi: PHP 4, PHP 5
pt: Image
fn: imagecolorallocate
fs: int imagecolorallocate ( resource $image , int $red , int $green , int $blue )
fd: 
vi: PHP 4, PHP 5
pt: Image
fn: imagecolorallocatealpha
fs: int imagecolorallocatealpha ( resource $image , int $red , int $green , int $blue , int $alpha )
fd: 
vi: PHP 4 >= 4.3.2, PHP 5
pt: Image
fn: imagecolorat
fs: int imagecolorat ( resource $image , int $x , int $y )
fd: Returns the index of the color of the pixel at the specified location in the image specified by image. 
vi: PHP 4, PHP 5
pt: Image
fn: imagecolorclosest
fs: int imagecolorclosest ( resource $image , int $red , int $green , int $blue )
fd: 
vi: PHP 4, PHP 5
pt: Image
fn: imagecolorclosestalpha
fs: int imagecolorclosestalpha ( resource $image , int $red , int $green , int $blue , int $alpha )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagecolorclosesthwb
fs: int imagecolorclosesthwb ( resource $image , int $red , int $green , int $blue )
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Image
fn: imagecolordeallocate
fs: bool imagecolordeallocate ( resource $image , int $color )
fd: 
vi: PHP 4, PHP 5
pt: Image
fn: imagecolorexact
fs: int imagecolorexact ( resource $image , int $red , int $green , int $blue )
fd: Returns the index of the specified color in the palette of the image. 
vi: PHP 4, PHP 5
pt: Image
fn: imagecolorexactalpha
fs: int imagecolorexactalpha ( resource $image , int $red , int $green , int $blue , int $alpha )
fd: Returns the index of the specified color+alpha in the palette of the image.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagecolormatch
fs: bool imagecolormatch ( resource $image1 , resource $image2 )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Image
fn: imagecolorresolve
fs: int imagecolorresolve ( resource $image , int $red , int $green , int $blue )
fd: This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative. 
vi: PHP 4, PHP 5
pt: Image
fn: imagecolorresolvealpha
fs: int imagecolorresolvealpha ( resource $image , int $red , int $green , int $blue , int $alpha )
fd: This function is guaranteed to return a color index for a requested color, either the exact color or the closest possible alternative.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagecolorset
fs: void imagecolorset ( resource $image , int $index , int $red , int $green , int $blue )
fd: This sets the specified index in the palette to the specified color. This is useful for creating flood-fill-like effects in palleted images without the overhead of performing the actual flood-fill.
vi: PHP 4, PHP 5
pt: Image
fn: imagecolorsforindex
fs: array imagecolorsforindex ( resource $image , int $index )
fd: Gets the color for a specified index.
vi: PHP 4, PHP 5
pt: Image
fn: imagecolorstotal
fs: int imagecolorstotal ( resource $image )
fd: Returns the number of colors in an image palette.
vi: PHP 4, PHP 5
pt: Image
fn: imagecolortransparent
fs: int imagecolortransparent ( resource $image [, int $color ] )
fd: Sets the transparent color in the given image.
vi: PHP 4, PHP 5
pt: Image
fn: imageconvolution
fs: bool imageconvolution ( resource $image , array $matrix , float $div , float $offset )
fd: Applies a convolution matrix on the image, using the given coefficient and offset.
vi: PHP 5 >= 5.1.0
pt: Image
fn: imagecopy
fs: bool imagecopy ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h )
fd: Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.
vi: PHP 4, PHP 5
pt: Image
fn: imagecopymerge
fs: bool imagecopymerge ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )
fd: Copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y.
vi: PHP 4 >= 4.0.1, PHP 5
pt: Image
fn: imagecopymergegray
fs: bool imagecopymergegray ( resource $dst_im , resource $src_im , int $dst_x , int $dst_y , int $src_x , int $src_y , int $src_w , int $src_h , int $pct )
fd: imagecopymergegray() copy a part of src_im onto dst_im starting at the x,y coordinates src_x, src_y with a width of src_w and a height of src_h. The portion defined will be copied onto the x,y coordinates, dst_x and dst_y. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagecopyresampled
fs: bool imagecopyresampled ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )
fd: imagecopyresampled() copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagecopyresized
fs: bool imagecopyresized ( resource $dst_image , resource $src_image , int $dst_x , int $dst_y , int $src_x , int $src_y , int $dst_w , int $dst_h , int $src_w , int $src_h )
fd: imagecopyresized() copies a rectangular portion of one image to another image. dst_image is the destination image, src_image is the source image identifier. If the source and destination coordinates and width and heights differ, appropriate stretching or shrinking of the image fragment will be performed. The coordinates refer to the upper left corner. This function can be used to copy regions within the same image (if dst_image is the same as src_image) but if the regions overlap the results will be unpredictable.
vi: PHP 4, PHP 5
pt: Image
fn: imagecreate
fs: resource imagecreate ( int $width , int $height )
fd: imagecreate() returns an image identifier representing a blank image of specified size. 
vi: PHP 4, PHP 5
pt: Image
fn: imagecreatefromgd
fs: resource imagecreatefromgd ( string $filename )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Image
fn: imagecreatefromgd2
fs: resource imagecreatefromgd2 ( string $filename )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Image
fn: imagecreatefromgd2part
fs: resource imagecreatefromgd2part ( string $filename , int $srcX , int $srcY , int $width , int $height )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Image
fn: imagecreatefromgif
fs: resource imagecreatefromgif ( string $filename )
fd: imagecreatefromgif() returns an image identifier representing the image obtained from the given filename. 
vi: PHP 4, PHP 5
pt: Image
fn: imagecreatefromjpeg
fs: resource imagecreatefromjpeg ( string $filename )
fd: imagecreatefromjpeg() returns an image identifier representing the image obtained from the given filename. 
vi: PHP 4, PHP 5
pt: Image
fn: imagecreatefrompng
fs: resource imagecreatefrompng ( string $filename )
fd: imagecreatefrompng() returns an image identifier representing the image obtained from the given filename. 
vi: PHP 4, PHP 5
pt: Image
fn: imagecreatefromstring
fs: resource imagecreatefromstring ( string $data )
fd: imagecreatefromstring() returns an image identifier representing the image obtained from the given data These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, WBMP, and GD2.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Image
fn: imagecreatefromwbmp
fs: resource imagecreatefromwbmp ( string $filename )
fd: imagecreatefromwbmp() returns an image identifier representing the image obtained from the given filename. 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Image
fn: imagecreatefromxbm
fs: resource imagecreatefromxbm ( string $filename )
fd: imagecreatefromxbm() returns an image identifier representing the image obtained from the given filename.
vi: PHP 4 >= 4.0.1, PHP 5
pt: Image
fn: imagecreatefromxpm
fs: resource imagecreatefromxpm ( string $filename )
fd: imagecreatefromxpm() returns an image identifier representing the image obtained from the given filename.
vi: PHP 4 >= 4.0.1, PHP 5
pt: Image
fn: imagecreatetruecolor
fs: resource imagecreatetruecolor ( int $width , int $height )
fd: imagecreatetruecolor() returns an image identifier representing a black image of the specified size. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagedashedline
fs: bool imagedashedline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )
fd: This function is deprecated.
vi: PHP 4, PHP 5
pt: Image
fn: imagedestroy
fs: bool imagedestroy ( resource $image )
fd: imagedestroy() frees any memory associated with image image.
vi: PHP 4, PHP 5
pt: Image
fn: imageellipse
fs: bool imageellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )
fd: Draws an ellipse centered at the specified coordinates.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagefill
fs: bool imagefill ( resource $image , int $x , int $y , int $color )
fd: Performs a flood fill starting at the given coordinate (top left is 0, 0) with the given color in the image.
vi: PHP 4, PHP 5
pt: Image
fn: imagefilledarc
fs: bool imagefilledarc ( resource $image , int $cx , int $cy , int $width , int $height , int $start , int $end , int $color , int $style )
fd: Draws a partial ellipse centered at the specified coordinate in the given image.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagefilledellipse
fs: bool imagefilledellipse ( resource $image , int $cx , int $cy , int $width , int $height , int $color )
fd: Draws an ellipse centered at the specified coordinate on the given image.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagefilledpolygon
fs: bool imagefilledpolygon ( resource $image , array $points , int $num_points , int $color )
fd: imagefilledpolygon() creates a filled polygon in the given image.
vi: PHP 4, PHP 5
pt: Image
fn: imagefilledrectangle
fs: bool imagefilledrectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )
fd: Creates a rectangle filled with color in the given image starting at point 1 and ending at point 2. 0, 0 is the top left corner of the image.
vi: PHP 4, PHP 5
pt: Image
fn: imagefilltoborder
fs: bool imagefilltoborder ( resource $image , int $x , int $y , int $border , int $color )
fd: imagefilltoborder() performs a flood fill whose border color is defined by border. The starting point for the fill is x, y (top left is 0, 0) and the region is filled with color color.
vi: PHP 4, PHP 5
pt: Image
fn: imagefilter
fs: bool imagefilter ( resource $image , int $filtertype [, int $arg1 [, int $arg2 [, int $arg3 [, int $arg4 ]]]] )
fd: imagefilter() applies the given filter filtertype on the image.
vi: PHP 5
pt: Image
fn: imagefontheight
fs: int imagefontheight ( int $font )
fd: Returns the pixel height of a character in the specified font.
vi: PHP 4, PHP 5
pt: Image
fn: imagefontwidth
fs: int imagefontwidth ( int $font )
fd: Returns the pixel width of a character in font.
vi: PHP 4, PHP 5
pt: Image
fn: imageftbbox
fs: array imageftbbox ( float $size , float $angle , string $font_file , string $text [, array $extrainfo ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Image
fn: imagefttext
fs: array imagefttext ( resource $image , float $size , float $angle , int $x , int $y , int $col , string $font_file , string $text [, array $extrainfo ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Image
fn: imagegammacorrect
fs: bool imagegammacorrect ( resource $image , float $inputgamma , float $outputgamma )
fd: Applies gamma correction to the given gd image given an input and an output gamma.
vi: PHP 4, PHP 5
pt: Image
fn: imagegd
fs: bool imagegd ( resource $image [, string $filename ] )
fd: Outputs a GD image to the given filename.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Image
fn: imagegd2
fs: bool imagegd2 ( resource $image [, string $filename [, int $chunk_size [, int $type ]]] )
fd: Outputs a GD2 image to the given filename.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Image
fn: imagegif
fs: bool imagegif ( resource $image [, string $filename ] )
fd: 
vi: PHP 4, PHP 5
pt: Image
fn: imagegrabscreen
fs: resource imagegrabscreen ( void )
fd: Grabs a screenshot of the whole screen.
vi: PHP 5 >= 5.2.2
pt: Image
fn: imagegrabwindow
fs: resource imagegrabwindow ( int $window [, int $client_area ] )
fd: Grabs a window or its client area using a windows handle (HWND property in COM instance)
vi: PHP 5 >= 5.2.2
pt: Image
fn: imageinterlace
fs: int imageinterlace ( resource $image [, int $interlace ] )
fd: imageinterlace() turns the interlace bit on or off. 
vi: PHP 4, PHP 5
pt: Image
fn: imageistruecolor
fs: bool imageistruecolor ( resource $image )
fd: imageistruecolor() finds whether the image image is a truecolor image.
vi: PHP 4 >= 4.3.2, PHP 5
pt: Image
fn: imagejpeg
fs: bool imagejpeg ( resource $image [, string $filename [, int $quality ]] )
fd: 
vi: PHP 4, PHP 5
pt: Image
fn: imagelayereffect
fs: bool imagelayereffect ( resource $image , int $effect )
fd: Set the alpha blending flag to use the bundled libgd layering effects.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Image
fn: imageline
fs: bool imageline ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )
fd: imageline() draws a line between the two given points.
vi: PHP 4, PHP 5
pt: Image
fn: imageloadfont
fs: int imageloadfont ( string $file )
fd: imageloadfont() loads a user-defined bitmap and returns its identifier.
vi: PHP 4, PHP 5
pt: Image
fn: imagepalettecopy
fs: void imagepalettecopy ( resource $destination , resource $source )
fd: imagepalettecopy() copies the palette from the source image to the destination image.
vi: PHP 4 >= 4.0.1, PHP 5
pt: Image
fn: imagepng
fs: bool imagepng ( resource $image [, string $filename [, int $quality [, int $filters ]]] )
fd: 
vi: PHP 4, PHP 5
pt: Image
fn: imagepolygon
fs: bool imagepolygon ( resource $image , array $points , int $num_points , int $color )
fd: imagepolygon() creates a polygon in the given image.
vi: PHP 4, PHP 5
pt: Image
fn: imagepsbbox
fs: array imagepsbbox ( string $text , int $font , int $size [, int $space ], int $tightness , float $angle )
fd: Gives the bounding box of a text rectangle using PostScript Type1 fonts. 
vi: PHP 4, PHP 5
pt: Image
fn: imagepsencodefont
fs: bool imagepsencodefont ( resource $font_index , string $encodingfile )
fd: Loads a character encoding vector from a file and changes the fonts encoding vector to it. As a PostScript fonts default vector lacks most of the character positions above 127, you'll definitely want to change this if you use an other language than English. 
vi: PHP 4, PHP 5
pt: Image
fn: imagepsextendfont
fs: bool imagepsextendfont ( int $font_index , float $extend )
fd: Extend or condense a font (font_index), if the value of the extend parameter is less than one you will be condensing the font.
vi: PHP 4, PHP 5
pt: Image
fn: imagepsfreefont
fs: bool imagepsfreefont ( resource $fontindex )
fd: imagepsfreefont() frees memory used by a PostScript Type 1 font.
vi: PHP 4, PHP 5
pt: Image
fn: imagepsloadfont
fs: resource imagepsloadfont ( string $filename )
fd: Load a PostScript Type 1 font from the given filename.
vi: PHP 4, PHP 5
pt: Image
fn: imagepsslantfont
fs: bool imagepsslantfont ( resource $font_index , float $slant )
fd: Slant a given font given.
vi: PHP 4, PHP 5
pt: Image
fn: imagepstext
fs: array imagepstext ( resource $image , string $text , resource $font , int $size , int $foreground , int $background , int $x , int $y [, int $space [, int $tightness [, float $angle [, int $antialias_steps ]]]] )
fd: Draws a text on an image using PostScript Type1 fonts. 
vi: PHP 4, PHP 5
pt: Image
fn: imagerectangle
fs: bool imagerectangle ( resource $image , int $x1 , int $y1 , int $x2 , int $y2 , int $color )
fd: imagerectangle() creates a rectangle starting at the specified coordinates.
vi: PHP 4, PHP 5
pt: Image
fn: imagerotate
fs: resource imagerotate ( resource $source_image , float $angle , int $bgd_color [, int $ignore_transparent ] )
fd: Rotates the source_image image using the given angle in degrees. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Image
fn: imagesavealpha
fs: bool imagesavealpha ( resource $image , bool $saveflag )
fd: imagesavealpha() sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images. 
vi: PHP 4 >= 4.3.2, PHP 5
pt: Image
fn: imagesetbrush
fs: bool imagesetbrush ( resource $image , resource $brush )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagesetpixel
fs: bool imagesetpixel ( resource $image , int $x , int $y , int $color )
fd: imagesetpixel() draws a pixel at the specified coordinate.
vi: PHP 4, PHP 5
pt: Image
fn: imagesetstyle
fs: bool imagesetstyle ( resource $image , array $style )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagesetthickness
fs: bool imagesetthickness ( resource $image , int $thickness )
fd: imagesetthickness() sets the thickness of the lines drawn when drawing rectangles, polygons, ellipses etc. etc. to thickness pixels.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagesettile
fs: bool imagesettile ( resource $image , resource $tile )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagestring
fs: bool imagestring ( resource $image , int $font , int $x , int $y , string $string , int $color )
fd: Draws a string at the given coordinates.
vi: PHP 4, PHP 5
pt: Image
fn: imagestringup
fs: bool imagestringup ( resource $image , int $font , int $x , int $y , string $string , int $color )
fd: Draws a string vertically at the given coordinates.
vi: PHP 4, PHP 5
pt: Image
fn: imagesx
fs: int imagesx ( resource $image )
fd: Returns the width of the given image resource.
vi: PHP 4, PHP 5
pt: Image
fn: imagesy
fs: int imagesy ( resource $image )
fd: Returns the height of the given image resource.
vi: PHP 4, PHP 5
pt: Image
fn: imagetruecolortopalette
fs: bool imagetruecolortopalette ( resource $image , bool $dither , int $ncolors )
fd: imagetruecolortopalette() converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Image
fn: imagettfbbox
fs: array imagettfbbox ( float $size , float $angle , string $fontfile , string $text )
fd: This function calculates and returns the bounding box in pixels for a TrueType text.
vi: PHP 4, PHP 5
pt: Image
fn: imagettftext
fs: array imagettftext ( resource $image , float $size , float $angle , int $x , int $y , int $color , string $fontfile , string $text )
fd: Writes the given text into the image using TrueType fonts.
vi: PHP 4, PHP 5
pt: Image
fn: imagetypes
fs: int imagetypes ( void )
fd: Returns the image types supported by the current PHP installation.
vi: PHP 4 >= 4.0.2, PHP 5
pt: Image
fn: imagewbmp
fs: bool imagewbmp ( resource $image [, string $filename [, int $foreground ]] )
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Image
fn: imagexbm
fs: bool imagexbm ( resource $image , string $filename [, int $foreground ] )
fd: 
vi: PHP 5
pt: Image
fn: imagick_adaptiveblurimage
fs: bool Imagick::adaptiveBlurImage ( float $radius , float $sigma [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_adaptiveresizeimage
fs: bool Imagick::adaptiveResizeImage ( int $columns , int $rows )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_adaptivesharpenimage
fs: bool Imagick::adaptiveSharpenImage ( float $radius , float $sigma [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_adaptivethresholdimage
fs: bool Imagick::adaptiveThresholdImage ( int $width , int $height , int $offset )
fd: Selects an individual threshold for each pixel based on the range of intensity values in its local neighborhood. This allows for thresholding of an image whose global intensity histogram doesn't contain distinctive peaks.
vi: 
pt: Imagick Image Library
fn: imagick_addimage
fs: bool Imagick::addImage ( Imagick $source )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_addnoiseimage
fs: bool Imagick::addNoiseImage ( int $noise_type [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_affinetransformimage
fs: bool Imagick::affineTransformImage ( ImagickDraw $matrix )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_annotateimage
fs: bool Imagick::annotateImage ( ImagickDraw $draw_settings , float $x , float $y , float $angle , string $text )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_appendimages
fs: Imagick Imagick::appendImages ( bool $stack )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_averageimages
fs: Imagick Imagick::averageImages ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_blackthresholdimage
fs: bool Imagick::blackThresholdImage ( ImagickPixel $threshold )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_blurimage
fs: bool Imagick::blurImage ( float $radius , float $sigma [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_borderimage
fs: bool Imagick::borderImage ( ImagickPixel $bordercolor , int $width , int $height )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_charcoalimage
fs: bool Imagick::charcoalImage ( float $radius , float $sigma )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_chopimage
fs: bool Imagick::chopImage ( int $width , int $height , int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_clear
fs: bool Imagick::clear ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_clipimage
fs: bool Imagick::clipImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_clippathimage
fs: bool Imagick::clipPathImage ( string $pathname , bool $inside )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_clone
fs: Imagick Imagick::clone ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_clutimage
fs: bool Imagick::clutImage ( Imagick $lookup_table [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_coalesceimages
fs: Imagick Imagick::coalesceImages ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_colorfloodfillimage
fs: bool Imagick::colorFloodfillImage ( ImagickPixel $fill , float $fuzz , ImagickPixel $bordercolor , int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_colorizeimage
fs: bool Imagick::colorizeImage ( ImagickPixel $colorize , ImagickPixel $opacity )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_combineimages
fs: Imagick Imagick::combineImages ( int $channelType )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_commentimage
fs: bool Imagick::commentImage ( string $comment )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_compareimagechannels
fs: Imagick Imagick::compareImageChannels ( Imagick $image , int $channelType , int $metricType )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_compareimagelayers
fs: Imagick Imagick::compareImageLayers ( int $method )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_compareimages
fs: array Imagick::compareImages ( Imagick $compare , int $metric )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_compositeimage
fs: bool Imagick::compositeImage ( Imagick $composite_object , int $composite , int $x , int $y [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_construct
fs: Imagick Imagick::__construct ([ mixed $files ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_contrastimage
fs: bool Imagick::contrastImage ( bool $sharpen )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_contraststretchimage
fs: bool Imagick::contrastStretchImage ( float $black_point , float $white_point [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_convolveimage
fs: bool Imagick::convolveImage ( array $kernel [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_cropimage
fs: bool Imagick::cropImage ( int $width , int $height , int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_cropthumbnailimage
fs: bool Imagick::cropThumbnailImage ( int $width , int $height )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_current
fs: Imagick Imagick::current ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_cyclecolormapimage
fs: bool Imagick::cycleColormapImage ( int $displace )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_deconstructimages
fs: bool Imagick::deconstructImages ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_despeckleimage
fs: bool Imagick::despeckleImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_destroy
fs: bool Imagick::destroy ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_displayimage
fs: bool Imagick::displayImage ( string $servername )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_displayimages
fs: bool Imagick::displayImages ( string $servername )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_distortimage
fs: bool Imagick::distortImage ( int $method , array $arguments , bool $bestfit )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_drawimage
fs: bool Imagick::drawImage ( ImagickDraw $drawing_wand )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_edgeimage
fs: bool Imagick::edgeImage ( float $radius )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_embossimage
fs: bool Imagick::embossImage ( float $radius , float $sigma )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_enhanceimage
fs: bool Imagick::enhanceImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_equalizeimage
fs: bool Imagick::equalizeImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_evaluateimage
fs: bool Imagick::evaluateImage ( int $op , float $constant [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_flattenimages
fs: bool Imagick::flattenImages ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_flipimage
fs: bool Imagick::flipImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_flopimage
fs: bool Imagick::flopImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_frameimage
fs: bool Imagick::frameImage ( ImagickPixel $matte_color , int $width , int $height , int $inner_bevel , int $outer_bevel )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_fximage
fs: bool Imagick::fxImage ( string $expression [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_gammaimage
fs: bool Imagick::gammaImage ( float $gamma [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_gaussianblurimage
fs: bool Imagick::gaussianBlurImage ( float $radius , float $sigma [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getcompression
fs: int Imagick::getCompression ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getcompressionquality
fs: int Imagick::getCompressionQuality ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getcopyright
fs: string Imagick::getCopyright ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getfilename
fs: string Imagick::getFilename ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getformat
fs: string Imagick::getFormat ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_gethomeurl
fs: string Imagick::getHomeURL ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimage
fs: Imagick Imagick::getImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagebackgroundcolor
fs: ImagickPixel Imagick::getImageBackgroundColor ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageblob
fs: string Imagick::getImageBlob ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageblueprimary
fs: ImagickPixel Imagick::getImageBluePrimary ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagebordercolor
fs: ImagickPixel Imagick::getImageBorderColor ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagechanneldepth
fs: int Imagick::getImageChannelDepth ( int $channelType )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagechanneldistortion
fs: float Imagick::getImageChannelDistortion ( Imagick $reference , int $channel , int $metric )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagechannelextrema
fs: array Imagick::getImageChannelExtrema ( int $channel )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagechannelmean
fs: array Imagick::getImageChannelMean ( int $channel )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagechannelstatistics
fs: array Imagick::getImageChannelStatistics ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagecolormapcolor
fs: ImagickPixel Imagick::getImageColormapColor ( int $index )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagecolors
fs: int Imagick::getImageColors ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagecolorspace
fs: int Imagick::getImageColorspace ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagecompose
fs: int Imagick::getImageCompose ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagedelay
fs: int Imagick::getImageDelay ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagedepth
fs: int Imagick::getImageDepth ( void )
fd: 
vi: PECL imagick:0.9.1-0.9.9
pt: Imagick Image Library
fn: imagick_getimagedispose
fs: int Imagick::getImageDispose ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagedistortion
fs: float Imagick::getImageDistortion ( MagickWand $reference , int $metric )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageextrema
fs: array Imagick::getImageExtrema ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagefilename
fs: string Imagick::getImageFilename ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageformat
fs: string Imagick::getImageFormat ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagegamma
fs: float Imagick::getImageGamma ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagegeometry
fs: array Imagick::getImageGeometry ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagegreenprimary
fs: array Imagick::getImageGreenPrimary ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageheight
fs: int Imagick::getImageHeight ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagehistogram
fs: array Imagick::getImageHistogram ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageindex
fs: int Imagick::getImageIndex ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageinterlacescheme
fs: int Imagick::getImageInterlaceScheme ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageinterpolatemethod
fs: int Imagick::getImageInterpolateMethod ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageiterations
fs: int Imagick::getImageIterations ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagelength
fs: int Imagick::getImageLength ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagematte
fs: int Imagick::getImageMatte ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagemattecolor
fs: ImagickPixel Imagick::getImageMatteColor ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageorientation
fs: int Imagick::getImageOrientation ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagepage
fs: array Imagick::getImagePage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagepixelcolor
fs: ImagickPixel Imagick::getImagePixelColor ( int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageprofile
fs: string Imagick::getImageProfile ( string $name )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageprofiles
fs: array Imagick::getImageProfiles ([ string $pattern [, bool $only_names ]] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageproperties
fs: array Imagick::getImageProperties ([ string $pattern [, bool $only_names ]] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageproperty
fs: string Imagick::getImageProperty ( string $name )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageredprimary
fs: array Imagick::getImageRedPrimary ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageregion
fs: bool Imagick::getImageRegion ( int $width , int $height , int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagerenderingintent
fs: int Imagick::getImageRenderingIntent ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimageresolution
fs: array Imagick::getImageResolution ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagescene
fs: int Imagick::getImageScene ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagesignature
fs: string Imagick::getImageSignature ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagesize
fs: int Imagick::getImageSize ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagetickspersecond
fs: int Imagick::getImageTicksPerSecond ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagetotalinkdensity
fs: float Imagick::getImageTotalInkDensity ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagetype
fs: int Imagick::getImageType ( void )
fd: 
vi: PECL imagick:0.9.10-0.9.9
pt: Imagick Image Library
fn: imagick_getimageunits
fs: int Imagick::getImageUnits ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagevirtualpixelmethod
fs: int Imagick::getImageVirtualPixelMethod ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagewhitepoint
fs: array Imagick::getImageWhitePoint ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getimagewidth
fs: int Imagick::getImageWidth ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getinterlacescheme
fs: int Imagick::getInterlaceScheme ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getiteratorindex
fs: int Imagick::getIteratorIndex ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getnumberimages
fs: int Imagick::getNumberImages ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getoption
fs: string Imagick::getOption ( string $key )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getpackagename
fs: string Imagick::getPackageName ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getpage
fs: array Imagick::getPage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getpixeliterator
fs: ImagickPixelIterator Imagick::getPixelIterator ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getpixelregioniterator
fs: ImagickPixelIterator Imagick::getPixelRegionIterator ( int $x , int $y , int $columns , int $rows )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getquantumdepth
fs: array Imagick::getQuantumDepth ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getquantumrange
fs: array Imagick::getQuantumRange ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getreleasedate
fs: string Imagick::getReleaseDate ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getresource
fs: int Imagick::getResource ( int $type )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getresourcelimit
fs: int Imagick::getResourceLimit ( int $type )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getsamplingfactors
fs: array Imagick::getSamplingFactors ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getsize
fs: array Imagick::getSize ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getsizeoffset
fs: int Imagick::getSizeOffset ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_getversion
fs: array Imagick::getVersion ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_hasnextimage
fs: bool Imagick::hasNextImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_haspreviousimage
fs: bool Imagick::hasPreviousImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_identifyimage
fs: string Imagick::identifyImage ([ bool $appendRawOutput ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_implodeimage
fs: bool Imagick::implodeImage ( float $radius )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_labelimage
fs: bool Imagick::labelImage ( string $label )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_levelimage
fs: bool Imagick::levelImage ( float $blackPoint , float $gamma , float $whitePoint [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_linearstretchimage
fs: bool Imagick::linearStretchImage ( float $blackPoint , float $whitePoint )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_magnifyimage
fs: bool Imagick::magnifyImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_mattefloodfillimage
fs: bool Imagick::matteFloodfillImage ( float $alpha , float $fuzz , ImagickPixel $bordercolor , int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_medianfilterimage
fs: bool Imagick::medianFilterImage ( float $radius )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_minifyimage
fs: bool Imagick::minifyImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_modulateimage
fs: bool Imagick::modulateImage ( float $brightness , float $saturation , float $hue )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_montageimage
fs: Imagick Imagick::montageImage ( ImagickDraw $drawing_wand , string $tile_geometry , string $thumbnail_geometry , int $mode , string $frame )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_morphimages
fs: Imagick Imagick::morphImages ( int $number_frames )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_mosaicimages
fs: Imagick Imagick::mosaicImages ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_motionblurimage
fs: bool Imagick::motionBlurImage ( float $radius , float $sigma , float $angle )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_negateimage
fs: bool Imagick::negateImage ( bool $gray [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_newimage
fs: bool Imagick::newImage ( int $cols , int $rows , ImagickPixel $background [, string $format ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_newpseudoimage
fs: bool Imagick::newPseudoImage ( int $columns , int $rows , string $pseudoString )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_nextimage
fs: bool Imagick::nextImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_normalizeimage
fs: bool Imagick::normalizeImage ([ int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_oilpaintimage
fs: bool Imagick::oilPaintImage ( float $radius )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_optimizeimagelayers
fs: bool Imagick::optimizeImageLayers ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_paintopaqueimage
fs: bool Imagick::paintOpaqueImage ( ImagickPixel $target , ImagickPixel $fill , float $fuzz [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_painttransparentimage
fs: bool Imagick::paintTransparentImage ( Imagick $targetObj , float $alpha , float $fuzz )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_pingimage
fs: bool Imagick::pingImage ( string $filename )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_pingimageblob
fs: bool Imagick::pingImageBlob ( string $image )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_pingimagefile
fs: bool Imagick::pingImageFile ( resource $filehandle [, string $fileName ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_polaroidimage
fs: bool Imagick::polaroidImage ( ImagickDraw $properties , float $angle )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_posterizeimage
fs: bool Imagick::posterizeImage ( int $levels , bool $dither )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_previousimage
fs: bool Imagick::previousImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_profileimage
fs: bool Imagick::profileImage ( string $name , string $profile )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_queryfontmetrics
fs: array Imagick::queryFontMetrics ( ImagickDraw $properties , string $text [, bool $multiline ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_queryfonts
fs: array Imagick::queryFonts ([ string $pattern ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_queryformats
fs: array Imagick::queryFormats ([ string $pattern ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_radialblurimage
fs: bool Imagick::radialBlurImage ( float $angle [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_raiseimage
fs: bool Imagick::raiseImage ( int $width , int $height , int $x , int $y , bool $raise )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_randomthresholdimage
fs: bool Imagick::randomThresholdImage ( float $low , float $high [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_readimage
fs: bool Imagick::readImage ( string $filename )
fd: 
vi: PECL imagick:0.9-0.9.9
pt: Imagick Image Library
fn: imagick_readimageblob
fs: bool Imagick::readImageBlob ( string $image [, string $filename ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_readimagefile
fs: bool Imagick::readImageFile ( resource $filehandle [, string $fileName ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_reducenoiseimage
fs: bool Imagick::reduceNoiseImage ( float $radius )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_removeimage
fs: bool Imagick::removeImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_removeimageprofile
fs: string Imagick::removeImageProfile ( string $name )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_render
fs: bool Imagick::render ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_resampleimage
fs: bool Imagick::resampleImage ( float $x_resolution , float $y_resolution , int $filter , float $blur )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_resizeimage
fs: bool Imagick::resizeImage ( float $columns , float $rows , int $filter , float $blur )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_rollimage
fs: bool Imagick::rollImage ( int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_rotateimage
fs: bool Imagick::rotateImage ( ImagickPixel $background , float $degrees )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_roundcorners
fs: bool Imagick::roundCorners ( float $x_rounding , float $y_rounding [, float $stroke_width [, float $displace [, float $size_correction ]]] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_sampleimage
fs: bool Imagick::sampleImage ( int $columns , int $rows )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_scaleimage
fs: bool Imagick::scaleImage ( int $cols , int $rows )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_separateimagechannel
fs: bool Imagick::separateImageChannel ( int $channel )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_sepiatoneimage
fs: bool Imagick::sepiaToneImage ( float $threshold )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setbackgroundcolor
fs: bool Imagick::setBackgroundColor ( ImagickPixel $background )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setcompression
fs: bool Imagick::setCompression ( int $compression )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setcompressionquality
fs: bool Imagick::setCompressionQuality ( int $quality )
fd: 
vi: PECL imagick:0.9.10-0.9.9
pt: Imagick Image Library
fn: imagick_setfilename
fs: bool Imagick::setFilename ( string $filename )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setfirstiterator
fs: bool Imagick::setFirstIterator ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setformat
fs: bool Imagick::setFormat ( string $format )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimage
fs: bool Imagick::setImage ( Imagick $replace )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagebackgroundcolor
fs: bool Imagick::setImageBackgroundColor ( ImagickPixel $background )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagebias
fs: bool Imagick::setImageBias ( float $bias )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageblueprimary
fs: bool Imagick::setImageBluePrimary ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagebordercolor
fs: bool Imagick::setImageBorderColor ( ImagickPixel $border )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagechanneldepth
fs: bool Imagick::setImageChannelDepth ( int $channel , int $depth )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagecolormapcolor
fs: bool Imagick::setImageColormapColor ( int $index , ImagickPixel $color )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagecolorspace
fs: bool Imagick::setImageColorspace ( int $colorspace )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagecompose
fs: bool Imagick::setImageCompose ( int $compose )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagecompression
fs: bool Imagick::setImageCompression ( int $compression )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagedelay
fs: bool Imagick::setImageDelay ( int $delay )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagedepth
fs: bool Imagick::setImageDepth ( int $depth )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagedispose
fs: bool Imagick::setImageDispose ( int $dispose )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageextent
fs: bool Imagick::setImageExtent ( int $columns , int $rows )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagefilename
fs: bool Imagick::setImageFilename ( string $filename )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageformat
fs: bool Imagick::setImageFormat ( string $format )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagegamma
fs: bool Imagick::setImageGamma ( float $gamma )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagegreenprimary
fs: bool Imagick::setImageGreenPrimary ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageindex
fs: bool Imagick::setImageIndex ( int $index )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageinterlacescheme
fs: bool Imagick::setImageInterlaceScheme ( int $interlace_scheme )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageinterpolatemethod
fs: bool Imagick::setImageInterpolateMethod ( int $method )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageiterations
fs: bool Imagick::setImageIterations ( int $iterations )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagematte
fs: bool Imagick::setImageMatte ( bool $matte )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagemattecolor
fs: bool Imagick::setImageMatteColor ( ImagickPixel $matte )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageopacity
fs: bool Imagick::setImageOpacity ( float $opacity )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageorientation
fs: bool Imagick::setImageOrientation ( int $orientation )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagepage
fs: bool Imagick::setImagePage ( int $width , int $height , int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageprofile
fs: bool Imagick::setImageProfile ( string $name , string $profile )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageproperty
fs: bool Imagick::setImageProperty ( string $name , string $value )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageredprimary
fs: bool Imagick::setImageRedPrimary ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagerenderingintent
fs: bool Imagick::setImageRenderingIntent ( int $rendering_intent )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageresolution
fs: bool Imagick::setImageResolution ( float $x_resolution , float $y_resolution )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagescene
fs: bool Imagick::setImageScene ( int $scene )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagetickspersecond
fs: bool Imagick::setImageTicksPerSecond ( int $ticks_per-second )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagetype
fs: bool Imagick::setImageType ( int $image_type )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimageunits
fs: bool Imagick::setImageUnits ( int $units )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagevirtualpixelmethod
fs: bool Imagick::setImageVirtualPixelMethod ( int $method )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setimagewhitepoint
fs: bool Imagick::setImageWhitePoint ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setinterlacescheme
fs: bool Imagick::setInterlaceScheme ( int $interlace_scheme )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setiteratorindex
fs: bool Imagick::setIteratorIndex ( int $index )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setlastiterator
fs: bool Imagick::setLastIterator ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setoption
fs: bool Imagick::setOption ( string $key , string $value )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setpage
fs: bool Imagick::setPage ( int $width , int $height , int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setresolution
fs: bool Imagick::setResolution ( float $x_resolution , float $y_resolution )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setresourcelimit
fs: bool Imagick::setResourceLimit ( int $type , int $limit )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setsamplingfactors
fs: bool Imagick::setSamplingFactors ( array $factors )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setsize
fs: bool Imagick::setSize ( int $columns , int $rows )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_setsizeoffset
fs: bool Imagick::setSizeOffset ( int $columns , int $rows , int $offset )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_settype
fs: bool Imagick::setType ( int $image_type )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_shadeimage
fs: bool Imagick::shadeImage ( bool $gray , float $azimuth , float $elevation )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_shadowimage
fs: bool Imagick::shadowImage ( float $opacity , float $sigma , int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_sharpenimage
fs: bool Imagick::sharpenImage ( float $radius , float $sigma [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_shaveimage
fs: bool Imagick::shaveImage ( int $columns , int $rows )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_shearimage
fs: bool Imagick::shearImage ( ImagickPixel $background , float $x_shear , float $y_shear )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_sigmoidalcontrastimage
fs: bool Imagick::sigmoidalContrastImage ( bool $sharpen , float $alpha , float $beta [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_sketchimage
fs: bool Imagick::sketchImage ( float $radius , float $sigma , float $angle )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_solarizeimage
fs: bool Imagick::solarizeImage ( int $threshold )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_spliceimage
fs: bool Imagick::spliceImage ( int $width , int $height , int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_spreadimage
fs: bool Imagick::spreadImage ( float $radius )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_steganoimage
fs: Imagick Imagick::steganoImage ( Imagick $watermark_wand , int $offset )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_stereoimage
fs: bool Imagick::stereoImage ( Imagick $offset_wand )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_stripimage
fs: bool Imagick::stripImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_swirlimage
fs: bool Imagick::swirlImage ( float $degrees )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_textureimage
fs: bool Imagick::textureImage ( Imagick $texture_wand )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_thresholdimage
fs: bool Imagick::thresholdImage ( float $threshold [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_thumbnailimage
fs: bool Imagick::thumbnailImage ( int $columns , int $rows [, bool $fit ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_tintimage
fs: bool Imagick::tintImage ( ImagickPixel $tint , ImagickPixel $opacity )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_transverseimage
fs: bool Imagick::transverseImage ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_trimimage
fs: bool Imagick::trimImage ( float $fuzz )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_uniqueimagecolors
fs: bool Imagick::uniqueImageColors ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_unsharpmaskimage
fs: bool Imagick::unsharpMaskImage ( float $radius , float $sigma , float $amount , float $threshold [, int $channel ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_valid
fs: bool Imagick::valid ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_vignetteimage
fs: bool Imagick::vignetteImage ( float $blackPoint , float $whitePoint , int $x , int $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_waveimage
fs: bool Imagick::waveImage ( float $amplitude , float $length )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_whitethresholdimage
fs: bool Imagick::whiteThresholdImage ( ImagickPixel $threshold )
fd: 
vi: 
pt: Imagick Image Library
fn: imagick_writeimage
fs: bool Imagick::writeImage ([ string $filename ] )
fd: 
vi: PECL imagick:0.9-0.9.9
pt: Imagick Image Library
fn: imagick_writeimages
fs: bool Imagick::writeImages ( string $filename , bool $adjoin )
fd: 
vi: PECL imagick:0.9-0.9.9
pt: Imagick Image Library
fn: imagickdraw_affine
fs: bool ImagickDraw::affine ( array $affine )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_annotation
fs: bool ImagickDraw::annotation ( float $x , float $y , string $text )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_arc
fs: bool ImagickDraw::arc ( float $sx , float $sy , float $ex , float $ey , float $sd , float $ed )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_bezier
fs: bool ImagickDraw::bezier ( array $coordinates )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_circle
fs: bool ImagickDraw::circle ( float $ox , float $oy , float $px , float $py )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_clear
fs: bool ImagickDraw::clear ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_clone
fs: ImagickDraw ImagickDraw::clone ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_color
fs: bool ImagickDraw::color ( float $x , float $y , int $paintMethod )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_comment
fs: bool ImagickDraw::comment ( string $comment )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_composite
fs: bool ImagickDraw::composite ( int $compose , float $x , float $y , float $width , float $height , Imagick $compositeWand )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_construct
fs: ImagickDraw ImagickDraw::__construct ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_destroy
fs: bool ImagickDraw::destroy ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_ellipse
fs: bool ImagickDraw::ellipse ( float $ox , float $oy , float $rx , float $ry , float $start , float $end )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getclippath
fs: string ImagickDraw::getClipPath ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getcliprule
fs: int ImagickDraw::getClipRule ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getclipunits
fs: int ImagickDraw::getClipUnits ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getfillcolor
fs: ImagickPixel ImagickDraw::getFillColor ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getfillopacity
fs: float ImagickDraw::getFillOpacity ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getfillrule
fs: int ImagickDraw::getFillRule ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getfont
fs: string ImagickDraw::getFont ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getfontfamily
fs: string ImagickDraw::getFontFamily ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getfontsize
fs: float ImagickDraw::getFontSize ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getfontstyle
fs: int ImagickDraw::getFontStyle ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getfontweight
fs: int ImagickDraw::getFontWeight ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getgravity
fs: int ImagickDraw::getGravity ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getstrokeantialias
fs: bool ImagickDraw::getStrokeAntialias ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getstrokecolor
fs: ImagickPixel ImagickDraw::getStrokeColor ( ImagickPixel $stroke_color )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getstrokedasharray
fs: array ImagickDraw::getStrokeDashArray ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getstrokedashoffset
fs: float ImagickDraw::getStrokeDashOffset ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getstrokelinecap
fs: int ImagickDraw::getStrokeLineCap ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getstrokelinejoin
fs: int ImagickDraw::getStrokeLineJoin ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getstrokemiterlimit
fs: int ImagickDraw::getStrokeMiterLimit ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getstrokeopacity
fs: float ImagickDraw::getStrokeOpacity ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getstrokewidth
fs: float ImagickDraw::getStrokeWidth ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_gettextalignment
fs: int ImagickDraw::getTextAlignment ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_gettextantialias
fs: bool ImagickDraw::getTextAntialias ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_gettextdecoration
fs: int ImagickDraw::getTextDecoration ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_gettextencoding
fs: string ImagickDraw::getTextEncoding ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_gettextundercolor
fs: ImagickPixel ImagickDraw::getTextUnderColor ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_getvectorgraphics
fs: string ImagickDraw::getVectorGraphics ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_line
fs: bool ImagickDraw::line ( float $sx , float $sy , float $ex , float $ey )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_matte
fs: bool ImagickDraw::matte ( float $x , float $y , int $paintMethod )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathclose
fs: bool ImagickDraw::pathClose ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathcurvetoabsolute
fs: bool ImagickDraw::pathCurveToAbsolute ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathcurvetoquadraticbezierabsolute
fs: bool ImagickDraw::pathCurveToQuadraticBezierAbsolute ( float $x1 , float $y1 , float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathcurvetoquadraticbezierrelative
fs: bool ImagickDraw::pathCurveToQuadraticBezierRelative ( float $x1 , float $y1 , float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathcurvetoquadraticbeziersmoothabsolute
fs: bool ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathcurvetoquadraticbeziersmoothrelative
fs: bool ImagickDraw::pathCurveToQuadraticBezierSmoothRelative ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathcurvetorelative
fs: bool ImagickDraw::pathCurveToRelative ( float $x1 , float $y1 , float $x2 , float $y2 , float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathcurvetosmoothabsolute
fs: bool ImagickDraw::pathCurveToSmoothAbsolute ( float $x2 , float $y2 , float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathcurvetosmoothrelative
fs: bool ImagickDraw::pathCurveToSmoothRelative ( float $x2 , float $y2 , float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathellipticarcabsolute
fs: bool ImagickDraw::pathEllipticArcAbsolute ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathellipticarcrelative
fs: bool ImagickDraw::pathEllipticArcRelative ( float $rx , float $ry , float $x_axis_rotation , bool $large_arc_flag , bool $sweep_flag , float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathfinish
fs: bool ImagickDraw::pathFinish ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathlinetoabsolute
fs: bool ImagickDraw::pathLineToAbsolute ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathlinetohorizontalabsolute
fs: bool ImagickDraw::pathLineToHorizontalAbsolute ( float $x )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathlinetohorizontalrelative
fs: bool ImagickDraw::pathLineToHorizontalRelative ( float $x )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathlinetorelative
fs: bool ImagickDraw::pathLineToRelative ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathlinetoverticalabsolute
fs: bool ImagickDraw::pathLineToVerticalAbsolute ( float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathlinetoverticalrelative
fs: bool ImagickDraw::pathLineToVerticalRelative ( float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathmovetoabsolute
fs: bool ImagickDraw::pathMoveToAbsolute ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathmovetorelative
fs: bool ImagickDraw::pathMoveToRelative ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pathstart
fs: bool ImagickDraw::pathStart ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_point
fs: bool ImagickDraw::point ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_polygon
fs: bool ImagickDraw::polygon ( array $coordinates )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_polyline
fs: bool ImagickDraw::polyline ( array $coordinates )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pop
fs: bool ImagickDraw::pop ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_popclippath
fs: bool ImagickDraw::popClipPath ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_popdefs
fs: bool ImagickDraw::popDefs ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_poppattern
fs: bool ImagickDraw::popPattern ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_push
fs: bool ImagickDraw::push ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pushclippath
fs: bool ImagickDraw::pushClipPath ( string $clip_mask_id )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pushdefs
fs: bool ImagickDraw::pushDefs ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_pushpattern
fs: bool ImagickDraw::pushPattern ( string $pattern_id , float $x , float $y , float $width , float $height )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_rectangle
fs: bool ImagickDraw::rectangle ( float $x1 , float $y1 , float $x2 , float $y2 )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_render
fs: bool ImagickDraw::render ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_rotate
fs: bool ImagickDraw::rotate ( float $degrees )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_roundrectangle
fs: bool ImagickDraw::roundRectangle ( float $x1 , float $y1 , float $x2 , float $y2 , float $rx , float $ry )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_scale
fs: bool ImagickDraw::scale ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setclippath
fs: bool ImagickDraw::setClipPath ( string $clip_mask )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setcliprule
fs: bool ImagickDraw::setClipRule ( int $fill_rule )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setclipunits
fs: bool ImagickDraw::setClipUnits ( int $clip_units )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfillalpha
fs: bool ImagickDraw::setFillAlpha ( float $opacity )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfillcolor
fs: bool ImagickDraw::setFillColor ( ImagickPixel $fill_pixel )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfillopacity
fs: bool ImagickDraw::setFillOpacity ( float $fillOpacity )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfillpatternurl
fs: bool ImagickDraw::setFillPatternURL ( string $fill_url )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfillrule
fs: bool ImagickDraw::setFillRule ( int $fill_rule )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfont
fs: bool ImagickDraw::setFont ( string $font_name )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfontfamily
fs: bool ImagickDraw::setFontFamily ( string $font_family )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfontsize
fs: bool ImagickDraw::setFontSize ( float $pointsize )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfontstretch
fs: bool ImagickDraw::setFontStretch ( int $fontStretch )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfontstyle
fs: bool ImagickDraw::setFontStyle ( int $style )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setfontweight
fs: bool ImagickDraw::setFontWeight ( int $font_weight )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setgravity
fs: bool ImagickDraw::setGravity ( int $gravity )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokealpha
fs: bool ImagickDraw::setStrokeAlpha ( float $opacity )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokeantialias
fs: bool ImagickDraw::setStrokeAntialias ( bool $stroke_antialias )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokecolor
fs: bool ImagickDraw::setStrokeColor ( ImagickPixel $stroke_pixel )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokedasharray
fs: bool ImagickDraw::setStrokeDashArray ( array $dashArray )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokedashoffset
fs: bool ImagickDraw::setStrokeDashOffset ( float $dash_offset )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokelinecap
fs: bool ImagickDraw::setStrokeLineCap ( int $linecap )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokelinejoin
fs: bool ImagickDraw::setStrokeLineJoin ( int $linejoin )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokemiterlimit
fs: bool ImagickDraw::setStrokeMiterLimit ( int $miterlimit )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokeopacity
fs: bool ImagickDraw::setStrokeOpacity ( float $stroke_opacity )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokepatternurl
fs: bool ImagickDraw::setStrokePatternURL ( string $stroke_url )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setstrokewidth
fs: bool ImagickDraw::setStrokeWidth ( float $stroke_width )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_settextalignment
fs: bool ImagickDraw::setTextAlignment ( int $alignment )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_settextantialias
fs: bool ImagickDraw::setTextAntialias ( bool $antiAlias )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_settextdecoration
fs: bool ImagickDraw::setTextDecoration ( int $decoration )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_settextencoding
fs: bool ImagickDraw::setTextEncoding ( string $encoding )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_settextundercolor
fs: bool ImagickDraw::setTextUnderColor ( ImagickPixel $under_color )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setvectorgraphics
fs: bool ImagickDraw::setVectorGraphics ( string $xml )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_setviewbox
fs: bool ImagickDraw::setViewbox ( int $x1 , int $y1 , int $x2 , int $y2 )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_skewx
fs: bool ImagickDraw::skewX ( float $degrees )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_skewy
fs: bool ImagickDraw::skewY ( float $degrees )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickdraw_translate
fs: bool ImagickDraw::translate ( float $x , float $y )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_clear
fs: bool ImagickPixel::clear ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_construct
fs: ImagickPixel ImagickPixel::__construct ([ string $color ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_destroy
fs: bool ImagickPixel::destroy ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_getcolor
fs: array ImagickPixel::getColor ([ bool $normalized ] )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_getcolorcount
fs: int ImagickPixel::getColorCount ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_getcolorvalue
fs: float ImagickPixel::getColorValue ( int $color )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_gethsl
fs: array ImagickPixel::getHSL ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_issimilar
fs: bool ImagickPixel::isSimilar ( ImagickPixel $color , float $fuzz )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_setcolor
fs: bool ImagickPixel::setColor ( string $color )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_setcolorvalue
fs: bool ImagickPixel::setColorValue ( int $color , float $value )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixel_sethsl
fs: bool ImagickPixel::setHSL ( float $hue , float $saturation , float $luminosity )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_clear
fs: bool ImagickPixelIterator::clear ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_construct
fs: ImagickPixelIterator ImagickPixelIterator::__construct ( Imagick $wand )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_destroy
fs: bool ImagickPixelIterator::destroy ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_getcurrentiteratorrow
fs: array ImagickPixelIterator::getCurrentIteratorRow ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_getiteratorrow
fs: int ImagickPixelIterator::getIteratorRow ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_getnextiteratorrow
fs: array ImagickPixelIterator::getNextIteratorRow ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_getpreviousiteratorrow
fs: array ImagickPixelIterator::getPreviousIteratorRow ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_newpixeliterator
fs: bool ImagickPixelIterator::newPixelIterator ( Imagick $wand )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_newpixelregioniterator
fs: bool ImagickPixelIterator::newPixelRegionIterator ( Imagick $wand , int $x , int $y , int $columns , int $rows )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_resetiterator
fs: bool ImagickPixelIterator::resetIterator ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_setiteratorfirstrow
fs: bool ImagickPixelIterator::setIteratorFirstRow ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_setiteratorlastrow
fs: bool ImagickPixelIterator::setIteratorLastRow ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_setiteratorrow
fs: bool ImagickPixelIterator::setIteratorRow ( int $row )
fd: 
vi: 
pt: Imagick Image Library
fn: imagickpixeliterator_synciterator
fs: bool ImagickPixelIterator::syncIterator ( void )
fd: 
vi: 
pt: Imagick Image Library
fn: imap_8bit
fs: string imap_8bit ( string $string )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_alerts
fs: array imap_alerts ( void )
fd: Returns all of the IMAP alert messages generated since the last imap_alerts() call, or the beginning of the page. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_append
fs: bool imap_append ( resource $imap_stream , string $mailbox , string $message [, string $options ] )
fd: Appends a string message to the specified mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_base64
fs: string imap_base64 ( string $text )
fd: Decodes the given BASE-64 encoded text.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_binary
fs: string imap_binary ( string $string )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_body
fs: string imap_body ( resource $imap_stream , int $msg_number [, int $options ] )
fd: imap_body() returns the body of the message, numbered msg_number in the current mailbox. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_bodystruct
fs: object imap_bodystruct ( resource $imap_stream , int $msg_number , string $section )
fd: Read the structure of a specified body section of a specific message.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_check
fs: object imap_check ( resource $imap_stream )
fd: Checks information about the current mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_clearflag_full
fs: bool imap_clearflag_full ( resource $imap_stream , string $sequence , string $flag [, string $options ] )
fd: This function causes a store to delete the specified flag to the flags set for the messages in the specified sequence.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_close
fs: bool imap_close ( resource $imap_stream [, int $flag ] )
fd: Closes the imap stream.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_createmailbox
fs: bool imap_createmailbox ( resource $imap_stream , string $mailbox )
fd: Creates a new mailbox specified by mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_delete
fs: bool imap_delete ( int $imap_stream , int $msg_number [, int $options ] )
fd: Marks messages listed in msg_number for deletion.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_deletemailbox
fs: bool imap_deletemailbox ( resource $imap_stream , string $mailbox )
fd: Deletes the specified mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_errors
fs: array imap_errors ( void )
fd: Gets all of the IMAP errors (if any) that have occurred during this page request or since the error stack was reset. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_expunge
fs: bool imap_expunge ( resource $imap_stream )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_fetch_overview
fs: array imap_fetch_overview ( resource $imap_stream , string $sequence [, int $options ] )
fd: This function fetches mail headers for the given sequence and returns an overview of their contents.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_fetchbody
fs: string imap_fetchbody ( resource $imap_stream , int $msg_number , string $part_number [, int $options ] )
fd: Fetch of a particular section of the body of the specified messages. Body parts are not decoded by this function.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_fetchheader
fs: string imap_fetchheader ( resource $imap_stream , int $msg_number [, int $options ] )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_fetchstructure
fs: object imap_fetchstructure ( resource $imap_stream , int $msg_number [, int $options ] )
fd: Fetches all the structured information for a given message.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_get_quota
fs: array imap_get_quota ( resource $imap_stream , string $quota_root )
fd: Retrieve the quota level settings, and usage statics per mailbox. 
vi: PHP 4 >= 4.0.5, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_get_quotaroot
fs: array imap_get_quotaroot ( resource $imap_stream , string $quota_root )
fd: Retrieve the quota settings per user. The limit value represents the total amount of space allowed for this user's total mailbox usage. The usage value represents the user's current total mailbox capacity.
vi: PHP 4 >= 4.3.0, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_getacl
fs: array imap_getacl ( resource $imap_stream , string $mailbox )
fd: 
vi: PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_getmailboxes
fs: array imap_getmailboxes ( resource $imap_stream , string $ref , string $pattern )
fd: Gets information on the mailboxes.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_getsubscribed
fs: array imap_getsubscribed ( resource $imap_stream , string $ref , string $pattern )
fd: Gets information on the subscribeds mailboxes. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_header
fs: 
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_headerinfo
fs: object imap_headerinfo ( resource $imap_stream , int $msg_number [, int $fromlength [, int $subjectlength [, string $defaulthost ]]] )
fd: Gets information about the given message number by reading its headers.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_headers
fs: array imap_headers ( resource $imap_stream )
fd: Returns headers for all messages in a mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_last_error
fs: string imap_last_error ( void )
fd: Gets the full text of the last IMAP error message that occurred on the current page. The error stack is untouched; calling imap_last_error() subsequently, with no intervening errors, will return the same error.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_list
fs: array imap_list ( resource $imap_stream , string $ref , string $pattern )
fd: Read the list of mailboxes.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_listmailbox
fs: 
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_listscan
fs: array imap_listscan ( resource $imap_stream , string $ref , string $pattern , string $content )
fd: Returns an array containing the names of the mailboxes that have content in the text of the mailbox. 
vi: 
pt: IMAP, POP3 and NNTP
fn: imap_listsubscribed
fs: 
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_lsub
fs: array imap_lsub ( resource $imap_stream , string $ref , string $pattern )
fd: Gets an array of all the mailboxes that you have subscribed.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_mail
fs: bool imap_mail ( string $to , string $subject , string $message [, string $additional_headers [, string $cc [, string $bcc [, string $rpath ]]]] )
fd: This function allows sending of emails with correct handling of Cc and Bcc receivers. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_mail_compose
fs: string imap_mail_compose ( array $envelope , array $body )
fd: Create a MIME message based on the given envelope and body sections.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_mail_copy
fs: bool imap_mail_copy ( resource $imap_stream , string $msglist , string $mailbox [, int $options ] )
fd: Copies mail messages specified by msglist to specified mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_mail_move
fs: bool imap_mail_move ( resource $imap_stream , string $msglist , string $mailbox [, int $options ] )
fd: Moves mail messages specified by msglist to the specified mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_mailboxmsginfo
fs: object imap_mailboxmsginfo ( resource $imap_stream )
fd: Checks the current mailbox status on the server.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_mime_header_decode
fs: array imap_mime_header_decode ( string $text )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_msgno
fs: int imap_msgno ( resource $imap_stream , int $uid )
fd: Returns the message sequence number for the given uid. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_num_msg
fs: int imap_num_msg ( resource $imap_stream )
fd: Gets the number of messages in the current mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_num_recent
fs: int imap_num_recent ( resource $imap_stream )
fd: Gets the number of recent messages in the current mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_open
fs: resource imap_open ( string $mailbox , string $username , string $password [, int $options [, int $n_retries ]] )
fd: Opens an IMAP stream to a mailbox. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_ping
fs: bool imap_ping ( resource $imap_stream )
fd: imap_ping() pings the stream to see if it's still active. It may discover new mail; this is the preferred method for a periodic new mail check as well as a keep alive for servers which have inactivity timeout.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_qprint
fs: string imap_qprint ( string $string )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_renamemailbox
fs: bool imap_renamemailbox ( resource $imap_stream , string $old_mbox , string $new_mbox )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_reopen
fs: bool imap_reopen ( resource $imap_stream , string $mailbox [, int $options [, int $n_retries ]] )
fd: Reopens the specified stream to a new mailbox on an IMAP or NNTP server.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_rfc822_parse_adrlist
fs: array imap_rfc822_parse_adrlist ( string $address , string $default_host )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_rfc822_parse_headers
fs: object imap_rfc822_parse_headers ( string $headers [, string $defaulthost ] )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_rfc822_write_address
fs: string imap_rfc822_write_address ( string $mailbox , string $host , string $personal )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_savebody
fs: bool imap_savebody ( resource $imap_stream , mixed $file , int $msg_number [, string $part_number [, int $options ]] )
fd: Saves a part or the whole body of the specified message.
vi: PHP 5 >= 5.1.3
pt: IMAP, POP3 and NNTP
fn: imap_scanmailbox
fs: 
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_search
fs: array imap_search ( resource $imap_stream , string $criteria [, int $options [, string $charset ]] )
fd: This function performs a search on the mailbox currently opened in the given imap stream. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_set_quota
fs: bool imap_set_quota ( resource $imap_stream , string $quota_root , int $quota_limit )
fd: Sets an upper limit quota on a per mailbox basis.
vi: PHP 4 >= 4.0.5, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_setacl
fs: 
fd: 
vi: 
pt: IMAP, POP3 and NNTP
fn: imap_setflag_full
fs: bool imap_setflag_full ( resource $imap_stream , string $sequence , string $flag [, int $options ] )
fd: Causes a store to add the specified flag to the flags set for the messages in the specified sequence.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_sort
fs: array imap_sort ( resource $imap_stream , int $criteria , int $reverse [, int $options [, string $search_criteria [, string $charset ]]] )
fd: Gets and sorts message numbers by the given parameters.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_status
fs: object imap_status ( resource $imap_stream , string $mailbox , int $options )
fd: Gets status information about the given mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_subscribe
fs: bool imap_subscribe ( resource $imap_stream , string $mailbox )
fd: Subscribe to a new mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_thread
fs: array imap_thread ( resource $imap_stream [, int $options ] )
fd: Gets a tree of a threaded message.
vi: PHP 4 >= 4.0.7, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_timeout
fs: mixed imap_timeout ( int $timeout_type [, int $timeout ] )
fd: 
vi: PHP 4 >= 4.3.3, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_uid
fs: int imap_uid ( resource $imap_stream , int $msg_number )
fd: This function returns the UID for the given message sequence number. An UID is a unique identifier that will not change over time while a message sequence number may change whenever the content of the mailbox changes. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_undelete
fs: bool imap_undelete ( resource $imap_stream , int $msg_number [, int $flags ] )
fd: 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_unsubscribe
fs: bool imap_unsubscribe ( string $imap_stream , string $mailbox )
fd: Unsubscribe from the specified mailbox.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_utf7_decode
fs: string imap_utf7_decode ( string $text )
fd: Decodes modified UTF-7 text into ISO-8859-1 string. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_utf7_encode
fs: string imap_utf7_encode ( string $data )
fd: Converts data to modified UTF-7 text. 
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: imap_utf8
fs: string imap_utf8 ( string $mime_encoded_text )
fd: Converts the given mime_encoded_text to UTF-8.
vi: PHP 4, PHP 5
pt: IMAP, POP3 and NNTP
fn: implode
fs: string implode ( string $glue , array $pieces )
fd: Join array elements with a glue string. 
vi: PHP 4, PHP 5
pt: String
fn: import_request_variables
fs: bool import_request_variables ( string $types [, string $prefix ] )
fd: Imports GET/POST/Cookie variables into the global scope.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Variable Handling
fn: in_array
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: include
fs: 
fd: 
vi: 
pt: 
fn: include_once
fs: 
fd: 
vi: 
pt: 
fn: inet_ntop
fs: string inet_ntop ( string $in_addr )
fd: 
vi: PHP 5 >= 5.1.0
pt: Network
fn: inet_pton
fs: string inet_pton ( string $address )
fd: This function converts a human readable IPv4 or IPv6 address (if PHP was built with IPv6 support enabled) into an address family appropriate 32bit or 128bit binary structure.
vi: PHP 5 >= 5.1.0
pt: Network
fn: ingres_autocommit
fs: bool ingres_autocommit ([ resource $link ] )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_close
fs: bool ingres_close ([ resource $link ] )
fd: ingres_close() closes the connection to the Ingres server that's associated with the specified link. 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_commit
fs: bool ingres_commit ([ resource $link ] )
fd: ingres_commit() commits the currently open transaction, making all changes made to the database permanent. 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_connect
fs: resource ingres_connect ([ string $database [, string $username [, string $password [, array $options ]]]] )
fd: ingres_connect() opens a connection with the given Ingres database. 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_cursor
fs: string ingres_cursor ([ resource $link ] )
fd: Returns an string containing the active cursor name. If no cursor is active then NULL is returned. 
vi: PECL ingres:1.1-1.4.3
pt: Ingres II
fn: ingres_errno
fs: int ingres_errno ([ resource $link ] )
fd: Returns an integer containing the last error number. If no error was reported 0 is returned. 
vi: PECL ingres:1.1-1.4.3
pt: Ingres II
fn: ingres_error
fs: string ingres_error ([ resource $link ] )
fd: Returns a string containing the last error, or NULL if no error has occurred. 
vi: PECL ingres:1.1-1.4.3
pt: Ingres II
fn: ingres_errsqlstate
fs: string ingres_errsqlstate ([ resource $link ] )
fd: Returns a string containing the last SQLSTATE, or NULL if no error has occurred. 
vi: PECL ingres:1.1-1.4.3
pt: Ingres II
fn: ingres_fetch_array
fs: array ingres_fetch_array ([ int $result_type [, resource $link ]] )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_fetch_object
fs: object ingres_fetch_object ([ int $result_type [, resource $link ]] )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_fetch_row
fs: array ingres_fetch_row ([ resource $link ] )
fd: ingres_fetch_row() returns an array that corresponds to the fetched row, or FALSE if there are no more rows. Each result column is stored in an array offset, starting at offset 1. 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_field_length
fs: int ingres_field_length ( int $index [, resource $link ] )
fd: ingres_field_length() returns the length of a field. This is the number of bytes used by the server to store the field. For detailed information, see the Ingres/OpenAPI User Guide - Appendix C.
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_field_name
fs: string ingres_field_name ( int $index [, resource $link ] )
fd: ingres_field_name() returns the name of a field in a query result.
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_field_nullable
fs: bool ingres_field_nullable ( int $index [, resource $link ] )
fd: Test if a field is nullable.
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_field_precision
fs: int ingres_field_precision ( int $index [, resource $link ] )
fd: ingres_field_precision() returns the precision of a field. This value is used only for decimal, float and money SQL data types. For detailed information, see the Ingres/OpenAPI User Guide - Appendix C.
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_field_scale
fs: int ingres_field_scale ( int $index [, resource $link ] )
fd: ingres_field_scale() returns the scale of a field. This value is used only for the decimal SQL data type. For detailed information, see the Ingres/OpenAPI User Guide - Appendix C.
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_field_type
fs: string ingres_field_type ( int $index [, resource $link ] )
fd: Get the type of a field in a query result.
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_num_fields
fs: int ingres_num_fields ([ resource $link ] )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_num_rows
fs: int ingres_num_rows ([ resource $link ] )
fd: This function is mainly meant to get the number of rows modified in the database.
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_pconnect
fs: resource ingres_pconnect ([ string $database [, string $username [, string $password ]]] )
fd: Open a persistent connection to an Ingres II database. 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_query
fs: bool ingres_query ( string $query [, resource $link ] )
fd: ingres_query() sends the given query to the Ingres server. 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ingres_rollback
fs: bool ingres_rollback ([ resource $link ] )
fd: ingres_rollback() rolls back the currently open transaction, actually canceling all changes made to the database during the transaction. 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5, PECL ingres:1.0-1.4.3
pt: Ingres II
fn: ini_alter
fs: 
fd: 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: ini_get
fs: string ini_get ( string $varname )
fd: Returns the value of the configuration option on success.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: ini_get_all
fs: array ini_get_all ([ string $extension ] )
fd: Returns all the registered configuration options.
vi: PHP 4 >= 4.2.0, PHP 5
pt: PHP Options&Information
fn: ini_restore
fs: void ini_restore ( string $varname )
fd: Restores a given configuration option to its original value.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: ini_set
fs: string ini_set ( string $varname , string $newvalue )
fd: Sets the value of the given configuration option. The configuration option will keep this new value during the script's execution, and will be restored at the script's ending.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: interface_exists
fs: bool interface_exists ( string $interface_name [, bool $autoload ] )
fd: Checks if the given interface has been defined.
vi: PHP 5 >= 5.0.2
pt: Class/Object
fn: intval
fs: int intval ( mixed $var [, int $base ] )
fd: 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: ip2long
fs: int ip2long ( string $ip_address )
fd: The function ip2long() generates an IPv4 Internet network address from its Internet standard format (dotted string) representation. 
vi: PHP 4, PHP 5
pt: Network
fn: iptcembed
fs: mixed iptcembed ( string $iptcdata , string $jpeg_file_name [, int $spool ] )
fd: 
vi: PHP 4, PHP 5
pt: Image
fn: iptcparse
fs: array iptcparse ( string $iptcblock )
fd: 
vi: PHP 4, PHP 5
pt: Image
fn: ircg_channel_mode
fs: bool ircg_channel_mode ( resource $connection , string $channel , string $mode_spec , string $nick )
fd: Set channel mode flags for channel on server connected to by connection. Mode flags are passed in mode_spec and are applied to the user specified by nick.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_disconnect
fs: bool ircg_disconnect ( resource $connection , string $reason )
fd: 
vi: PHP 4 >= 4.0.4, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_eval_ecmascript_params
fs: array ircg_eval_ecmascript_params ( string $params )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_fetch_error_msg
fs: array ircg_fetch_error_msg ( resource $connection )
fd: ircg_fetch_error_msg() returns the error from a failed connection.
vi: PHP 4 >= 4.0.7, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_get_username
fs: string ircg_get_username ( resource $connection )
fd: ircg_get_username() returns the username for the specified connection connection.
vi: PHP 4 >= 4.0.7, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_html_encode
fs: string ircg_html_encode ( string $html_string [, bool $auto_links [, bool $conv_br ]] )
fd: Encodes a HTML string html_string for output. This exposes the interface which the IRCG extension uses internally to reformat data coming from an IRC link. The function causes IRC color/font codes to be encoded in HTML and escapes certain entities.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_ignore_add
fs: void ircg_ignore_add ( resource $connection , string $nick )
fd: This function adds user nick to the ignore list of the connection. Afterwards, IRCG will suppress all messages from this user through the associated connection.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_ignore_del
fs: bool ircg_ignore_del ( resource $connection , string $nick )
fd: This function removes user nick from the IRCG ignore list associated with connection.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_invite
fs: bool ircg_invite ( resource $connection , string $channel , string $nickname )
fd: ircg_invite() will send an invitation to the user nickname, prompting him to join the given channel.
vi: PHP 4 >= 4.3.3, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_is_conn_alive
fs: bool ircg_is_conn_alive ( resource $connection )
fd: ircg_is_conn_alive() checks the connection status.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_join
fs: bool ircg_join ( resource $connection , string $channel [, string $key ] )
fd: Join the channel channel on the server connected to by connection.
vi: PHP 4 >= 4.0.4, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_kick
fs: bool ircg_kick ( resource $connection , string $channel , string $nick , string $reason )
fd: Kick user nick from channel on server connected to by connection.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_list
fs: bool ircg_list ( resource $connection , string $channel )
fd: 
vi: PHP 4 >= 4.3.3, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_lookup_format_messages
fs: bool ircg_lookup_format_messages ( string $name )
fd: Check for the existence of the format message set name.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_lusers
fs: bool ircg_lusers ( resource $connection )
fd: ircg_lusers() will request a statistical breakdown of users on the network connected to on connection.
vi: PHP 4 >= 4.3.3, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_msg
fs: bool ircg_msg ( resource $connection , string $recipient , string $message [, bool $suppress ] )
fd: ircg_msg() will send the message to a channel or user on the server.
vi: PHP 4 >= 4.0.4, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_names
fs: bool ircg_names ( int $connection , string $channel [, string $target ] )
fd: 
vi: PHP 4 >= 4.3.3, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_nick
fs: bool ircg_nick ( resource $connection , string $nick )
fd: Change your nickname on the given connection to the specified one, if possible.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_nickname_escape
fs: string ircg_nickname_escape ( string $nick )
fd: Function ircg_nickname_escape() returns an encoded nickname specified by nick which is IRC-compliant.
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_nickname_unescape
fs: string ircg_nickname_unescape ( string $nick )
fd: Function ircg_nickname_unescape() returns a decoded nickname, which is specified in nick.
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_notice
fs: bool ircg_notice ( resource $connection , string $nick , string $message )
fd: This function will send the message text to the user nick on the server connected to by connection. IRC servers and other software will not automatically generate replies to NOTICEs in contrast to other message types.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_oper
fs: bool ircg_oper ( resource $connection , string $name , string $password )
fd: ircg_oper() will authenticate the logged in user on connection as an IRC operator.
vi: PHP 4 >= 4.3.3, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_part
fs: bool ircg_part ( resource $connection , string $channel )
fd: Leave the channel channel on the server connected to by connection.
vi: PHP 4 >= 4.0.4, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_pconnect
fs: resource ircg_pconnect ( string $username [, string $server_ip [, int $server_port [, string $msg_format [, array $ctcp_messages [, array $user_settings [, bool $bailout_on_trivial ]]]]]] )
fd: ircg_pconnect() will try to establish a connection to an IRC server.
vi: PHP 4 >= 4.0.4, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_register_format_messages
fs: bool ircg_register_format_messages ( string $name , array $messages )
fd: With ircg_register_format_messages() you can customize the way your IRC output looks like or which script functions are invoked on the client side.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_set_current
fs: bool ircg_set_current ( resource $connection )
fd: Select the current HTTP connection for output in this execution context.
vi: PHP 4 >= 4.0.4, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_set_file
fs: bool ircg_set_file ( resource $connection , string $path )
fd: ircg_set_file() specifies a logfile in which all output from the current connection will be logged.
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_set_on_die
fs: bool ircg_set_on_die ( resource $connection , string $host , int $port , string $data )
fd: In case of the termination of the connection, IRCG will connect to the specified host, send data to the new host connection and will wait until the remote part closes connection. This can be used to trigger a PHP script for example.
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_topic
fs: bool ircg_topic ( resource $connection , string $channel , string $new_topic )
fd: Change the topic for the channel.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_who
fs: bool ircg_who ( resource $connection , string $mask [, bool $ops_only ] )
fd: ircg_who() will request a list of users whose nickname is matching the given mask. 
vi: PHP 4 >= 4.3.3, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: ircg_whois
fs: bool ircg_whois ( resource $connection , string $nick )
fd: Sends a query to ask for information about the specified user.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5
pt: IRC Gateway
fn: is_a
fs: bool is_a ( object $object , string $class_name )
fd: Checks if the given object is of this class or has this class as one of its parents. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Class/Object
fn: is_array
fs: bool is_array ( mixed $var )
fd: Finds whether the given variable is an array.
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_binary
fs: bool is_binary ( mixed $var )
fd: Finds whether the given variable is a native binary string.
vi: 
pt: Variable Handling
fn: is_bool
fs: bool is_bool ( mixed $var )
fd: Finds whether the given variable is a boolean.
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_buffer
fs: bool is_buffer ( mixed $var )
fd: Finds whether the given variable is a native unicode or binary string.
vi: 
pt: Variable Handling
fn: is_callable
fs: bool is_callable ( mixed $var [, bool $syntax_only [, string &$callable_name ]] )
fd: Verify that the contents of a variable can be called as a function. This can check that a simple variable contains the name of a valid function, or that an array contains a properly encoded object and function name.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Variable Handling
fn: is_dir
fs: bool is_dir ( string $filename )
fd: Tells whether the given filename is a directory.
vi: PHP 4, PHP 5
pt: Filesystem
fn: is_double
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_executable
fs: bool is_executable ( string $filename )
fd: Tells whether the filename is executable.
vi: PHP 4, PHP 5
pt: Filesystem
fn: is_file
fs: bool is_file ( string $filename )
fd: Tells whether the given file is a regular file.
vi: PHP 4, PHP 5
pt: Filesystem
fn: is_finite
fs: bool is_finite ( float $val )
fd: Checks whether val is a legal finite on this platform.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Mathematical
fn: is_float
fs: bool is_float ( mixed $var )
fd: Finds whether the type of the given variable is float. 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_infinite
fs: bool is_infinite ( float $val )
fd: Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Mathematical
fn: is_int
fs: bool is_int ( mixed $var )
fd: Finds whether the type of the given variable is integer. 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_integer
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_link
fs: bool is_link ( string $filename )
fd: Tells whether the given file is a symbolic link.
vi: PHP 4, PHP 5
pt: Filesystem
fn: is_long
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_nan
fs: bool is_nan ( float $val )
fd: Checks whether val is 'not a number', like the result of acos(1.01).
vi: PHP 4 >= 4.2.0, PHP 5
pt: Mathematical
fn: is_null
fs: bool is_null ( mixed $var )
fd: Finds whether the given variable is NULL.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Variable Handling
fn: is_numeric
fs: bool is_numeric ( mixed $var )
fd: Finds whether the given variable is numeric. Numeric strings consist of optional sign, any number of digits, optional decimal part and optional exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal notation (0xFF) is allowed too but only without sign, decimal and exponential part.
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_object
fs: bool is_object ( mixed $var )
fd: Finds whether the given variable is an object.
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_readable
fs: bool is_readable ( string $filename )
fd: Tells whether the filename is readable.
vi: PHP 4, PHP 5
pt: Filesystem
fn: is_real
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_resource
fs: bool is_resource ( mixed $var )
fd: Finds whether the given variable is a resource.
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_scalar
fs: bool is_scalar ( mixed $var )
fd: Finds whether the given variable is a scalar. 
vi: PHP 4 >= 4.0.5, PHP 5
pt: Variable Handling
fn: is_soap_fault
fs: bool is_soap_fault ( mixed $obj )
fd: This function is useful when you like to check if the SOAP call failed, but don't like to use exceptions. To use it you must create a SoapClient object with the exceptions option set to zero or FALSE. In this case, the SOAP method will return a special SoapFault object which encapsulates the fault details (faultcode, faultstring, faultactor and faultdetails). 
vi: PHP 5
pt: SOAP
fn: is_string
fs: bool is_string ( mixed $var )
fd: Finds whether the type given variable is string.
vi: PHP 4, PHP 5
pt: Variable Handling
fn: is_subclass_of
fs: bool is_subclass_of ( mixed $object , string $class_name )
fd: Checks if the given object has the class class_name as one of its parents.
vi: PHP 4, PHP 5
pt: Class/Object
fn: is_unicode
fs: bool is_unicode ( mixed $var )
fd: Finds whether the given variable is a unicode string.
vi: 
pt: Variable Handling
fn: is_uploaded_file
fs: bool is_uploaded_file ( string $filename )
fd: Returns TRUE if the file named by filename was uploaded via HTTP POST. This is useful to help ensure that a malicious user hasn't tried to trick the script into working on files upon which it should not be working--for instance, /etc/passwd. 
vi: PHP 4 >= 4.0.3, PHP 5
pt: Filesystem
fn: is_writable
fs: bool is_writable ( string $filename )
fd: Returns TRUE if the filename exists and is writable. The filename argument may be a directory name allowing you to check if a directory is writable. 
vi: PHP 4, PHP 5
pt: Filesystem
fn: is_writeable
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Filesystem
fn: isset
fs: bool isset ( mixed $var [, mixed $var [, $... ]] )
fd: Determine whether a variable is set. 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: iterator_count
fs: 
fd: 
vi: PHP 5 >= 5.1.3
pt: Standard PHP Library (SPL)
fn: iterator_to_array
fs: 
fd: 
vi: PHP 5 >= 5.1.3
pt: Standard PHP Library (SPL)
fn: java_last_exception_clear
fs: void java_last_exception_clear ( void )
fd: Clears last Java exception.
vi: PHP 4 >= 4.0.2
pt: PHP / Java Integration
fn: java_last_exception_get
fs: object java_last_exception_get ( void )
fd: Gets last Java exception.
vi: PHP 4 >= 4.0.2
pt: PHP / Java Integration
fn: jddayofweek
fs: mixed jddayofweek ( int $julianday [, int $mode ] )
fd: Returns the day of the week. Can return a string or an integer depending on the mode.
vi: PHP 4, PHP 5
pt: Calendar
fn: jdmonthname
fs: string jdmonthname ( int $julianday , int $mode )
fd: Returns a string containing a month name. mode tells this function which calendar to convert the Julian Day Count to, and what type of month names are to be returned.
vi: PHP 4, PHP 5
pt: Calendar
fn: jdtofrench
fs: string jdtofrench ( int $juliandaycount )
fd: Converts a Julian Day Count to the French Republican Calendar.
vi: PHP 4, PHP 5
pt: Calendar
fn: jdtogregorian
fs: string jdtogregorian ( int $julianday )
fd: Converts Julian Day Count to a string containing the Gregorian date in the format of month/day/year.
vi: PHP 4, PHP 5
pt: Calendar
fn: jdtojewish
fs: string jdtojewish ( int $juliandaycount [, bool $hebrew [, int $fl ]] )
fd: Converts a Julian Day Count to the Jewish Calendar.
vi: PHP 4, PHP 5
pt: Calendar
fn: jdtojulian
fs: string jdtojulian ( int $julianday )
fd: Converts Julian Day Count to a string containing the Julian Calendar Date in the format of month/day/year.
vi: PHP 4, PHP 5
pt: Calendar
fn: jdtounix
fs: int jdtounix ( int $jday )
fd: This function will return a Unix timestamp corresponding to the Julian Day given in jday or FALSE if jday is not inside the Unix epoch (Gregorian years between 1970 and 2037 or 2440588 <= jday <= 2465342 ). The time returned is localtime (and not GMT).
vi: PHP 4, PHP 5
pt: Calendar
fn: jewishtojd
fs: int jewishtojd ( int $month , int $day , int $year )
fd: Although this function can handle dates all the way back to the year 1 (3761 B.C.), such use may not be meaningful. The Jewish calendar has been in use for several thousand years, but in the early days there was no formula to determine the start of a month. A new month was started when the new moon was first observed.
vi: PHP 4, PHP 5
pt: Calendar
fn: join
fs: 
fd: 
vi: PHP 4, PHP 5
pt: String
fn: jpeg2wbmp
fs: bool jpeg2wbmp ( string $jpegname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )
fd: Converts a JPEG file into a WBMP file.
vi: PHP 4 >= 4.0.5, PHP 5
pt: Image
fn: json_decode
fs: mixed json_decode ( string $json [, bool $assoc ] )
fd: Takes a JSON encoded string and converts it into a PHP variable.
vi: PHP 5 >= 5.2.0, PECL json:1.2.0-1.2.1
pt: JSON
fn: json_encode
fs: string json_encode ( mixed $value )
fd: Returns a string containing the JSON representation of value.
vi: PHP 5 >= 5.2.0, PECL json:1.2.0-1.2.1
pt: JSON
fn: juliantojd
fs: int juliantojd ( int $month , int $day , int $year )
fd: Valid Range for Julian Calendar 4713 B.C. to 9999 A.D. 
vi: PHP 4, PHP 5
pt: Calendar
fn: kadm5_chpass_principal
fs: bool kadm5_chpass_principal ( resource $handle , string $principal , string $password )
fd: kadm5_chpass_principal() sets the new password password for the principal.
vi: PECL kadm5:0.2.3
pt: KADM5
fn: kadm5_create_principal
fs: bool kadm5_create_principal ( resource $handle , string $principal [, string $password [, array $options ]] )
fd: kadm5_create_principal() creates a principal with the given password. If password is omitted or is NULL, a random key will be generated. 
vi: PECL kadm5:0.2.3
pt: KADM5
fn: kadm5_delete_principal
fs: bool kadm5_delete_principal ( resource $handle , string $principal )
fd: kadm5_delete_principal() remove the principal from the Kerberos database.
vi: PECL kadm5:0.2.3
pt: KADM5
fn: kadm5_destroy
fs: bool kadm5_destroy ( resource $handle )
fd: 
vi: PECL kadm5:0.2.3
pt: KADM5
fn: kadm5_flush
fs: bool kadm5_flush ( resource $handle )
fd: 
vi: PECL kadm5:0.2.3
pt: KADM5
fn: kadm5_get_policies
fs: array kadm5_get_policies ( resource $handle )
fd: kadm5_get_policies() returns an array containing the policies's names.
vi: PECL kadm5:0.2.3
pt: KADM5
fn: kadm5_get_principal
fs: array kadm5_get_principal ( resource $handle , string $principal )
fd: kadm5_get_principal() returns an associative array containing the following keys: KADM5_PRINCIPAL, KADM5_PRINC_EXPIRE_TIME, KADM5_PW_EXPIRATION, KADM5_ATTRIBUTES, KADM5_MAX_LIFE, KADM5_MOD_NAME, KADM5_MOD_TIME, KADM5_KVNO, KADM5_POLICY, KADM5_MAX_RLIFE, KADM5_LAST_SUCCESS, KADM5_LAST_FAILED, KADM5_FAIL_AUTH_COUNT.
vi: PECL kadm5:0.2.3
pt: KADM5
fn: kadm5_get_principals
fs: array kadm5_get_principals ( resource $handle )
fd: kadm5_get_principals() returns an array containing the principals's names.
vi: PECL kadm5:0.2.3
pt: KADM5
fn: kadm5_init_with_password
fs: resource kadm5_init_with_password ( string $admin_server , string $realm , string $principal , string $password )
fd: kadm5_init_with_password() opens a connection with the KADM5 library using the principal and the given password to obtain initial credentials from the admin_server. The parameter realm defines the authentication domain for the connection.
vi: PECL kadm5:0.2.3
pt: KADM5
fn: kadm5_modify_principal
fs: bool kadm5_modify_principal ( resource $handle , string $principal , array $options )
fd: kadm5_modify_principal() modifies a principal according to the given options. Allowed are the following options: KADM5_PRINC_EXPIRE_TIME, KADM5_PW_EXPIRATION, KADM5_ATTRIBUTES, KADM5_MAX_LIFE, KADM5_KVNO, KADM5_POLICY, KADM5_CLEARPOLICY, KADM5_MAX_RLIFE, KADM5_FAIL_AUTH_COUNT.
vi: PECL kadm5:0.2.3
pt: KADM5
fn: key
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: krsort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: ksort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: lcg_value
fs: float lcg_value ( void )
fd: lcg_value() returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes.
vi: PHP 4, PHP 5
pt: Mathematical
fn: lchgrp
fs: bool lchgrp ( string $filename , mixed $group )
fd: Attempts to change the group of the symlink filename to group. 
vi: PHP 5 >= 5.1.2
pt: Filesystem
fn: lchown
fs: bool lchown ( string $filename , mixed $user )
fd: Attempts to change the owner of the symlink filename to user user. 
vi: PHP 5 >= 5.1.2
pt: Filesystem
fn: ldap_8859_to_t61
fs: string ldap_8859_to_t61 ( string $value )
fd: Translate ISO-8859 characters to t61 characters. 
vi: PHP 4 >= 4.0.2, PHP 5
pt: LDAP
fn: ldap_add
fs: bool ldap_add ( resource $link_identifier , string $dn , array $entry )
fd: Add entries in the LDAP directory.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_bind
fs: bool ldap_bind ( resource $link_identifier [, string $bind_rdn [, string $bind_password ]] )
fd: Binds to the LDAP directory with specified RDN and password.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_close
fs: 
fd: 
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_compare
fs: mixed ldap_compare ( resource $link_identifier , string $dn , string $attribute , string $value )
fd: Compare value of attribute with value of same attribute in an LDAP directory entry.
vi: PHP 4 >= 4.0.2, PHP 5
pt: LDAP
fn: ldap_connect
fs: resource ldap_connect ([ string $hostname [, int $port ]] )
fd: Establishes a connection to a LDAP server on a specified hostname and port.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_count_entries
fs: int ldap_count_entries ( resource $link_identifier , resource $result_identifier )
fd: Returns the number of entries stored in the result of previous search operations.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_delete
fs: bool ldap_delete ( resource $link_identifier , string $dn )
fd: Deletes a particular entry in LDAP directory.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_dn2ufn
fs: string ldap_dn2ufn ( string $dn )
fd: Turns the specified dn, into a more user-friendly form, stripping off type names.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_err2str
fs: string ldap_err2str ( int $errno )
fd: Returns the string error message explaining the error number errno. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_errno
fs: int ldap_errno ( resource $link_identifier )
fd: Returns the standardized error number returned by the last LDAP command.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_error
fs: string ldap_error ( resource $link_identifier )
fd: Returns the string error message explaining the error generated by the last LDAP command for the given link_identifier. While LDAP errno numbers are standardized, different libraries return different or even localized textual error messages. Never check for a specific error message text, but always use an error number to check. 
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_explode_dn
fs: array ldap_explode_dn ( string $dn , int $with_attrib )
fd: 
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_first_attribute
fs: string ldap_first_attribute ( resource $link_identifier , resource $result_entry_identifier )
fd: Gets the first attribute in the given entry.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_first_entry
fs: resource ldap_first_entry ( resource $link_identifier , resource $result_identifier )
fd: Returns the entry identifier for first entry in the result.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_first_reference
fs: resource ldap_first_reference ( resource $link , resource $result )
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: LDAP
fn: ldap_free_result
fs: bool ldap_free_result ( resource $result_identifier )
fd: Frees up the memory allocated internally to store the result. All result memory will be automatically freed when the script terminates. 
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_get_attributes
fs: array ldap_get_attributes ( resource $link_identifier , resource $result_entry_identifier )
fd: Reads attributes and values from an entry in the search result. 
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_get_dn
fs: string ldap_get_dn ( resource $link_identifier , resource $result_entry_identifier )
fd: Finds out the DN of an entry in the result.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_get_entries
fs: array ldap_get_entries ( resource $link_identifier , resource $result_identifier )
fd: Reads multiple entries from the given result, and then reading the attributes and multiple values.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_get_option
fs: bool ldap_get_option ( resource $link_identifier , int $option , mixed &$retval )
fd: Sets retval to the value of the specified option.
vi: PHP 4 >= 4.0.4, PHP 5
pt: LDAP
fn: ldap_get_values
fs: array ldap_get_values ( resource $link_identifier , resource $result_entry_identifier , string $attribute )
fd: Reads all the values of the attribute in the entry in the result. 
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_get_values_len
fs: array ldap_get_values_len ( resource $link_identifier , resource $result_entry_identifier , string $attribute )
fd: Reads all the values of the attribute in the entry in the result. 
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_list
fs: resource ldap_list ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )
fd: Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_ONELEVEL. 
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_mod_add
fs: bool ldap_mod_add ( resource $link_identifier , string $dn , array $entry )
fd: Adds one or more attributes to the specified dn. It performs the modification at the attribute level as opposed to the object level.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_mod_del
fs: bool ldap_mod_del ( resource $link_identifier , string $dn , array $entry )
fd: Removes one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_mod_replace
fs: bool ldap_mod_replace ( resource $link_identifier , string $dn , array $entry )
fd: Replaces one or more attributes from the specified dn. It performs the modification at the attribute level as opposed to the object level.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_modify
fs: bool ldap_modify ( resource $link_identifier , string $dn , array $entry )
fd: Modify the existing entries in the LDAP directory.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_next_attribute
fs: string ldap_next_attribute ( resource $link_identifier , resource $result_entry_identifier )
fd: Retrieves the attributes in an entry.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_next_entry
fs: resource ldap_next_entry ( resource $link_identifier , resource $result_entry_identifier )
fd: Retrieve the entries stored in the result. Successive calls to the ldap_next_entry() return entries one by one till there are no more entries.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_next_reference
fs: resource ldap_next_reference ( resource $link , resource $entry )
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: LDAP
fn: ldap_parse_reference
fs: bool ldap_parse_reference ( resource $link , resource $entry , array &$referrals )
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: LDAP
fn: ldap_parse_result
fs: bool ldap_parse_result ( resource $link , resource $result , int &$errcode [, string &$matcheddn [, string &$errmsg [, array &$referrals ]]] )
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: LDAP
fn: ldap_read
fs: resource ldap_read ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )
fd: Performs the search for a specified filter on the directory with the scope LDAP_SCOPE_BASE. So it is equivalent to reading an entry from the directory.
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_rename
fs: bool ldap_rename ( resource $link_identifier , string $dn , string $newrdn , string $newparent , bool $deleteoldrdn )
fd: The entry specified by dn is renamed/moved.
vi: PHP 4 >= 4.0.5, PHP 5
pt: LDAP
fn: ldap_sasl_bind
fs: bool ldap_sasl_bind ( resource $link [, string $binddn [, string $password [, string $sasl_mech [, string $sasl_realm [, string $sasl_authz_id [, string $props ]]]]]] )
fd: 
vi: PHP 5
pt: LDAP
fn: ldap_search
fs: resource ldap_search ( resource $link_identifier , string $base_dn , string $filter [, array $attributes [, int $attrsonly [, int $sizelimit [, int $timelimit [, int $deref ]]]]] )
fd: Performs the search for a specified filter on the directory with the scope of LDAP_SCOPE_SUBTREE. This is equivalent to searching the entire directory. 
vi: PHP 4, PHP 5
pt: LDAP
fn: ldap_set_option
fs: bool ldap_set_option ( resource $link_identifier , int $option , mixed $newval )
fd: Sets the value of the specified option to be newval.
vi: PHP 4 >= 4.0.4, PHP 5
pt: LDAP
fn: ldap_set_rebind_proc
fs: bool ldap_set_rebind_proc ( resource $link , callback $callback )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: LDAP
fn: ldap_sort
fs: bool ldap_sort ( resource $link , resource $result , string $sortfilter )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: LDAP
fn: ldap_start_tls
fs: bool ldap_start_tls ( resource $link )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: LDAP
fn: ldap_t61_to_8859
fs: string ldap_t61_to_8859 ( string $value )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: LDAP
fn: ldap_unbind
fs: bool ldap_unbind ( resource $link_identifier )
fd: Unbinds from the LDAP directory.
vi: PHP 4, PHP 5
pt: LDAP
fn: levenshtein
fs: 
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: String
fn: libxml_clear_errors
fs: void libxml_clear_errors ( void )
fd: libxml_clear_errors() clears the libxml error buffer.
vi: PHP 5 >= 5.1.0
pt: libxml
fn: libxml_get_errors
fs: array libxml_get_errors ( void )
fd: Retrieve array of errors.
vi: PHP 5 >= 5.1.0
pt: libxml
fn: libxml_get_last_error
fs: LibXMLError libxml_get_last_error ( void )
fd: Retrieve last error from libxml.
vi: PHP 5 >= 5.1.0
pt: libxml
fn: libxml_set_streams_context
fs: void libxml_set_streams_context ( resource $streams_context )
fd: Sets the streams context for the next libxml document load or write.
vi: PHP 5
pt: libxml
fn: libxml_use_internal_errors
fs: bool libxml_use_internal_errors ([ bool $use_errors ] )
fd: libxml_use_internal_errors() allows you to disable standard libxml errors and enable user error handling.
vi: PHP 5 >= 5.1.0
pt: libxml
fn: link
fs: bool link ( string $target , string $link )
fd: link() creates a hard link.
vi: PHP 4, PHP 5
pt: Filesystem
fn: linkinfo
fs: int linkinfo ( string $path )
fd: Gets information about a link. 
vi: PHP 4, PHP 5
pt: Filesystem
fn: list
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: locale_get_default
fs: string locale_get_default ( void )
fd: This function returns the default Locale, which is used by PHP to localize certain features.
vi: 
pt: i18n
fn: locale_set_default
fs: bool locale_set_default ( string $name )
fd: Sets the default Locale for PHP programs.
vi: 
pt: i18n
fn: localeconv
fs: array localeconv ( void )
fd: Returns an associative array containing localized numeric and monetary formatting information.
vi: PHP 4 >= 4.0.5, PHP 5
pt: String
fn: localtime
fs: array localtime ([ int $timestamp [, bool $is_associative ]] )
fd: The localtime() function returns an array identical to that of the structure returned by the C function call.
vi: PHP 4, PHP 5
pt: Date and Time
fn: log
fs: float log ( float $arg [, float $base ] )
fd: If the optional base parameter is specified, log() returns log base arg, otherwise log() returns the natural logarithm of arg.
vi: PHP 4, PHP 5
pt: Mathematical
fn: log10
fs: float log10 ( float $arg )
fd: Returns the base-10 logarithm of arg.
vi: PHP 4, PHP 5
pt: Mathematical
fn: log1p
fs: float log1p ( float $number )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Mathematical
fn: long2ip
fs: string long2ip ( int $proper_address )
fd: The function long2ip() generates an Internet address in dotted format (i.e.: aaa.bbb.ccc.ddd) from the proper address representation.
vi: PHP 4, PHP 5
pt: Network
fn: lstat
fs: array lstat ( string $filename )
fd: Gathers the statistics of the file or symbolic link named by filename.
vi: PHP 4, PHP 5
pt: Filesystem
fn: ltrim
fs: string ltrim ( string $str [, string $charlist ] )
fd: Strip whitespace (or other characters) from the beginning of a string.
vi: PHP 4, PHP 5
pt: String
fn: lzf_compress
fs: string lzf_compress ( string $data )
fd: lzf_compress() compresses the given data.
vi: PECL lzf:0.1-1.4
pt: LZF
fn: lzf_decompress
fs: string lzf_decompress ( string $data )
fd: 
vi: PECL lzf:0.1-1.4
pt: LZF
fn: lzf_optimized_for
fs: int lzf_optimized_for ( void )
fd: Determines for what the LZF extension was optimised.
vi: PECL lzf:1.0-1.4
pt: LZF
fn: m_checkstatus
fs: int m_checkstatus ( resource $conn , int $identifier )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_completeauthorizations
fs: int m_completeauthorizations ( resource $conn , int &$array )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_connect
fs: int m_connect ( resource $conn )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_connectionerror
fs: string m_connectionerror ( resource $conn )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_deletetrans
fs: bool m_deletetrans ( resource $conn , int $identifier )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_destroyconn
fs: bool m_destroyconn ( resource $conn )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_destroyengine
fs: void m_destroyengine ( void )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_getcell
fs: string m_getcell ( resource $conn , int $identifier , string $column , int $row )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_getcellbynum
fs: string m_getcellbynum ( resource $conn , int $identifier , int $column , int $row )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_getcommadelimited
fs: string m_getcommadelimited ( resource $conn , int $identifier )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_getheader
fs: string m_getheader ( resource $conn , int $identifier , int $column_num )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_initconn
fs: resource m_initconn ( void )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_initengine
fs: int m_initengine ( string $location )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_iscommadelimited
fs: int m_iscommadelimited ( resource $conn , int $identifier )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_maxconntimeout
fs: bool m_maxconntimeout ( resource $conn , int $secs )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_monitor
fs: int m_monitor ( resource $conn )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_numcolumns
fs: int m_numcolumns ( resource $conn , int $identifier )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_numrows
fs: int m_numrows ( resource $conn , int $identifier )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_parsecommadelimited
fs: int m_parsecommadelimited ( resource $conn , int $identifier )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_responsekeys
fs: array m_responsekeys ( resource $conn , int $identifier )
fd: 
vi: PHP 5 >= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_responseparam
fs: string m_responseparam ( resource $conn , int $identifier , string $key )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_returnstatus
fs: int m_returnstatus ( resource $conn , int $identifier )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_setblocking
fs: int m_setblocking ( resource $conn , int $tf )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_setdropfile
fs: int m_setdropfile ( resource $conn , string $directory )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_setip
fs: int m_setip ( resource $conn , string $host , int $port )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_setssl
fs: int m_setssl ( resource $conn , string $host , int $port )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_setssl_cafile
fs: int m_setssl_cafile ( resource $conn , string $cafile )
fd: 
vi: PHP 5 >= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_setssl_files
fs: int m_setssl_files ( resource $conn , string $sslkeyfile , string $sslcertfile )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_settimeout
fs: int m_settimeout ( resource $conn , int $seconds )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_sslcert_gen_hash
fs: string m_sslcert_gen_hash ( string $filename )
fd: 
vi: PECL mcve:5.2.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_transactionssent
fs: int m_transactionssent ( resource $conn )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_transinqueue
fs: int m_transinqueue ( resource $conn )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_transkeyval
fs: int m_transkeyval ( resource $conn , int $identifier , string $key , string $value )
fd: 
vi: PHP 5 >= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_transnew
fs: int m_transnew ( resource $conn )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_transsend
fs: int m_transsend ( resource $conn , int $identifier )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_uwait
fs: int m_uwait ( int $microsecs )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_validateidentifier
fs: int m_validateidentifier ( resource $conn , int $tf )
fd: 
vi: PHP 5 >= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_verifyconnection
fs: bool m_verifyconnection ( resource $conn , int $tf )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: m_verifysslcert
fs: bool m_verifysslcert ( resource $conn , int $tf )
fd: 
vi: PHP 4 >= 4.3.9, PHP 5 <= 5.0.5, PECL mcve:1.0.0-5.2.2
pt: MCVE (Monetra) Payment
fn: mail
fs: bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )
fd: Sends an email.
vi: PHP 4, PHP 5
pt: Mail
fn: mailparse_determine_best_xfer_encoding
fs: string mailparse_determine_best_xfer_encoding ( resource $fp )
fd: Figures out the best way of encoding the content read from the given file pointer.
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_msg_create
fs: resource mailparse_msg_create ( void )
fd: Create a MIME mail resource.
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_msg_extract_part
fs: void mailparse_msg_extract_part ( resource $mimemail , string $msgbody [, callback $callbackfunc ] )
fd: 
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_msg_extract_part_file
fs: string mailparse_msg_extract_part_file ( resource $mimemail , mixed $filename [, callback $callbackfunc ] )
fd: Extracts/decodes a message section from the supplied filename. 
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_msg_extract_whole_part_file
fs: string mailparse_msg_extract_whole_part_file ( resource $mimemail , string $filename [, callback $callbackfunc ] )
fd: 
vi: PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_msg_free
fs: bool mailparse_msg_free ( resource $mimemail )
fd: Frees a MIME resource.
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_msg_get_part
fs: resource mailparse_msg_get_part ( resource $mimemail , string $mimesection )
fd: 
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_msg_get_part_data
fs: array mailparse_msg_get_part_data ( resource $mimemail )
fd: 
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_msg_get_structure
fs: array mailparse_msg_get_structure ( resource $mimemail )
fd: 
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_msg_parse
fs: bool mailparse_msg_parse ( resource $mimemail , string $data )
fd: Incrementally parse data into the supplied mime mail resource. 
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_msg_parse_file
fs: resource mailparse_msg_parse_file ( string $filename )
fd: Parses a file. This is the optimal way of parsing a mail file that you have on disk.
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_rfc822_parse_addresses
fs: array mailparse_rfc822_parse_addresses ( string $addresses )
fd: 
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_stream_encode
fs: bool mailparse_stream_encode ( resource $sourcefp , resource $destfp , string $encoding )
fd: Streams data from the source file pointer, apply encoding and write to the destination file pointer.
vi: PHP 4 >= 4.0.7, PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: mailparse_uudecode_all
fs: array mailparse_uudecode_all ( resource $fp )
fd: Scans the data from the given file pointer and extract each embedded uuencoded file into a temporary file.
vi: PECL mailparse:0.9-2.1.1
pt: Mailparse
fn: main
fs: 
fd: There is no function named main() except in the PHP source. In PHP 4.3.0, a new type of error handling in the PHP source (php_error_docref) was introduced.
vi: 
pt: PHP Options&Information
fn: max
fs: mixed max ( array $values )
fd: 
vi: PHP 4, PHP 5
pt: Mathematical
fn: maxdb_affected_rows
fs: int maxdb_affected_rows ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_autocommit
fs: bool maxdb_autocommit ( resource $link , bool $mode )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_bind_param
fs: 
fd: 
vi: PECL maxdb:1.0
pt: MaxDB PHP Extension
fn: maxdb_bind_result
fs: 
fd: 
vi: PECL maxdb:1.0
pt: MaxDB PHP Extension
fn: maxdb_change_user
fs: bool maxdb_change_user ( resource $link , string $user , string $password , string $database )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_character_set_name
fs: string maxdb_character_set_name ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_client_encoding
fs: 
fd: 
vi: PECL maxdb:1.0
pt: MaxDB PHP Extension
fn: maxdb_close
fs: bool maxdb_close ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_close_long_data
fs: 
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_commit
fs: bool maxdb_commit ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_connect
fs: resource maxdb_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket ]]]]]] )
fd: 
vi: PECL maxdb:7.5.00.24-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_connect_errno
fs: int maxdb_connect_errno ( void )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_connect_error
fs: string maxdb_connect_error ( void )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_data_seek
fs: bool maxdb_data_seek ( resource $result , int $offset )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_debug
fs: void maxdb_debug ( string $debug )
fd: The maxdb_debug() can be used to trace the SQLDBC communication. The following strings can be used as a parameter to maxdb_debug(): TRACE SHORT ON|OFF - Enables/disables method call trace. TRACE LONG ON|OFF - Enables/disables method argument and detail debug trace. TRACE PACKET ON|OFF|<size> - Enables/disables packet trace, limiting the size of the traced object to the specified number of bytes, or 1000 if no size is specified. TRACE SQL ON|OFF - Enables/disables high level api trace. TRACE TIMESTAMP ON|OFF - Enables/disables a timestamp prefix on each line that is traced. TRACE SIZE <size> - Limits the size of the trace file to <size> bytes, at least 8192 bytes are required.
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_disable_reads_from_master
fs: bool maxdb_disable_reads_from_master ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_disable_rpl_parse
fs: bool maxdb_disable_rpl_parse ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_dump_debug_info
fs: bool maxdb_dump_debug_info ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_embedded_connect
fs: resource maxdb_embedded_connect ([ string $dbname ] )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_enable_reads_from_master
fs: bool maxdb_enable_reads_from_master ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_enable_rpl_parse
fs: bool maxdb_enable_rpl_parse ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_errno
fs: int maxdb_errno ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_error
fs: string maxdb_error ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_escape_string
fs: 
fd: 
vi: PECL maxdb:1.0
pt: MaxDB PHP Extension
fn: maxdb_execute
fs: 
fd: 
vi: PECL maxdb:1.0
pt: MaxDB PHP Extension
fn: maxdb_fetch
fs: 
fd: 
vi: PECL maxdb:1.0
pt: MaxDB PHP Extension
fn: maxdb_fetch_array
fs: mixed maxdb_fetch_array ( resource $result [, int $resulttype ] )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_fetch_assoc
fs: array maxdb_fetch_assoc ( resource $result )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_fetch_field
fs: mixed maxdb_fetch_field ( resource $result )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_fetch_field_direct
fs: mixed maxdb_fetch_field_direct ( resource $result , int $fieldnr )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_fetch_fields
fs: mixed maxdb_fetch_fields ( resource $result )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_fetch_lengths
fs: array maxdb_fetch_lengths ( resource $result )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_fetch_object
fs: object maxdb_fetch_object ( object $result )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_fetch_row
fs: mixed maxdb_fetch_row ( resource $result )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_field_count
fs: int maxdb_field_count ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_field_seek
fs: bool maxdb_field_seek ( resource $result , int $fieldnr )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_field_tell
fs: int maxdb_field_tell ( resource $result )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_free_result
fs: void maxdb_free_result ( resource $result )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_get_client_info
fs: string maxdb_get_client_info ( void )
fd: The maxdb_get_client_info() function is used to return a string representing the client version being used in the MaxDB extension.
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_get_client_version
fs: int maxdb_get_client_version ( void )
fd: Returns client version number as an integer.
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_get_host_info
fs: string maxdb_get_host_info ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_get_metadata
fs: 
fd: 
vi: PECL maxdb:1.0
pt: MaxDB PHP Extension
fn: maxdb_get_proto_info
fs: int maxdb_get_proto_info ( resource $link )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_get_server_info
fs: string maxdb_get_server_info ( resource $link )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_get_server_version
fs: int maxdb_get_server_version ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_info
fs: string maxdb_info ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_init
fs: resource maxdb_init ( void )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_insert_id
fs: mixed maxdb_insert_id ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_kill
fs: bool maxdb_kill ( resource $link , int $processid )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_master_query
fs: bool maxdb_master_query ( resource $link , string $query )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_more_results
fs: bool maxdb_more_results ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_multi_query
fs: bool maxdb_multi_query ( resource $link , string $query )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_next_result
fs: bool maxdb_next_result ( resource $link )
fd: Since multiple queries are not yet supported, maxdb_next_result() returns always FALSE.
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_num_fields
fs: int maxdb_num_fields ( resource $result )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_num_rows
fs: int maxdb_num_rows ( resource $result )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_options
fs: bool maxdb_options ( resource $link , int $option , mixed $value )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_param_count
fs: 
fd: 
vi: PECL maxdb:1.0
pt: MaxDB PHP Extension
fn: maxdb_ping
fs: bool maxdb_ping ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_prepare
fs: resource maxdb_prepare ( resource $link , string $query )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_query
fs: mixed maxdb_query ( resource $link , string $query [, int $resultmode ] )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_real_connect
fs: bool maxdb_real_connect ( resource $link [, string $hostname [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket ]]]]]] )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_real_escape_string
fs: string maxdb_real_escape_string ( resource $link , string $escapestr )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_real_query
fs: bool maxdb_real_query ( resource $link , string $query )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_report
fs: bool maxdb_report ( int $flags )
fd: 
vi: PECL maxdb:1.0
pt: MaxDB PHP Extension
fn: maxdb_rollback
fs: bool maxdb_rollback ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_rpl_parse_enabled
fs: int maxdb_rpl_parse_enabled ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_rpl_probe
fs: bool maxdb_rpl_probe ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_rpl_query_type
fs: int maxdb_rpl_query_type ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_select_db
fs: bool maxdb_select_db ( resource $link , string $dbname )
fd: The maxdb_select_db() function selects the default database (specified by the dbname parameter) to be used when performing queries against the database connection represented by the link parameter. 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_send_long_data
fs: 
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_send_query
fs: bool maxdb_send_query ( resource $link , string $query )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_server_end
fs: void maxdb_server_end ( void )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_server_init
fs: bool maxdb_server_init ([ array $server [, array $groups ]] )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_set_opt
fs: 
fd: 
vi: PECL maxdb:1.0
pt: MaxDB PHP Extension
fn: maxdb_sqlstate
fs: string maxdb_sqlstate ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_ssl_set
fs: bool maxdb_ssl_set ( resource $link , string $key , string $cert , string $ca , string $capath , string $cipher )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_stat
fs: string maxdb_stat ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_stmt_affected_rows
fs: int maxdb_stmt_affected_rows ( resource $stmt )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_stmt_bind_param
fs: bool maxdb_stmt_bind_param ( resource $stmt , string $types , mixed &$var1 [, mixed &$... ] )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_bind_result
fs: bool maxdb_stmt_bind_result ( resource $stmt , mixed &$var1 [, mixed &$... ] )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_close
fs: bool maxdb_stmt_close ( resource $stmt )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_stmt_close_long_data
fs: bool maxdb_stmt_close_long_data ( resource $stmt , int $param_nr )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_data_seek
fs: bool maxdb_stmt_data_seek ( resource $statement , int $offset )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_errno
fs: int maxdb_stmt_errno ( resource $stmt )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_stmt_error
fs: string maxdb_stmt_error ( resource $stmt )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_stmt_execute
fs: bool maxdb_stmt_execute ( resource $stmt )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_fetch
fs: bool maxdb_stmt_fetch ( resource $stmt )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_free_result
fs: void maxdb_stmt_free_result ( resource $stmt )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_init
fs: resource maxdb_stmt_init ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_stmt_num_rows
fs: int maxdb_stmt_num_rows ( resource $stmt )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_param_count
fs: int maxdb_stmt_param_count ( resource $stmt )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_prepare
fs: bool maxdb_stmt_prepare ( resource $stmt , string $query )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_reset
fs: bool maxdb_stmt_reset ( resource $stmt )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_result_metadata
fs: resource maxdb_stmt_result_metadata ( resource $stmt )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_stmt_send_long_data
fs: bool maxdb_stmt_send_long_data ( resource $stmt , int $param_nr , string $data )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_stmt_sqlstate
fs: string maxdb_stmt_sqlstate ( resource $stmt )
fd: Returns a string containing the SQLSTATE error code for the most recently invoked prepared statement function that can succeed or fail. The error code consists of five characters. '00000' means no error. The values are specified by ANSI SQL and ODBC. 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_stmt_store_result
fs: bool maxdb_stmt_store_result ( resource $stmt )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_store_result
fs: resource maxdb_store_result ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_thread_id
fs: int maxdb_thread_id ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_thread_safe
fs: bool maxdb_thread_safe ( void )
fd: 
vi: 
pt: MaxDB PHP Extension
fn: maxdb_use_result
fs: resource maxdb_use_result ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: maxdb_warning_count
fs: int maxdb_warning_count ( resource $link )
fd: 
vi: PECL maxdb:1.0-7.6.00.38
pt: MaxDB PHP Extension
fn: mb_check_encoding
fs: bool mb_check_encoding ([ string $var [, string $encoding ]] )
fd: mb_check_encoding() checks if the specified byte stream is valid for the specified encoding. It is useful to prevent so-called Invalid Encoding Attack. 
vi: PHP 4 >= 4.4.3, PHP 5 >= 5.1.3
pt: Multibyte String
fn: mb_convert_case
fs: string mb_convert_case ( string $str , int $mode [, string $encoding ] )
fd: mb_convert_case() returns case folded version of string converted in the way specified by mode. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Multibyte String
fn: mb_convert_encoding
fs: string mb_convert_encoding ( string $str , string $to_encoding [, mixed $from_encoding ] )
fd: mb_convert_encoding() converts character encoding of string str from from_encoding to to_encoding. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_convert_kana
fs: string mb_convert_kana ( string $str [, string $option [, string $encoding ]] )
fd: mb_convert_kana() performs han-kaku - zen-kaku conversion for string str. It returns converted string. This function is only useful for Japanese. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_convert_variables
fs: string mb_convert_variables ( string $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ] )
fd: mb_convert_variables() convert character encoding of variables vars in encoding from_encoding to encoding to_encoding. It returns character encoding before conversion for success, FALSE for failure. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_decode_mimeheader
fs: string mb_decode_mimeheader ( string $str )
fd: mb_decode_mimeheader() decodes encoded-word string str in MIME header. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_decode_numericentity
fs: string mb_decode_numericentity ( string $str , array $convmap [, string $encoding ] )
fd: Convert numeric string reference of string str in specified block to character. It returns converted string. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_detect_encoding
fs: string mb_detect_encoding ( string $str [, mixed $encoding_list [, bool $strict ]] )
fd: mb_detect_encoding() detects character encoding in string str. It returns detected character encoding. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_detect_order
fs: mixed mb_detect_order ([ mixed $encoding_list ] )
fd: mb_detect_order() sets automatic character encoding detection order to encoding_list. It returns TRUE for success, FALSE for failure. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_encode_mimeheader
fs: string mb_encode_mimeheader ( string $str [, string $charset [, string $transfer_encoding [, string $linefeed [, int $indent ]]]] )
fd: mb_encode_mimeheader() encodes a given string str by the MIME header encoding scheme. Returns a converted version of the string represented in ASCII. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_encode_numericentity
fs: string mb_encode_numericentity ( string $str , array $convmap [, string $encoding ] )
fd: mb_encode_numericentity() converts specified character codes in string str from HTML numeric character reference to character code. It returns converted string. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_ereg
fs: int mb_ereg ( string $pattern , string $string [, array $regs ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_ereg_match
fs: bool mb_ereg_match ( string $pattern , string $string [, string $option ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_ereg_replace
fs: string mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_ereg_search
fs: bool mb_ereg_search ([ string $pattern [, string $option ]] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_ereg_search_getpos
fs: int mb_ereg_search_getpos ( void )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_ereg_search_getregs
fs: array mb_ereg_search_getregs ( void )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_ereg_search_init
fs: bool mb_ereg_search_init ( string $string [, string $pattern [, string $option ]] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_ereg_search_pos
fs: array mb_ereg_search_pos ([ string $pattern [, string $option ]] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_ereg_search_regs
fs: array mb_ereg_search_regs ([ string $pattern [, string $option ]] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_ereg_search_setpos
fs: bool mb_ereg_search_setpos ( int $position )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_eregi
fs: int mb_eregi ( string $pattern , string $string [, array $regs ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_eregi_replace
fs: string mb_eregi_replace ( string $pattern , string $replace , string $string [, string $option ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_get_info
fs: mixed mb_get_info ([ string $type ] )
fd: If type isn't specified or is specified to all, an array having the elements internal_encoding, http_output, http_input, func_overload, mail_charset, mail_header_encoding, mail_body_encoding will be returned. The last three elements are available since PHP 5.1.3. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_http_input
fs: mixed mb_http_input ([ string $type ] )
fd: type: Input string specifies input type.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_http_output
fs: mixed mb_http_output ([ string $encoding ] )
fd: If encoding is set, mb_http_output() sets HTTP output character encoding to encoding. Output after this function is converted to encoding. mb_http_output() returns TRUE for success and FALSE for failure. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_internal_encoding
fs: mixed mb_internal_encoding ([ string $encoding ] )
fd: mb_internal_encoding() sets internal character encoding to encoding If parameter is omitted, it returns current internal encoding. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_language
fs: mixed mb_language ([ string $language ] )
fd: mb_language() sets language. If language is omitted, it returns current language as string. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_output_handler
fs: string mb_output_handler ( string $contents , int $status )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_parse_str
fs: bool mb_parse_str ( string $encoded_string [, array &$result ] )
fd: mb_parse_str() parses GET/POST/COOKIE data and sets global variables. Since PHP does not provide raw POST/COOKIE data, it can only used for GET data for now. It preses URL encoded data, detects encoding, converts coding to internal encoding and set values to result array or global variables. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_preferred_mime_name
fs: string mb_preferred_mime_name ( string $encoding )
fd: mb_preferred_mime_name() returns MIME charset string for character encoding encoding. It returns charset string. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_regex_encoding
fs: mixed mb_regex_encoding ([ string $encoding ] )
fd: If the optional parameter encoding is specified, it is set to the character encoding for multibyte regex. The default value is the internal character encoding. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_regex_set_options
fs: string mb_regex_set_options ([ string $options ] )
fd: Returns the previous options. If options is omitted, it returns the string that describes the current options. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Multibyte String
fn: mb_send_mail
fs: bool mb_send_mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameter ]] )
fd: mb_send_mail() sends email.
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_split
fs: array mb_split ( string $pattern , string $string [, int $limit ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Multibyte String
fn: mb_strcut
fs: string mb_strcut ( string $str , int $start [, int $length [, string $encoding ]] )
fd: mb_strcut() returns the portion of str specified by the start and length parameters. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_strimwidth
fs: string mb_strimwidth ( string $str , int $start , int $width [, string $trimmarker [, string $encoding ]] )
fd: mb_strimwidth() truncates string str to specified width. It returns truncated string. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_stripos
fs: int mb_stripos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )
fd: mb_stripos() returns the numeric position of the first occurrence of needle in the haystack string.
vi: PHP 5 >= 5.2.0
pt: Multibyte String
fn: mb_stristr
fs: string mb_stristr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )
fd: mb_stristr() finds the first occurrence of needle in haystack and returns the portion of haystack.
vi: PHP 5 >= 5.2.0
pt: Multibyte String
fn: mb_strlen
fs: int mb_strlen ( string $str [, string $encoding ] )
fd: mb_strlen() returns number of characters in string str having character encoding encoding. A multi-byte character is counted as 1. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_strpos
fs: int mb_strpos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )
fd: mb_strpos() returns the numeric position of the first occurrence of needle in the haystack string. If needle is not found, it returns FALSE. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_strrchr
fs: string mb_strrchr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )
fd: mb_strrchr() finds the last occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.
vi: PHP 5 >= 5.2.0
pt: Multibyte String
fn: mb_strrichr
fs: string mb_strrichr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )
fd: mb_strrichr() finds the last occurrence of needle in haystack and returns the portion of haystack.
vi: PHP 5 >= 5.2.0
pt: Multibyte String
fn: mb_strripos
fs: int mb_strripos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )
fd: 
vi: PHP 5 >= 5.2.0
pt: Multibyte String
fn: mb_strrpos
fs: int mb_strrpos ( string $haystack , string $needle [, int $offset [, string $encoding ]] )
fd: mb_strrpos() returns the numeric position of the last occurrence of needle in the haystack string. If needle is not found, it returns FALSE. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_strstr
fs: string mb_strstr ( string $haystack , string $needle [, bool $part [, string $encoding ]] )
fd: mb_strstr() finds the first occurrence of needle in haystack and returns the portion of haystack. If needle is not found, it returns FALSE.
vi: PHP 5 >= 5.2.0
pt: Multibyte String
fn: mb_strtolower
fs: string mb_strtolower ( string $str [, string $encoding ] )
fd: mb_strtolower() returns str with all alphabetic characters converted to lowercase. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Multibyte String
fn: mb_strtoupper
fs: string mb_strtoupper ( string $str [, string $encoding ] )
fd: mb_strtoupper() returns str with all alphabetic characters converted to uppercase. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Multibyte String
fn: mb_strwidth
fs: int mb_strwidth ( string $str [, string $encoding ] )
fd: mb_strwidth() returns width of string str. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_substitute_character
fs: mixed mb_substitute_character ([ mixed $substrchar ] )
fd: mb_substitute_character() specifies substitution character when input character encoding is invalid or character code is not exist in output character encoding. Invalid characters may be substituted NULL(no output), string or integer value (Unicode character code value). 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_substr
fs: string mb_substr ( string $str , int $start [, int $length [, string $encoding ]] )
fd: mb_substr() returns the portion of str specified by the start and length parameters. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: Multibyte String
fn: mb_substr_count
fs: int mb_substr_count ( string $haystack , string $needle [, string $encoding ] )
fd: mb_substr_count() returns the number of times the needle substring occurs in the haystack string. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Multibyte String
fn: mcal_append_event
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_close
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_create_calendar
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_date_compare
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_date_valid
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_day_of_week
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_day_of_year
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_days_in_month
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_delete_calendar
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_delete_event
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_add_attribute
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_init
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_alarm
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_category
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_class
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_description
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_end
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_recur_daily
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_recur_monthly_mday
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_recur_monthly_wday
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_recur_none
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_recur_weekly
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_recur_yearly
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_start
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_event_set_title
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_expunge
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_fetch_current_stream_event
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_fetch_event
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_is_leap_year
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_list_alarms
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_list_events
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_next_recurrence
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_open
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_popen
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_rename_calendar
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_reopen
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_snooze
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_store_event
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_time_valid
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcal_week_of_year
fs: 
fd: 
vi: PHP 4
pt: MCAL
fn: mcrypt_cbc
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_cfb
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_create_iv
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_decrypt
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_ecb
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_enc_get_algorithms_name
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_enc_get_block_size
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_enc_get_iv_size
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_enc_get_key_size
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_enc_get_modes_name
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_enc_get_supported_key_sizes
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_enc_is_block_algorithm
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_enc_is_block_algorithm_mode
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_enc_is_block_mode
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_enc_self_test
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_encrypt
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_generic
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_generic_deinit
fs: 
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_generic_end
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.1.6
pt: Mcrypt Encryption
fn: mcrypt_generic_init
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_get_block_size
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_get_cipher_name
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_get_iv_size
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_get_key_size
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_list_algorithms
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_list_modes
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_module_close
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_module_get_algo_block_size
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_module_get_algo_key_size
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_module_get_supported_key_sizes
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_module_is_block_algorithm
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_module_is_block_algorithm_mode
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_module_is_block_mode
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_module_open
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_module_self_test
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: mcrypt_ofb
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Mcrypt Encryption
fn: md5
fs: string md5 ( string $str [, bool $raw_output ] )
fd: 
vi: PHP 4, PHP 5, PECL hash:1.1-1.3
pt: String
fn: md5_file
fs: string md5_file ( string $filename [, bool $raw_output ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL hash:1.1-1.3
pt: String
fn: mdecrypt_generic
fs: 
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Mcrypt Encryption
fn: memcache_debug
fs: bool memcache_debug ( bool $on_off )
fd: memcache_debug() turns on debug output if parameter on_off is equal to TRUE and turns off if it's FALSE. 
vi: PECL memcache:0.2-2.1.2
pt: Memcache
fn: memory_get_peak_usage
fs: int memory_get_peak_usage ([ bool $real_usage ] )
fd: Returns the peak of memory, in bytes, that's been allocated to your PHP script.
vi: PHP 5 >= 5.2.0
pt: PHP Options&Information
fn: memory_get_usage
fs: int memory_get_usage ([ bool $real_usage ] )
fd: Returns the amount of memory, in bytes, that's currently being allocated to your PHP script.
vi: PHP 4 >= 4.3.2, PHP 5
pt: PHP Options&Information
fn: metaphone
fs: string metaphone ( string $str [, int $phones ] )
fd: Calculates the metaphone key of str. 
vi: PHP 4, PHP 5
pt: String
fn: method_exists
fs: bool method_exists ( object $object , string $method_name )
fd: Checks if the class method exists in the given object.
vi: PHP 4, PHP 5
pt: Class/Object
fn: mhash
fs: string mhash ( int $hash , string $data [, string $key ] )
fd: mhash() applies a hash function specified by hash to the data.
vi: PHP 4, PHP 5
pt: Mhash
fn: mhash_count
fs: int mhash_count ( void )
fd: Gets the highest available hash id.
vi: PHP 4, PHP 5
pt: Mhash
fn: mhash_get_block_size
fs: int mhash_get_block_size ( int $hash )
fd: Gets the size of a block of the specified hash.
vi: PHP 4, PHP 5
pt: Mhash
fn: mhash_get_hash_name
fs: string mhash_get_hash_name ( int $hash )
fd: Gets the name of the specified hash.
vi: PHP 4, PHP 5
pt: Mhash
fn: mhash_keygen_s2k
fs: string mhash_keygen_s2k ( int $hash , string $password , string $salt , int $bytes )
fd: Generates a key according to the hash given a user provided password. 
vi: PHP 4 >= 4.0.4, PHP 5
pt: Mhash
fn: microtime
fs: mixed microtime ([ bool $get_as_float ] )
fd: microtime() returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call.
vi: PHP 4, PHP 5
pt: Date and Time
fn: mime_content_type
fs: string mime_content_type ( string $filename )
fd: Returns the MIME content type for a file as determined by using information from the magic.mime file.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Mimetype
fn: min
fs: mixed min ( array $values )
fd: 
vi: PHP 4, PHP 5
pt: Mathematical
fn: ming_keypress
fs: int ming_keypress ( string $char )
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: ming_setcubicthreshold
fs: void ming_setcubicthreshold ( int $threshold )
fd: Sets the threshold error for drawing cubic beziers.
vi: PHP 4 >= 4.0.5, PHP 5
pt: Ming functions for Flash
fn: ming_setscale
fs: void ming_setscale ( int $scale )
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: Ming functions for Flash
fn: ming_setswfcompression
fs: void ming_setswfcompression ( int $level )
fd: Sets the SWF output compression level.
vi: PHP 5 >= 5.2.1
pt: Ming functions for Flash
fn: ming_useconstants
fs: void ming_useconstants ( int $use )
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: ming_useswfversion
fs: void ming_useswfversion ( int $version )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Ming functions for Flash
fn: mkdir
fs: bool mkdir ( string $pathname [, int $mode [, bool $recursive [, resource $context ]]] )
fd: Attempts to create the directory specified by pathname.
vi: PHP 4, PHP 5
pt: Filesystem
fn: mktime
fs: int mktime ([ int $hour [, int $minute [, int $second [, int $month [, int $day [, int $year [, int $is_dst ]]]]]]] )
fd: Returns the Unix timestamp corresponding to the arguments given. This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time specified. 
vi: PHP 4, PHP 5
pt: Date and Time
fn: money_format
fs: string money_format ( string $format , float $number )
fd: money_format() returns a formatted version of number. This function wraps the C library function strfmon(), with the difference that this implementation converts only one number at a time.
vi: PHP 4 >= 4.3.0, PHP 5
pt: String
fn: move_uploaded_file
fs: bool move_uploaded_file ( string $filename , string $destination )
fd: This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism). If the file is valid, it will be moved to the filename given by destination. 
vi: PHP 4 >= 4.0.3, PHP 5
pt: Filesystem
fn: msession_connect
fs: bool msession_connect ( string $host , string $port )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_count
fs: int msession_count ( void )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_create
fs: bool msession_create ( string $session , string $classname , string $data )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_destroy
fs: bool msession_destroy ( string $name )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_disconnect
fs: void msession_disconnect ( void )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_find
fs: array msession_find ( string $name , string $value )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_get
fs: string msession_get ( string $session , string $name , string $value )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_get_array
fs: array msession_get_array ( string $session )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_get_data
fs: string msession_get_data ( string $session )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_inc
fs: string msession_inc ( string $session , string $name )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_list
fs: array msession_list ( void )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_listvar
fs: array msession_listvar ( string $name )
fd: Used for searching sessions with common attributes.
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_lock
fs: int msession_lock ( string $name )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_plugin
fs: string msession_plugin ( string $session , string $val [, string $param ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_randstr
fs: string msession_randstr ( int $param )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_set
fs: bool msession_set ( string $session , string $name , string $value )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_set_array
fs: void msession_set_array ( string $session , array $tuples )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_set_data
fs: bool msession_set_data ( string $session , string $value )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_timeout
fs: int msession_timeout ( string $session [, int $param ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_uniq
fs: string msession_uniq ( int $param , string $classname , string $data )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msession_unlock
fs: int msession_unlock ( string $session , int $key )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5 <= 5.1.2
pt: Mohawk Software Session Handler
fn: msg_get_queue
fs: resource msg_get_queue ( int $key [, int $perms ] )
fd: msg_get_queue() returns an id that can be used to access the System V message queue with the given key. The first call creates the message queue with the optional perms. A second call to msg_get_queue() for the same key will return a different message queue identifier, but both identifiers access the same underlying message queue.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: msg_receive
fs: bool msg_receive ( resource $queue , int $desiredmsgtype , int &$msgtype , int $maxsize , mixed &$message [, bool $unserialize [, int $flags [, int &$errorcode ]]] )
fd: msg_receive() will receive the first message from the specified queue of the type specified by desiredmsgtype.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: msg_remove_queue
fs: bool msg_remove_queue ( resource $queue )
fd: msg_remove_queue() destroys the message queue specified by the queue. Only use this function when all processes have finished working with the message queue and you need to release the system resources held by it.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: msg_send
fs: bool msg_send ( resource $queue , int $msgtype , mixed $message [, bool $serialize [, bool $blocking [, int &$errorcode ]]] )
fd: msg_send() sends a message of type msgtype (which MUST be greater than 0) to the message queue specified by queue.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: msg_set_queue
fs: bool msg_set_queue ( resource $queue , array $data )
fd: msg_set_queue() allows you to change the values of the msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying message queue data structure. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: msg_stat_queue
fs: array msg_stat_queue ( resource $queue )
fd: msg_stat_queue() returns the message queue meta data for the message queue specified by the queue. This is useful, for example, to determine which process sent the message that was just received.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: msql
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_affected_rows
fs: int msql_affected_rows ( resource $result )
fd: Returns number of affected rows by the last SELECT, UPDATE or DELETE query associated with result.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_close
fs: bool msql_close ([ resource $link_identifier ] )
fd: msql_close() closes the non-persistent connection to the mSQL server that's associated with the specified link identifier. 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_connect
fs: resource msql_connect ([ string $hostname ] )
fd: msql_connect() establishes a connection to a mSQL server. 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_create_db
fs: bool msql_create_db ( string $database_name [, resource $link_identifier ] )
fd: msql_create_db() attempts to create a new database on the mSQL server.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_createdb
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_data_seek
fs: bool msql_data_seek ( resource $result , int $row_number )
fd: msql_data_seek() moves the internal row pointer of the mSQL result associated with the specified query identifier to point to the specified row number.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_db_query
fs: resource msql_db_query ( string $database , string $query [, resource $link_identifier ] )
fd: msql_db_query() selects a database and executes a query on it.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_dbname
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_drop_db
fs: bool msql_drop_db ( string $database_name [, resource $link_identifier ] )
fd: msql_drop_db() attempts to drop (remove) a database from the mSQL server.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_error
fs: string msql_error ( void )
fd: msql_error() returns the last issued error by the mSQL server. Note that only the last error message is accessible with msql_error().
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_fetch_array
fs: array msql_fetch_array ( resource $result [, int $result_type ] )
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_fetch_field
fs: object msql_fetch_field ( resource $result [, int $field_offset ] )
fd: msql_fetch_field() can be used in order to obtain information about fields in a certain query result.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_fetch_object
fs: object msql_fetch_object ( resource $result )
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_fetch_row
fs: array msql_fetch_row ( resource $result )
fd: msql_fetch_row() fetches one row of data from the result associated with the specified query identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0. 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_field_flags
fs: string msql_field_flags ( resource $result , int $field_offset )
fd: msql_field_flags() returns the field flags of the specified field.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_field_len
fs: int msql_field_len ( resource $result , int $field_offset )
fd: msql_field_len() returns the length of the specified field.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_field_name
fs: string msql_field_name ( resource $result , int $field_offset )
fd: msql_field_name() gets the name of the specified field index.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_field_seek
fs: bool msql_field_seek ( resource $result , int $field_offset )
fd: Seeks to the specified field offset.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_field_table
fs: int msql_field_table ( resource $result , int $field_offset )
fd: Returns the name of the table that the specified field is in.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_field_type
fs: string msql_field_type ( resource $result , int $field_offset )
fd: msql_field_type() gets the type of the specified field index.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_fieldflags
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_fieldlen
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_fieldname
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_fieldtable
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_fieldtype
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_free_result
fs: bool msql_free_result ( resource $result )
fd: msql_free_result() frees the memory associated with query_identifier. When PHP completes a request, this memory is freed automatically, so you only need to call this function when you want to make sure you don't use too much memory while the script is running.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_list_dbs
fs: resource msql_list_dbs ([ resource $link_identifier ] )
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_list_fields
fs: resource msql_list_fields ( string $database , string $tablename [, resource $link_identifier ] )
fd: msql_list_fields() returns information about the given table.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_list_tables
fs: resource msql_list_tables ( string $database [, resource $link_identifier ] )
fd: msql_list_tables() lists the tables on the specified database.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_num_fields
fs: int msql_num_fields ( resource $result )
fd: msql_num_fields() returns the number of fields in a result set.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_num_rows
fs: int msql_num_rows ( resource $query_identifier )
fd: msql_num_rows() returns the number of rows in a result set.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_numfields
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_numrows
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_pconnect
fs: resource msql_pconnect ([ string $hostname ] )
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_query
fs: resource msql_query ( string $query [, resource $link_identifier ] )
fd: msql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_regcase
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_result
fs: string msql_result ( resource $result , int $row [, mixed $field ] )
fd: msql_result() returns the contents of one cell from a mSQL result set. 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_select_db
fs: bool msql_select_db ( string $database_name [, resource $link_identifier ] )
fd: msql_select_db() sets the current active database on the server that's associated with the specified link_identifier. 
vi: PHP 4, PHP 5
pt: mSQL
fn: msql_tablename
fs: 
fd: 
vi: PHP 4, PHP 5
pt: mSQL
fn: mssql_bind
fs: bool mssql_bind ( resource $stmt , string $param_name , mixed &$var , int $type [, int $is_output [, int $is_null [, int $maxlen ]]] )
fd: Binds a parameter to a stored procedure or a remote stored procedure.
vi: PHP 4 >= 4.0.7, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_close
fs: bool mssql_close ([ resource $link_identifier ] )
fd: Closes the link to a MS SQL Server database that's associated with the specified link identifier. If the link identifier isn't specified, the last opened link is assumed. 
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_connect
fs: resource mssql_connect ([ string $servername [, string $username [, string $password [, bool $new_link ]]]] )
fd: mssql_connect() establishes a connection to a MS SQL server. The servername argument has to be a valid servername that is defined in the 'interfaces' file. 
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_data_seek
fs: bool mssql_data_seek ( resource $result_identifier , int $row_number )
fd: mssql_data_seek() moves the internal row pointer of the MS SQL result associated with the specified result identifier to point to the specified row number, first row being number 0.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_execute
fs: mixed mssql_execute ( resource $stmt [, bool $skip_results ] )
fd: Executes a stored procedure on a MS SQL server database
vi: PHP 4 >= 4.0.7, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_fetch_array
fs: array mssql_fetch_array ( resource $result [, int $result_type ] )
fd: 
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_fetch_assoc
fs: array mssql_fetch_assoc ( resource $result_id )
fd: Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead.
vi: PHP 4 >= 4.2.0, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_fetch_batch
fs: int mssql_fetch_batch ( resource $result )
fd: Returns the next batch of records
vi: PHP 4 >= 4.0.4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_fetch_field
fs: object mssql_fetch_field ( resource $result [, int $field_offset ] )
fd: mssql_fetch_field() can be used in order to obtain information about fields in a certain query result.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_fetch_object
fs: object mssql_fetch_object ( resource $result )
fd: 
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_fetch_row
fs: array mssql_fetch_row ( resource $result )
fd: mssql_fetch_row() fetches one row of data from the result associated with the specified result identifier. The row is returned as an array. Each result column is stored in an array offset, starting at offset 0. 
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_field_length
fs: int mssql_field_length ( resource $result [, int $offset ] )
fd: Returns the length of field no. offset in result.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_field_name
fs: string mssql_field_name ( resource $result [, int $offset ] )
fd: Returns the name of field no. offset in result.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_field_seek
fs: bool mssql_field_seek ( resource $result , int $field_offset )
fd: Seeks to the specified field offset.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_field_type
fs: string mssql_field_type ( resource $result [, int $offset ] )
fd: Returns the type of field no. offset in result.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_free_result
fs: bool mssql_free_result ( resource $result )
fd: mssql_free_result() only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call mssql_free_result() with the result identifier as an argument and the associated result memory will be freed.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_free_statement
fs: bool mssql_free_statement ( resource $stmt )
fd: mssql_free_statement() only needs to be called if you are worried about using too much memory while your script is running. All statement memory will automatically be freed when the script ends. You may call mssql_free_statement() with the statement identifier as an argument and the associated statement memory will be freed.
vi: PHP 4 >= 4.3.2, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_get_last_message
fs: string mssql_get_last_message ( void )
fd: 
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_guid_string
fs: string mssql_guid_string ( string $binary [, int $short_format ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_init
fs: resource mssql_init ( string $sp_name [, resource $link_identifier ] )
fd: Initializes a stored procedure or a remote stored procedure.
vi: PHP 4 >= 4.0.7, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_min_error_severity
fs: void mssql_min_error_severity ( int $severity )
fd: 
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_min_message_severity
fs: void mssql_min_message_severity ( int $severity )
fd: 
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_next_result
fs: bool mssql_next_result ( resource $result_id )
fd: When sending more than one SQL statement to the server or executing a stored procedure with multiple results, it will cause the server to return multiple result sets. This function will test for additional results available form the server. If an additional result set exists it will free the existing result set and prepare to fetch the rows from the new result set.
vi: PHP 4 >= 4.0.5, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_num_fields
fs: int mssql_num_fields ( resource $result )
fd: mssql_num_fields() returns the number of fields in a result set.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_num_rows
fs: int mssql_num_rows ( resource $result )
fd: mssql_num_rows() returns the number of rows in a result set.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_pconnect
fs: resource mssql_pconnect ([ string $servername [, string $username [, string $password [, bool $new_link ]]]] )
fd: 
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_query
fs: mixed mssql_query ( string $query [, resource $link_identifier [, int $batch_size ]] )
fd: mssql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_result
fs: string mssql_result ( resource $result , int $row , mixed $field )
fd: mssql_result() returns the contents of one cell from a MS SQL result set.
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_rows_affected
fs: int mssql_rows_affected ( resource $link_identifier )
fd: 
vi: PHP 4 >= 4.0.4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mssql_select_db
fs: bool mssql_select_db ( string $database_name [, resource $link_identifier ] )
fd: mssql_select_db() sets the current active database on the server that's associated with the specified link identifier. 
vi: PHP 4, PHP 5, PECL odbtp:1.1.1-1.1.4
pt: Microsoft SQL Server
fn: mt_getrandmax
fs: int mt_getrandmax ( void )
fd: 
vi: PHP 4, PHP 5
pt: Mathematical
fn: mt_rand
fs: int mt_rand ([ int $min ], int $max )
fd: 
vi: PHP 4, PHP 5
pt: Mathematical
fn: mt_srand
fs: void mt_srand ([ int $seed ] )
fd: Seeds the random number generator with seed or with a random value if no seed is given. 
vi: PHP 4, PHP 5
pt: Mathematical
fn: muscat_close
fs: void muscat_close ( resource $muscat_handle )
fd: 
vi: PHP 4 >= 4.0.5
pt: muscat
fn: muscat_get
fs: string muscat_get ( resource $muscat_handle )
fd: 
vi: PHP 4 >= 4.0.5
pt: muscat
fn: muscat_give
fs: void muscat_give ( resource $muscat_handle , string $string )
fd: 
vi: PHP 4 >= 4.0.5
pt: muscat
fn: muscat_setup
fs: resource muscat_setup ( int $size [, string $muscat_dir ] )
fd: 
vi: PHP 4 >= 4.0.5
pt: muscat
fn: muscat_setup_net
fs: resource muscat_setup_net ( resource $socket )
fd: 
vi: PHP 4 >= 4.0.5
pt: muscat
fn: mysql_affected_rows
fs: int mysql_affected_rows ([ resource $link_identifier ] )
fd: Get the number of affected rows by the last INSERT, UPDATE, REPLACE or DELETE query associated with link_identifier.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_change_user
fs: int mysql_change_user ( string $user , string $password [, string $database [, resource $link_identifier ]] )
fd: mysql_change_user() changes the logged in user of the current active connection, or the connection given by the optional link_identifier parameter. If a database is specified, this will be the current database after the user has been changed. If the new user and password authorization fails, the current connected user stays active. 
vi: 
pt: MySQL
fn: mysql_client_encoding
fs: string mysql_client_encoding ([ resource $link_identifier ] )
fd: Retrieves the character_set variable from MySQL.
vi: PHP 4 >= 4.3.0, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_close
fs: bool mysql_close ([ resource $link_identifier ] )
fd: mysql_close() closes the non-persistent connection to the MySQL server that's associated with the specified link identifier. If link_identifier isn't specified, the last opened link is used. 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_connect
fs: resource mysql_connect ([ string $server [, string $username [, string $password [, bool $new_link [, int $client_flags ]]]]] )
fd: Opens or reuses a connection to a MySQL server.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_create_db
fs: bool mysql_create_db ( string $database_name [, resource $link_identifier ] )
fd: mysql_create_db() attempts to create a new database on the server associated with the specified link identifier.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_data_seek
fs: bool mysql_data_seek ( resource $result , int $row_number )
fd: mysql_data_seek() moves the internal row pointer of the MySQL result associated with the specified result identifier to point to the specified row number.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_db_name
fs: string mysql_db_name ( resource $result , int $row [, mixed $field ] )
fd: 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_db_query
fs: resource mysql_db_query ( string $database , string $query [, resource $link_identifier ] )
fd: mysql_db_query() selects a database, and executes a query on it.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_drop_db
fs: bool mysql_drop_db ( string $database_name [, resource $link_identifier ] )
fd: mysql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_errno
fs: int mysql_errno ([ resource $link_identifier ] )
fd: Returns the error number from the last MySQL function. 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_error
fs: string mysql_error ([ resource $link_identifier ] )
fd: Returns the error text from the last MySQL function. Errors coming back from the MySQL database backend no longer issue warnings. Instead, use mysql_error() to retrieve the error text.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_escape_string
fs: string mysql_escape_string ( string $unescaped_string )
fd: 
vi: PHP 4 >= 4.0.3, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_fetch_array
fs: array mysql_fetch_array ( resource $result [, int $result_type ] )
fd: Returns an array that corresponds to the fetched row and moves the internal data pointer ahead.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_fetch_assoc
fs: array mysql_fetch_assoc ( resource $result )
fd: Returns an associative array that corresponds to the fetched row and moves the internal data pointer ahead.
vi: PHP 4 >= 4.0.3, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_fetch_field
fs: object mysql_fetch_field ( resource $result [, int $field_offset ] )
fd: Returns an object containing field information. This function can be used to obtain information about fields in the provided query result.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_fetch_lengths
fs: array mysql_fetch_lengths ( resource $result )
fd: Returns an array that corresponds to the lengths of each field in the last row fetched by MySQL. 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_fetch_object
fs: object mysql_fetch_object ( resource $result [, string $class_name [, array $params ]] )
fd: Returns an object with properties that correspond to the fetched row and moves the internal data pointer ahead.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_fetch_row
fs: array mysql_fetch_row ( resource $result )
fd: Returns a numerical array that corresponds to the fetched row and moves the internal data pointer ahead.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_field_flags
fs: string mysql_field_flags ( resource $result , int $field_offset )
fd: mysql_field_flags() returns the field flags of the specified field.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_field_len
fs: int mysql_field_len ( resource $result , int $field_offset )
fd: mysql_field_len() returns the length of the specified field.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_field_name
fs: string mysql_field_name ( resource $result , int $field_offset )
fd: mysql_field_name() returns the name of the specified field index.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_field_seek
fs: bool mysql_field_seek ( resource $result , int $field_offset )
fd: Seeks to the specified field offset.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_field_table
fs: string mysql_field_table ( resource $result , int $field_offset )
fd: Returns the name of the table that the specified field is in.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_field_type
fs: string mysql_field_type ( resource $result , int $field_offset )
fd: 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_free_result
fs: bool mysql_free_result ( resource $result )
fd: mysql_free_result() will free all memory associated with the result identifier result. 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_get_client_info
fs: string mysql_get_client_info ( void )
fd: mysql_get_client_info() returns a string that represents the client library version.
vi: PHP 4 >= 4.0.5, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_get_host_info
fs: string mysql_get_host_info ([ resource $link_identifier ] )
fd: Describes the type of connection in use for the connection, including the server host name.
vi: PHP 4 >= 4.0.5, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_get_proto_info
fs: int mysql_get_proto_info ([ resource $link_identifier ] )
fd: Retrieves the MySQL protocol.
vi: PHP 4 >= 4.0.5, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_get_server_info
fs: string mysql_get_server_info ([ resource $link_identifier ] )
fd: Retrieves the MySQL server version.
vi: PHP 4 >= 4.0.5, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_info
fs: string mysql_info ([ resource $link_identifier ] )
fd: Returns detailed information about the last query.
vi: PHP 4 >= 4.3.0, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_insert_id
fs: int mysql_insert_id ([ resource $link_identifier ] )
fd: Retrieves the ID generated for an AUTO_INCREMENT column by the previous INSERT query.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_list_dbs
fs: resource mysql_list_dbs ([ resource $link_identifier ] )
fd: Returns a result pointer containing the databases available from the current mysql daemon.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_list_fields
fs: resource mysql_list_fields ( string $database_name , string $table_name [, resource $link_identifier ] )
fd: Retrieves information about the given table name. 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_list_processes
fs: resource mysql_list_processes ([ resource $link_identifier ] )
fd: Retrieves the current MySQL server threads.
vi: PHP 4 >= 4.3.0, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_list_tables
fs: resource mysql_list_tables ( string $database [, resource $link_identifier ] )
fd: Retrieves a list of table names from a MySQL database. 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_num_fields
fs: int mysql_num_fields ( resource $result )
fd: Retrieves the number of fields from a query.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_num_rows
fs: int mysql_num_rows ( resource $result )
fd: Retrieves the number of rows from a result set. This command is only valid for statements like SELECT or SHOW that return an actual result set.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_pconnect
fs: resource mysql_pconnect ([ string $server [, string $username [, string $password [, int $client_flags ]]]] )
fd: Establishes a persistent connection to a MySQL server. 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_ping
fs: bool mysql_ping ([ resource $link_identifier ] )
fd: Checks whether or not the connection to the server is working. If it has gone down, an automatic reconnection is attempted. This function can be used by scripts that remain idle for a long while, to check whether or not the server has closed the connection and reconnect if necessary. 
vi: PHP 4 >= 4.3.0, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_query
fs: resource mysql_query ( string $query [, resource $link_identifier ] )
fd: mysql_query() sends an unique query (multiple queries are not supported) to the currently active database on the server that's associated with the specified link_identifier.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_real_escape_string
fs: string mysql_real_escape_string ( string $unescaped_string [, resource $link_identifier ] )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_result
fs: string mysql_result ( resource $result , int $row [, mixed $field ] )
fd: Retrieves the contents of one cell from a MySQL result set. 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_select_db
fs: bool mysql_select_db ( string $database_name [, resource $link_identifier ] )
fd: Sets the current active database on the server that's associated with the specified link identifier.
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_set_charset
fs: bool mysql_set_charset ( string $charset [, resource $link_identifier ] )
fd: Sets the default character set for the current connection.
vi: PHP 5 >= 5.2.3
pt: MySQL
fn: mysql_stat
fs: string mysql_stat ([ resource $link_identifier ] )
fd: mysql_stat() returns the current server status.
vi: PHP 4 >= 4.3.0, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_tablename
fs: string mysql_tablename ( resource $result , int $i )
fd: Retrieves the table name from a result. 
vi: PHP 4, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_thread_id
fs: int mysql_thread_id ([ resource $link_identifier ] )
fd: Retrieves the current thread ID.
vi: PHP 4 >= 4.3.0, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysql_unbuffered_query
fs: resource mysql_unbuffered_query ( string $query [, resource $link_identifier ] )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5, PECL mysql:1.0
pt: MySQL
fn: mysqli_affected_rows
fs: int mysqli_affected_rows ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_autocommit
fs: bool mysqli_autocommit ( mysqli $link , bool $mode )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_bind_param
fs: 
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_bind_result
fs: 
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_change_user
fs: bool mysqli_change_user ( mysqli $link , string $user , string $password , string $database )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_character_set_name
fs: string mysqli_character_set_name ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_client_encoding
fs: 
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_close
fs: bool mysqli_close ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_commit
fs: bool mysqli_commit ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_connect
fs: mysqli mysqli_connect ([ string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket ]]]]]] )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_connect_errno
fs: int mysqli_connect_errno ( void )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_connect_error
fs: string mysqli_connect_error ( void )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_data_seek
fs: bool mysqli_data_seek ( mysqli_result $result , int $offset )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_debug
fs: bool mysqli_debug ( string $message )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_disable_reads_from_master
fs: bool mysqli_disable_reads_from_master ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_disable_rpl_parse
fs: bool mysqli_disable_rpl_parse ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_dump_debug_info
fs: bool mysqli_dump_debug_info ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_embedded_server_end
fs: void mysqli_embedded_server_end ( void )
fd: 
vi: PHP 5 >= 5.1.0
pt: MySQL Improved Extension
fn: mysqli_embedded_server_start
fs: bool mysqli_embedded_server_start ( bool $start , array $arguments , array $groups )
fd: 
vi: PHP 5 >= 5.1.0
pt: MySQL Improved Extension
fn: mysqli_enable_reads_from_master
fs: bool mysqli_enable_reads_from_master ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_enable_rpl_parse
fs: bool mysqli_enable_rpl_parse ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_errno
fs: int mysqli_errno ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_error
fs: string mysqli_error ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_escape_string
fs: 
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_execute
fs: 
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_fetch
fs: 
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_fetch_array
fs: mixed mysqli_fetch_array ( mysqli_result $result [, int $resulttype ] )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_fetch_assoc
fs: array mysqli_fetch_assoc ( mysqli_result $result )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_fetch_field
fs: object mysqli_fetch_field ( mysqli_result $result )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_fetch_field_direct
fs: object mysqli_fetch_field_direct ( mysqli_result $result , int $fieldnr )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_fetch_fields
fs: array mysqli_fetch_fields ( mysqli_result $result )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_fetch_lengths
fs: array mysqli_fetch_lengths ( mysqli_result $result )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_fetch_object
fs: object mysqli_fetch_object ( mysqli_result $result [, string $class_name [, array $params ]] )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_fetch_row
fs: mixed mysqli_fetch_row ( mysqli_result $result )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_field_count
fs: int mysqli_field_count ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_field_seek
fs: bool mysqli_field_seek ( mysqli_result $result , int $fieldnr )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_field_tell
fs: int mysqli_field_tell ( mysqli_result $result )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_free_result
fs: void mysqli_free_result ( mysqli_result $result )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_get_charset
fs: object mysqli_get_charset ( mysqli $link )
fd: 
vi: PHP 5 >= 5.1.0
pt: MySQL Improved Extension
fn: mysqli_get_client_info
fs: string mysqli_get_client_info ( void )
fd: The mysqli_get_client_info() function is used to return a string representing the client version being used in the MySQLi extension.
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_get_client_version
fs: int mysqli_get_client_version ( void )
fd: Returns client version number as an integer.
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_get_host_info
fs: string mysqli_get_host_info ( mysqli $link )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_get_metadata
fs: 
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_get_proto_info
fs: int mysqli_get_proto_info ( mysqli $link )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_get_server_info
fs: string mysqli_get_server_info ( mysqli $link )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_get_server_version
fs: int mysqli_get_server_version ( mysqli $link )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_get_warnings
fs: object mysqli_get_warnings ( mysqli $link )
fd: 
vi: PHP 5 >= 5.1.0
pt: MySQL Improved Extension
fn: mysqli_info
fs: string mysqli_info ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_init
fs: mysqli mysqli_init ( void )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_insert_id
fs: int mysqli_insert_id ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_kill
fs: bool mysqli_kill ( mysqli $link , int $processid )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_master_query
fs: bool mysqli_master_query ( mysqli $link , string $query )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_more_results
fs: bool mysqli_more_results ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_multi_query
fs: bool mysqli_multi_query ( mysqli $link , string $query )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_next_result
fs: bool mysqli_next_result ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_num_fields
fs: int mysqli_num_fields ( mysqli_result $result )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_num_rows
fs: int mysqli_num_rows ( mysqli_result $result )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_options
fs: bool mysqli_options ( mysqli $link , int $option , mixed $value )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_param_count
fs: 
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_ping
fs: bool mysqli_ping ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_prepare
fs: mysqli_stmt mysqli_prepare ( mysqli $link , string $query )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_query
fs: mixed mysqli_query ( mysqli $link , string $query [, int $resultmode ] )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_real_connect
fs: bool mysqli_real_connect ( mysqli $link [, string $host [, string $username [, string $passwd [, string $dbname [, int $port [, string $socket [, int $flags ]]]]]]] )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_real_escape_string
fs: string mysqli_real_escape_string ( mysqli $link , string $escapestr )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_real_query
fs: bool mysqli_real_query ( mysqli $link , string $query )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_report
fs: bool mysqli_report ( int $flags )
fd: mysqli_report() is a powerful function to improve your queries and code during development and testing phase. Depending on the flags it reports errors from mysqli function calls or queries which don't use an index (or use a bad index).
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_rollback
fs: bool mysqli_rollback ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_rpl_parse_enabled
fs: int mysqli_rpl_parse_enabled ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_rpl_probe
fs: bool mysqli_rpl_probe ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_rpl_query_type
fs: int mysqli_rpl_query_type ( mysqli $link , string $query )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_select_db
fs: bool mysqli_select_db ( mysqli $link , string $dbname )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_send_long_data
fs: 
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_send_query
fs: bool mysqli_send_query ( mysqli $link , string $query )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_server_end
fs: void mysqli_server_end ( void )
fd: 
vi: PHP 5 <= 5.0.5
pt: MySQL Improved Extension
fn: mysqli_server_init
fs: bool mysqli_server_init ([ array $server [, array $groups ]] )
fd: 
vi: PHP 5 <= 5.0.5
pt: MySQL Improved Extension
fn: mysqli_set_charset
fs: bool mysqli_set_charset ( mysqli $link , string $charset )
fd: 
vi: PHP 5 >= 5.0.5
pt: MySQL Improved Extension
fn: mysqli_set_local_infile_default
fs: void mysqli_set_local_infile_default ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_set_local_infile_handler
fs: bool mysqli_set_local_infile_handler ( mysqli $link , callback $read_func )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_set_opt
fs: 
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_slave_query
fs: bool mysqli_slave_query ( mysqli $link , string $query )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_sqlstate
fs: string mysqli_sqlstate ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_ssl_set
fs: bool mysqli_ssl_set ( mysqli $link , string $key , string $cert , string $ca , string $capath , string $cipher )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stat
fs: string mysqli_stat ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_affected_rows
fs: int mysqli_stmt_affected_rows ( mysqli_stmt $stmt )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_attr_get
fs: int mysqli_stmt_attr_get ( mysqli_stmt $stmt , int $attr )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_attr_set
fs: bool mysqli_stmt_attr_set ( mysqli_stmt $stmt , int $attr , int $mode )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_bind_param
fs: bool mysqli_stmt_bind_param ( mysqli_stmt $stmt , string $types , mixed &$var1 [, mixed &$... ] )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_bind_result
fs: bool mysqli_stmt_bind_result ( mysqli_stmt $stmt , mixed &$var1 [, mixed &$... ] )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_close
fs: bool mysqli_stmt_close ( mysqli_stmt $stmt )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_data_seek
fs: void mysqli_stmt_data_seek ( mysqli_stmt $stmt , int $offset )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_errno
fs: int mysqli_stmt_errno ( mysqli_stmt $stmt )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_error
fs: string mysqli_stmt_error ( mysqli_stmt $stmt )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_execute
fs: bool mysqli_stmt_execute ( mysqli_stmt $stmt )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_fetch
fs: bool mysqli_stmt_fetch ( mysqli_stmt $stmt )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_field_count
fs: int mysqli_stmt_field_count ( mysqli_stmt $stmt )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_free_result
fs: void mysqli_stmt_free_result ( mysqli_stmt $stmt )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_get_warnings
fs: object mysqli_stmt_get_warnings ( mysqli_stmt $stmt )
fd: 
vi: PHP 5 >= 5.1.0
pt: MySQL Improved Extension
fn: mysqli_stmt_init
fs: mysqli_stmt mysqli_stmt_init ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_insert_id
fs: mixed mysqli_stmt_insert_id ( mysqli_stmt $stmt )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_num_rows
fs: int mysqli_stmt_num_rows ( mysqli_stmt $stmt )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_param_count
fs: int mysqli_stmt_param_count ( mysqli_stmt $stmt )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_prepare
fs: bool mysqli_stmt_prepare ( mysqli_stmt $stmt , string $query )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_reset
fs: bool mysqli_stmt_reset ( mysqli_stmt $stmt )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_result_metadata
fs: mysqli_result mysqli_stmt_result_metadata ( mysqli_stmt $stmt )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_send_long_data
fs: bool mysqli_stmt_send_long_data ( mysqli_stmt $stmt , int $param_nr , string $data )
fd: 
vi: 
pt: MySQL Improved Extension
fn: mysqli_stmt_sqlstate
fs: string mysqli_stmt_sqlstate ( mysqli_stmt $stmt )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_stmt_store_result
fs: bool mysqli_stmt_store_result ( mysqli_stmt $stmt )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_store_result
fs: mysqli_result mysqli_store_result ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_thread_id
fs: int mysqli_thread_id ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_thread_safe
fs: bool mysqli_thread_safe ( void )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_use_result
fs: mysqli_result mysqli_use_result ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: mysqli_warning_count
fs: int mysqli_warning_count ( mysqli $link )
fd: 
vi: PHP 5
pt: MySQL Improved Extension
fn: natcasesort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: natsort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: ncurses_addch
fs: int ncurses_addch ( int $ch )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_addchnstr
fs: int ncurses_addchnstr ( string $s , int $n )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_addchstr
fs: int ncurses_addchstr ( string $s )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_addnstr
fs: int ncurses_addnstr ( string $s , int $n )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_addstr
fs: int ncurses_addstr ( string $text )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_assume_default_colors
fs: int ncurses_assume_default_colors ( int $fg , int $bg )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_attroff
fs: int ncurses_attroff ( int $attributes )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_attron
fs: int ncurses_attron ( int $attributes )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_attrset
fs: int ncurses_attrset ( int $attributes )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_baudrate
fs: int ncurses_baudrate ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_beep
fs: int ncurses_beep ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_bkgd
fs: int ncurses_bkgd ( int $attrchar )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_bkgdset
fs: void ncurses_bkgdset ( int $attrchar )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_border
fs: int ncurses_border ( int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_bottom_panel
fs: int ncurses_bottom_panel ( resource $panel )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_can_change_color
fs: bool ncurses_can_change_color ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_cbreak
fs: bool ncurses_cbreak ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_clear
fs: bool ncurses_clear ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_clrtobot
fs: bool ncurses_clrtobot ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_clrtoeol
fs: bool ncurses_clrtoeol ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_color_content
fs: int ncurses_color_content ( int $color , int &$r , int &$g , int &$b )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_color_set
fs: int ncurses_color_set ( int $pair )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_curs_set
fs: int ncurses_curs_set ( int $visibility )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_def_prog_mode
fs: bool ncurses_def_prog_mode ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_def_shell_mode
fs: bool ncurses_def_shell_mode ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_define_key
fs: int ncurses_define_key ( string $definition , int $keycode )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_del_panel
fs: bool ncurses_del_panel ( resource $panel )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_delay_output
fs: int ncurses_delay_output ( int $milliseconds )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_delch
fs: bool ncurses_delch ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_deleteln
fs: bool ncurses_deleteln ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_delwin
fs: bool ncurses_delwin ( resource $window )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_doupdate
fs: bool ncurses_doupdate ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_echo
fs: bool ncurses_echo ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_echochar
fs: int ncurses_echochar ( int $character )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_end
fs: int ncurses_end ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_erase
fs: bool ncurses_erase ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_erasechar
fs: string ncurses_erasechar ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_filter
fs: void ncurses_filter ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_flash
fs: bool ncurses_flash ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_flushinp
fs: bool ncurses_flushinp ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_getch
fs: int ncurses_getch ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_getmaxyx
fs: void ncurses_getmaxyx ( resource $window , int &$y , int &$x )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_getmouse
fs: bool ncurses_getmouse ( array &$mevent )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_getyx
fs: void ncurses_getyx ( resource $window , int &$y , int &$x )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_halfdelay
fs: int ncurses_halfdelay ( int $tenth )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_has_colors
fs: bool ncurses_has_colors ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_has_ic
fs: bool ncurses_has_ic ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_has_il
fs: bool ncurses_has_il ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_has_key
fs: int ncurses_has_key ( int $keycode )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_hide_panel
fs: int ncurses_hide_panel ( resource $panel )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_hline
fs: int ncurses_hline ( int $charattr , int $n )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_inch
fs: string ncurses_inch ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_init
fs: void ncurses_init ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_init_color
fs: int ncurses_init_color ( int $color , int $r , int $g , int $b )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_init_pair
fs: int ncurses_init_pair ( int $pair , int $fg , int $bg )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_insch
fs: int ncurses_insch ( int $character )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_insdelln
fs: int ncurses_insdelln ( int $count )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_insertln
fs: int ncurses_insertln ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_insstr
fs: int ncurses_insstr ( string $text )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_instr
fs: int ncurses_instr ( string &$buffer )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_isendwin
fs: bool ncurses_isendwin ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_keyok
fs: int ncurses_keyok ( int $keycode , bool $enable )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_keypad
fs: int ncurses_keypad ( resource $window , bool $bf )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_killchar
fs: string ncurses_killchar ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_longname
fs: string ncurses_longname ( void )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_meta
fs: int ncurses_meta ( resource $window , bool $8bit )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mouse_trafo
fs: bool ncurses_mouse_trafo ( int &$y , int &$x , bool $toscreen )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mouseinterval
fs: int ncurses_mouseinterval ( int $milliseconds )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mousemask
fs: int ncurses_mousemask ( int $newmask , int &$oldmask )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_move
fs: int ncurses_move ( int $y , int $x )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_move_panel
fs: int ncurses_move_panel ( resource $panel , int $startx , int $starty )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvaddch
fs: int ncurses_mvaddch ( int $y , int $x , int $c )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvaddchnstr
fs: int ncurses_mvaddchnstr ( int $y , int $x , string $s , int $n )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvaddchstr
fs: int ncurses_mvaddchstr ( int $y , int $x , string $s )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvaddnstr
fs: int ncurses_mvaddnstr ( int $y , int $x , string $s , int $n )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvaddstr
fs: int ncurses_mvaddstr ( int $y , int $x , string $s )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvcur
fs: int ncurses_mvcur ( int $old_y , int $old_x , int $new_y , int $new_x )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvdelch
fs: int ncurses_mvdelch ( int $y , int $x )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvgetch
fs: int ncurses_mvgetch ( int $y , int $x )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvhline
fs: int ncurses_mvhline ( int $y , int $x , int $attrchar , int $n )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvinch
fs: int ncurses_mvinch ( int $y , int $x )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvvline
fs: int ncurses_mvvline ( int $y , int $x , int $attrchar , int $n )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_mvwaddstr
fs: int ncurses_mvwaddstr ( resource $window , int $y , int $x , string $text )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_napms
fs: int ncurses_napms ( int $milliseconds )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_new_panel
fs: resource ncurses_new_panel ( resource $window )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_newpad
fs: resource ncurses_newpad ( int $rows , int $cols )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_newwin
fs: resource ncurses_newwin ( int $rows , int $cols , int $y , int $x )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_nl
fs: bool ncurses_nl ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_nocbreak
fs: bool ncurses_nocbreak ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_noecho
fs: bool ncurses_noecho ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_nonl
fs: bool ncurses_nonl ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_noqiflush
fs: void ncurses_noqiflush ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_noraw
fs: bool ncurses_noraw ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_pair_content
fs: int ncurses_pair_content ( int $pair , int &$f , int &$b )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_panel_above
fs: resource ncurses_panel_above ( resource $panel )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_panel_below
fs: resource ncurses_panel_below ( resource $panel )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_panel_window
fs: resource ncurses_panel_window ( resource $panel )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_pnoutrefresh
fs: int ncurses_pnoutrefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_prefresh
fs: int ncurses_prefresh ( resource $pad , int $pminrow , int $pmincol , int $sminrow , int $smincol , int $smaxrow , int $smaxcol )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_putp
fs: int ncurses_putp ( string $text )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_qiflush
fs: void ncurses_qiflush ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_raw
fs: bool ncurses_raw ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_refresh
fs: int ncurses_refresh ( int $ch )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_replace_panel
fs: int ncurses_replace_panel ( resource $panel , resource $window )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_reset_prog_mode
fs: int ncurses_reset_prog_mode ( void )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_reset_shell_mode
fs: int ncurses_reset_shell_mode ( void )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_resetty
fs: bool ncurses_resetty ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_savetty
fs: bool ncurses_savetty ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_scr_dump
fs: int ncurses_scr_dump ( string $filename )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_scr_init
fs: int ncurses_scr_init ( string $filename )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_scr_restore
fs: int ncurses_scr_restore ( string $filename )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_scr_set
fs: int ncurses_scr_set ( string $filename )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_scrl
fs: int ncurses_scrl ( int $count )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_show_panel
fs: int ncurses_show_panel ( resource $panel )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_attr
fs: int ncurses_slk_attr ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_attroff
fs: int ncurses_slk_attroff ( int $intarg )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_attron
fs: int ncurses_slk_attron ( int $intarg )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_attrset
fs: int ncurses_slk_attrset ( int $intarg )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_clear
fs: bool ncurses_slk_clear ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_color
fs: int ncurses_slk_color ( int $intarg )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_init
fs: bool ncurses_slk_init ( int $format )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_noutrefresh
fs: bool ncurses_slk_noutrefresh ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_refresh
fs: int ncurses_slk_refresh ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_restore
fs: int ncurses_slk_restore ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_set
fs: bool ncurses_slk_set ( int $labelnr , string $label , int $format )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_slk_touch
fs: int ncurses_slk_touch ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_standend
fs: int ncurses_standend ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_standout
fs: int ncurses_standout ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_start_color
fs: int ncurses_start_color ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_termattrs
fs: bool ncurses_termattrs ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_termname
fs: string ncurses_termname ( void )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_timeout
fs: void ncurses_timeout ( int $millisec )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_top_panel
fs: int ncurses_top_panel ( resource $panel )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_typeahead
fs: int ncurses_typeahead ( int $fd )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_ungetch
fs: int ncurses_ungetch ( int $keycode )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_ungetmouse
fs: bool ncurses_ungetmouse ( array $mevent )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_update_panels
fs: void ncurses_update_panels ( void )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_use_default_colors
fs: bool ncurses_use_default_colors ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_use_env
fs: void ncurses_use_env ( bool $flag )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_use_extended_names
fs: int ncurses_use_extended_names ( bool $flag )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_vidattr
fs: int ncurses_vidattr ( int $intarg )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_vline
fs: int ncurses_vline ( int $charattr , int $n )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_waddch
fs: int ncurses_waddch ( resource $window , int $ch )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_waddstr
fs: int ncurses_waddstr ( resource $window , string $str [, int $n ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wattroff
fs: int ncurses_wattroff ( resource $window , int $attrs )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wattron
fs: int ncurses_wattron ( resource $window , int $attrs )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wattrset
fs: int ncurses_wattrset ( resource $window , int $attrs )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wborder
fs: int ncurses_wborder ( resource $window , int $left , int $right , int $top , int $bottom , int $tl_corner , int $tr_corner , int $bl_corner , int $br_corner )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wclear
fs: int ncurses_wclear ( resource $window )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wcolor_set
fs: int ncurses_wcolor_set ( resource $window , int $color_pair )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_werase
fs: int ncurses_werase ( resource $window )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wgetch
fs: int ncurses_wgetch ( resource $window )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_whline
fs: int ncurses_whline ( resource $window , int $charattr , int $n )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wmouse_trafo
fs: bool ncurses_wmouse_trafo ( resource $window , int &$y , int &$x , bool $toscreen )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wmove
fs: int ncurses_wmove ( resource $window , int $y , int $x )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wnoutrefresh
fs: int ncurses_wnoutrefresh ( resource $window )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wrefresh
fs: int ncurses_wrefresh ( resource $window )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wstandend
fs: int ncurses_wstandend ( resource $window )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wstandout
fs: int ncurses_wstandout ( resource $window )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: ncurses_wvline
fs: int ncurses_wvline ( resource $window , int $charattr , int $n )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL ncurses:1.0.0
pt: Ncurses Terminal Screen Control
fn: newt_bell
fs: void newt_bell ( void )
fd: This function sends a beep to the terminal. 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_button
fs: resource newt_button ( int $left , int $top , string $text )
fd: Creates a new button.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_button_bar
fs: resource newt_button_bar ( array &$buttons )
fd: This function returns a grid containing the buttons created.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_centered_window
fs: int newt_centered_window ( int $width , int $height [, string $title ] )
fd: Open a centered window of the specified size.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox
fs: resource newt_checkbox ( int $left , int $top , string $text , string $def_value [, string $seq ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_get_value
fs: string newt_checkbox_get_value ( resource $checkbox )
fd: This function returns the character in the sequence which indicates the current value of the checkbox.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_set_flags
fs: void newt_checkbox_set_flags ( resource $checkbox , int $flags , int $sense )
fd: This function allows to set various flags on checkbox resource.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_set_value
fs: void newt_checkbox_set_value ( resource $checkbox , string $value )
fd: This function allows to set the current value of the checkbox resource.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree
fs: resource newt_checkbox_tree ( int $left , int $top , int $height [, int $flags ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_add_item
fs: void newt_checkbox_tree_add_item ( resource $checkboxtree , string $text , mixed $data , int $flags , int $index [, int $... ] )
fd: This function allows to add new item to the checkbox tree.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_find_item
fs: array newt_checkbox_tree_find_item ( resource $checkboxtree , mixed $data )
fd: Finds an item in the checkbox tree by item's data.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_get_current
fs: mixed newt_checkbox_tree_get_current ( resource $checkboxtree )
fd: This method returns checkbox tree selected tem.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_get_entry_value
fs: string newt_checkbox_tree_get_entry_value ( resource $checkboxtree , mixed $data )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_get_multi_selection
fs: array newt_checkbox_tree_get_multi_selection ( resource $checkboxtree , string $seqnum )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_get_selection
fs: array newt_checkbox_tree_get_selection ( resource $checkboxtree )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_multi
fs: resource newt_checkbox_tree_multi ( int $left , int $top , int $height , string $seq [, int $flags ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_set_current
fs: void newt_checkbox_tree_set_current ( resource $checkboxtree , mixed $data )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_set_entry
fs: void newt_checkbox_tree_set_entry ( resource $checkboxtree , mixed $data , string $text )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_set_entry_value
fs: void newt_checkbox_tree_set_entry_value ( resource $checkboxtree , mixed $data , string $value )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_checkbox_tree_set_width
fs: void newt_checkbox_tree_set_width ( resource $checkbox_tree , int $width )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_clear_key_buffer
fs: void newt_clear_key_buffer ( void )
fd: Discards the contents of the terminal's input buffer without waiting for additional input.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_cls
fs: void newt_cls ( void )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_compact_button
fs: resource newt_compact_button ( int $left , int $top , string $text )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_component_add_callback
fs: void newt_component_add_callback ( resource $component , mixed $func_name , mixed $data )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_component_takes_focus
fs: void newt_component_takes_focus ( resource $component , bool $takes_focus )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_create_grid
fs: resource newt_create_grid ( int $cols , int $rows )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_cursor_off
fs: void newt_cursor_off ( void )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_cursor_on
fs: void newt_cursor_on ( void )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_delay
fs: void newt_delay ( int $microseconds )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_draw_form
fs: void newt_draw_form ( resource $form )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_draw_root_text
fs: void newt_draw_root_text ( int $left , int $top , string $text )
fd: Displays the string text at the position indicated.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_entry
fs: resource newt_entry ( int $left , int $top , int $width [, string $init_value [, int $flags ]] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_entry_get_value
fs: string newt_entry_get_value ( resource $entry )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_entry_set
fs: void newt_entry_set ( resource $entry , string $value [, bool $cursor_at_end ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_entry_set_filter
fs: void newt_entry_set_filter ( resource $entry , callback $filter , mixed $data )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_entry_set_flags
fs: void newt_entry_set_flags ( resource $entry , int $flags , int $sense )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_finished
fs: int newt_finished ( void )
fd: Uninitializes newt interface. This function be called, when program is ready to exit.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form
fs: resource newt_form ([ resource $vert_bar [, string $help [, int $flags ]]] )
fd: Create a new form.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_add_component
fs: void newt_form_add_component ( resource $form , resource $component )
fd: Adds a single component to the form.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_add_components
fs: void newt_form_add_components ( resource $form , array $components )
fd: Adds several components to the form.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_add_hot_key
fs: void newt_form_add_hot_key ( resource $form , int $key )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_destroy
fs: void newt_form_destroy ( resource $form )
fd: This function frees the memory resources used by the form and all of the components which have been added to the form (including those components which are on subforms). Once a form has been destroyed, none of the form's components can be used.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_get_current
fs: resource newt_form_get_current ( resource $form )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_run
fs: void newt_form_run ( resource $form , array &$exit_struct )
fd: This function runs the form passed to it.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_set_background
fs: void newt_form_set_background ( resource $from , int $background )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_set_height
fs: void newt_form_set_height ( resource $form , int $height )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_set_size
fs: void newt_form_set_size ( resource $form )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_set_timer
fs: void newt_form_set_timer ( resource $form , int $milliseconds )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_set_width
fs: void newt_form_set_width ( resource $form , int $width )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_form_watch_fd
fs: void newt_form_watch_fd ( resource $form , resource $stream [, int $flags ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_get_screen_size
fs: void newt_get_screen_size ( int &$cols , int &$rows )
fd: Fills in the passed references with the current size of the terminal.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_add_components_to_form
fs: void newt_grid_add_components_to_form ( resource $grid , resource $form , bool $recurse )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_basic_window
fs: resource newt_grid_basic_window ( resource $text , resource $middle , resource $buttons )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_free
fs: void newt_grid_free ( resource $grid , bool $recurse )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_get_size
fs: void newt_grid_get_size ( resouce $grid , int &$width , int &$height )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_h_close_stacked
fs: resource newt_grid_h_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_h_stacked
fs: resource newt_grid_h_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_place
fs: void newt_grid_place ( resource $grid , int $left , int $top )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_set_field
fs: void newt_grid_set_field ( resource $grid , int $col , int $row , int $type , resource $val , int $pad_left , int $pad_top , int $pad_right , int $pad_bottom , int $anchor [, int $flags ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_simple_window
fs: resource newt_grid_simple_window ( resource $text , resource $middle , resource $buttons )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_v_close_stacked
fs: resource newt_grid_v_close_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_v_stacked
fs: resource newt_grid_v_stacked ( int $element1_type , resource $element1 [, int $... [, resource $... ]] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_wrapped_window
fs: void newt_grid_wrapped_window ( resource $grid , string $title )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_grid_wrapped_window_at
fs: void newt_grid_wrapped_window_at ( resource $grid , string $title , int $left , int $top )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_init
fs: int newt_init ( void )
fd: Initializes the newt interface. This function must be called before any other newt function.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_label
fs: resource newt_label ( int $left , int $top , string $text )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_label_set_text
fs: void newt_label_set_text ( resource $label , string $text )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox
fs: resource newt_listbox ( int $left , int $top , int $height [, int $flags ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_append_entry
fs: void newt_listbox_append_entry ( resource $listbox , string $text , mixed $data )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_clear
fs: void newt_listbox_clear ( resource $listobx )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_clear_selection
fs: void newt_listbox_clear_selection ( resource $listbox )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_delete_entry
fs: void newt_listbox_delete_entry ( resource $listbox , mixed $key )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_get_current
fs: string newt_listbox_get_current ( resource $listbox )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_get_selection
fs: array newt_listbox_get_selection ( resource $listbox )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_insert_entry
fs: void newt_listbox_insert_entry ( resource $listbox , string $text , mixed $data , mixed $key )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_item_count
fs: int newt_listbox_item_count ( resource $listbox )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_select_item
fs: void newt_listbox_select_item ( resource $listbox , mixed $key , int $sense )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_set_current
fs: void newt_listbox_set_current ( resource $listbox , int $num )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_set_current_by_key
fs: void newt_listbox_set_current_by_key ( resource $listbox , mixed $key )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_set_data
fs: void newt_listbox_set_data ( resource $listbox , int $num , mixed $data )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_set_entry
fs: void newt_listbox_set_entry ( resource $listbox , int $num , string $text )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listbox_set_width
fs: void newt_listbox_set_width ( resource $listbox , int $width )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listitem
fs: resource newt_listitem ( int $left , int $top , string $text , bool $is_default , resouce $prev_item , mixed $data [, int $flags ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listitem_get_data
fs: mixed newt_listitem_get_data ( resource $item )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_listitem_set
fs: void newt_listitem_set ( resource $item , string $text )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_open_window
fs: int newt_open_window ( int $left , int $top , int $width , int $height [, string $title ] )
fd: Open a window of the specified size and position.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_pop_help_line
fs: void newt_pop_help_line ( void )
fd: Replaces the current help line with the one from the stack. 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_pop_window
fs: void newt_pop_window ( void )
fd: Removes the top window from the display, and redraws the display areas which the window overwrote.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_push_help_line
fs: void newt_push_help_line ([ string $text ] )
fd: Saves the current help line on a stack, and displays the new line.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_radio_get_current
fs: resource newt_radio_get_current ( resource $set_member )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_radiobutton
fs: resource newt_radiobutton ( int $left , int $top , string $text , bool $is_default [, resource $prev_button ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_redraw_help_line
fs: void newt_redraw_help_line ( void )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_reflow_text
fs: string newt_reflow_text ( string $text , int $width , int $flex_down , int $flex_up , int &$actual_width , int &$actual_height )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_refresh
fs: void newt_refresh ( void )
fd: To increase performance, newt only updates the display when it needs to, not when the program tells it to write to the terminal. Applications can force newt to immediately update modified portions of the screen by calling this function.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_resize_screen
fs: void newt_resize_screen ([ bool $redraw ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_resume
fs: void newt_resume ( void )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_run_form
fs: resource newt_run_form ( resource $form )
fd: This function runs the form passed to it.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_scale
fs: resource newt_scale ( int $left , int $top , int $width , int $full_value )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_scale_set
fs: void newt_scale_set ( resource $scale , int $amount )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_scrollbar_set
fs: void newt_scrollbar_set ( resource $scrollbar , int $where , int $total )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_set_help_callback
fs: void newt_set_help_callback ( mixed $function )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_set_suspend_callback
fs: void newt_set_suspend_callback ( callback $function , mixed $data )
fd: Set a callback function which gets invoked when user presses the suspend key (normally ^Z). If no suspend callback is registered, the suspend keystroke is ignored.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_suspend
fs: void newt_suspend ( void )
fd: Tells newt to return the terminal to its initial state. Once this is done, the application can suspend itself (by sending itself a SIGTSTP, fork a child program, or do whatever else it likes).
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_textbox
fs: resource newt_textbox ( int $left , int $top , int $width , int $height [, int $flags ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_textbox_get_num_lines
fs: int newt_textbox_get_num_lines ( resource $textbox )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_textbox_reflowed
fs: resource newt_textbox_reflowed ( int $left , int $top , char $*text , int $width , int $flex_down , int $flex_up [, int $flags ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_textbox_set_height
fs: void newt_textbox_set_height ( resource $textbox , int $height )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_textbox_set_text
fs: void newt_textbox_set_text ( resource $textbox , string $text )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_vertical_scrollbar
fs: resource newt_vertical_scrollbar ( int $left , int $top , int $height [, int $normal_colorset [, int $thumb_colorset ]] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_wait_for_key
fs: void newt_wait_for_key ( void )
fd: This function doesn't return until a key has been pressed. The keystroke is then ignored. If a key is already in the terminal's buffer, this function discards a keystroke and returns immediately.
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_win_choice
fs: int newt_win_choice ( string $title , string $button1_text , string $button2_text , string $format [, mixed $args [, mixed $... ]] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_win_entries
fs: int newt_win_entries ( string $title , string $text , int $suggested_width , int $flex_down , int $flex_up , int $data_width , array &$items , string $button1 [, string $... ] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_win_menu
fs: int newt_win_menu ( string $title , string $text , int $suggestedWidth , int $flexDown , int $flexUp , int $maxListHeight , array $items , int &$listItem [, string $button1 [, string $... ]] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_win_message
fs: void newt_win_message ( string $title , string $button_text , string $format [, mixed $args [, mixed $... ]] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_win_messagev
fs: void newt_win_messagev ( string $title , string $button_text , string $format , array $args )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: newt_win_ternary
fs: int newt_win_ternary ( string $title , string $button1_text , string $button2_text , string $button3_text , string $format [, mixed $args [, mixed $... ]] )
fd: 
vi: PECL newt:0.1-1.1
pt: Newt
fn: next
fs: 
fd: 
vi: PHP 4, PHP 5, PECL axis2:0.1.0-0.1.1 xmlreader:1.0-1.0.1
pt: Array
fn: ngettext
fs: string ngettext ( string $msgid1 , string $msgid2 , int $n )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Gettext
fn: nl2br
fs: string nl2br ( string $string )
fd: Returns string with '<br />' inserted before all newlines.
vi: PHP 4, PHP 5
pt: String
fn: nl_langinfo
fs: string nl_langinfo ( int $item )
fd: nl_langinfo() is used to access individual elements of the locale categories.
vi: PHP 4 >= 4.0.7, PHP 5
pt: String
fn: notes_body
fs: array notes_body ( string $server , string $mailbox , int $msg_number )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_copy_db
fs: bool notes_copy_db ( string $from_database_name , string $to_database_name )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_create_db
fs: bool notes_create_db ( string $database_name )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_create_note
fs: bool notes_create_note ( string $database_name , string $form_name )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_drop_db
fs: bool notes_drop_db ( string $database_name )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_find_note
fs: int notes_find_note ( string $database_name , string $name [, string $type ] )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_header_info
fs: object notes_header_info ( string $server , string $mailbox , int $msg_number )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_list_msgs
fs: bool notes_list_msgs ( string $db )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_mark_read
fs: bool notes_mark_read ( string $database_name , string $user_name , string $note_id )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_mark_unread
fs: bool notes_mark_unread ( string $database_name , string $user_name , string $note_id )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_nav_create
fs: bool notes_nav_create ( string $database_name , string $name )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_search
fs: array notes_search ( string $database_name , string $keywords )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_unread
fs: array notes_unread ( string $database_name , string $user_name )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: notes_version
fs: float notes_version ( string $database_name )
fd: 
vi: PHP 4 >= 4.0.5
pt: Lotus Notes
fn: nsapi_request_headers
fs: array nsapi_request_headers ( void )
fd: nsapi_request_headers() gets all the HTTP headers in the current request. This is only supported when PHP runs as a NSAPI module. 
vi: PHP 4 >= 4.3.3, PHP 5
pt: NSAPI-specific
fn: nsapi_response_headers
fs: array nsapi_response_headers ( void )
fd: Gets all the NSAPI response headers.
vi: PHP 4 >= 4.3.3, PHP 5
pt: NSAPI-specific
fn: nsapi_virtual
fs: bool nsapi_virtual ( string $uri )
fd: nsapi_virtual() is an NSAPI-specific function which is equivalent to <!--#include virtual...--> in SSI (.shtml files). It does an NSAPI sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you'd parse through webserver. 
vi: PHP 4 >= 4.3.3, PHP 5
pt: NSAPI-specific
fn: number_format
fs: 
fd: 
vi: PHP 4, PHP 5
pt: String
fn: ob_clean
fs: void ob_clean ( void )
fd: This function discards the contents of the output buffer. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Output Control
fn: ob_deflatehandler
fs: string ob_deflatehandler ( string $data , int $mode )
fd: 
vi: PECL pecl_http:0.21.0-1.5.5
pt: HTTP
fn: ob_end_clean
fs: bool ob_end_clean ( void )
fd: This function discards the contents of the topmost output buffer and turns off this output buffering.
vi: PHP 4, PHP 5
pt: Output Control
fn: ob_end_flush
fs: bool ob_end_flush ( void )
fd: This function will send the contents of the topmost output buffer (if any) and turn this output buffer off.
vi: PHP 4, PHP 5
pt: Output Control
fn: ob_etaghandler
fs: string ob_etaghandler ( string $data , int $mode )
fd: 
vi: PECL pecl_http:0.10.0-1.5.5
pt: HTTP
fn: ob_flush
fs: void ob_flush ( void )
fd: This function will send the contents of the output buffer (if any).
vi: PHP 4 >= 4.2.0, PHP 5
pt: Output Control
fn: ob_get_clean
fs: string ob_get_clean ( void )
fd: Gets the current buffer contents and delete current output buffer. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Output Control
fn: ob_get_contents
fs: string ob_get_contents ( void )
fd: Gets the contents of the output buffer without clearing it.
vi: PHP 4, PHP 5
pt: Output Control
fn: ob_get_flush
fs: string ob_get_flush ( void )
fd: ob_get_flush() flushes the output buffer, return it as a string and turns off output buffering. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Output Control
fn: ob_get_length
fs: int ob_get_length ( void )
fd: This will return the length of the contents in the output buffer.
vi: PHP 4 >= 4.0.2, PHP 5
pt: Output Control
fn: ob_get_level
fs: int ob_get_level ( void )
fd: Returns the nesting level of the output buffering mechanism.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Output Control
fn: ob_get_status
fs: array ob_get_status ([ bool $full_status =FALSE ] )
fd: ob_get_status() returns status information on either the top level output buffer or all active output buffer levels if full_status is set to TRUE.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Output Control
fn: ob_gzhandler
fs: string ob_gzhandler ( string $buffer , int $mode )
fd: 
vi: PHP 4 >= 4.0.4, PHP 5
pt: Output Control
fn: ob_iconv_handler
fs: string ob_iconv_handler ( string $contents , int $status )
fd: Converts the string encoded in internal_encoding to output_encoding. 
vi: PHP 4 >= 4.0.5, PHP 5
pt: iconv
fn: ob_implicit_flush
fs: void ob_implicit_flush ([ int $flag ] )
fd: ob_implicit_flush() will turn implicit flushing on or off.
vi: PHP 4, PHP 5
pt: Output Control
fn: ob_inflatehandler
fs: string ob_inflatehandler ( string $data , int $mode )
fd: 
vi: PECL pecl_http:0.21.0-1.5.5
pt: HTTP
fn: ob_list_handlers
fs: array ob_list_handlers ( void )
fd: Lists all output handlers in use.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Output Control
fn: ob_start
fs: bool ob_start ([ callback $output_callback [, int $chunk_size [, bool $erase ]]] )
fd: This function will turn output buffering on. While output buffering is active no output is sent from the script (other than headers), instead the output is stored in an internal buffer. 
vi: PHP 4, PHP 5
pt: Output Control
fn: ob_tidyhandler
fs: 
fd: 
vi: PHP 5
pt: Tidy
fn: oci_bind_array_by_name
fs: bool oci_bind_array_by_name ( resource $statement , string $name , array &$var_array , int $max_table_length [, int $max_item_length [, int $type ]] )
fd: Binds the PHP array var_array to the Oracle placeholder name, which points to Oracle PL/SQL array. Whether it will be used for input or output will be determined at run-time.
vi: PHP 5 >= 5.1.2, PECL oci8:1.2.0-1.2.4
pt: Oracle
fn: oci_bind_by_name
fs: bool oci_bind_by_name ( resource $statement , string $ph_name , mixed &$variable [, int $maxlength [, int $type ]] )
fd: Binds the PHP variable variable to the Oracle placeholder ph_name. Whether it will be used for input or output will be determined at run-time and the necessary storage space will be allocated.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_cancel
fs: bool oci_cancel ( resource $statement )
fd: Invalidates a cursor, freeing all associated resources and cancels the ability to read from it.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_close
fs: bool oci_close ( resource $connection )
fd: Closes the Oracle connection.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_collection_append
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_collection_assign
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_collection_element_assign
fs: 
fd: 
vi: 
pt: Oracle
fn: oci_collection_element_get
fs: 
fd: 
vi: 
pt: Oracle
fn: oci_collection_free
fs: 
fd: 
vi: 
pt: Oracle
fn: oci_collection_max
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_collection_size
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_collection_trim
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_commit
fs: bool oci_commit ( resource $connection )
fd: Commits all outstanding statements for the active transaction on the Oracle connection.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_connect
fs: resource oci_connect ( string $username , string $password [, string $db [, string $charset [, int $session_mode ]]] )
fd: Returns a connection identifier needed for most other OCI calls.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_define_by_name
fs: bool oci_define_by_name ( resource $statement , string $column_name , mixed &$variable [, int $type ] )
fd: Defines PHP variables for fetches of SQL-Columns.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_error
fs: array oci_error ([ resource $source ] )
fd: Returns the last error found.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_execute
fs: bool oci_execute ( resource $statement [, int $mode ] )
fd: Executes a previously parsed statement.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_fetch
fs: bool oci_fetch ( resource $statement )
fd: Fetches the next row (for SELECT statements) into the internal result-buffer. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_fetch_all
fs: int oci_fetch_all ( resource $statement , array &$output [, int $skip [, int $maxrows [, int $flags ]]] )
fd: Fetches all the rows from a result into a user-defined array. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_fetch_array
fs: array oci_fetch_array ( resource $statement [, int $mode ] )
fd: Returns an array, which corresponds to the next result row. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_fetch_assoc
fs: array oci_fetch_assoc ( resource $statement )
fd: Returns the next row from the result data as an associative array. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_fetch_object
fs: object oci_fetch_object ( resource $statement )
fd: Returns the next row from the result data as an object. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_fetch_row
fs: array oci_fetch_row ( resource $statement )
fd: Returns the next row from the result data as an indexed array. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_field_is_null
fs: bool oci_field_is_null ( resource $statement , mixed $field )
fd: Checks if the given field from the statement is NULL.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_field_name
fs: string oci_field_name ( resource $statement , int $field )
fd: Returns the name of the field.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_field_precision
fs: int oci_field_precision ( resource $statement , int $field )
fd: Returns precision of the field. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_field_scale
fs: int oci_field_scale ( resource $statement , int $field )
fd: Returns the scale of the column with field index. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_field_size
fs: int oci_field_size ( resource $statement , mixed $field )
fd: Returns the size of a field.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_field_type
fs: mixed oci_field_type ( resource $statement , int $field )
fd: Returns a field's data type.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_field_type_raw
fs: int oci_field_type_raw ( resource $statement , int $field )
fd: Returns Oracle's raw data type of the field. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_free_statement
fs: bool oci_free_statement ( resource $statement )
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_internal_debug
fs: void oci_internal_debug ( bool $onoff )
fd: Enables or disables internal debug output.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_append
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_close
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_copy
fs: bool oci_lob_copy ( OCI-Lob $lob_to , OCI-Lob $lob_from [, int $length ] )
fd: Copies a large object or a part of a large object to another large object. Old LOB-recipient data will be overwritten. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_eof
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_erase
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_export
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_flush
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_free
fs: 
fd: 
vi: 
pt: Oracle
fn: oci_lob_getbuffering
fs: 
fd: 
vi: 
pt: Oracle
fn: oci_lob_import
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_is_equal
fs: bool oci_lob_is_equal ( OCI-Lob $lob1 , OCI-Lob $lob2 )
fd: Compares two LOB/FILE locators.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_load
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_read
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_rewind
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_save
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_savefile
fs: 
fd: 
vi: 
pt: Oracle
fn: oci_lob_seek
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_setbuffering
fs: 
fd: 
vi: 
pt: Oracle
fn: oci_lob_size
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_tell
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_truncate
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_write
fs: 
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_lob_writetemporary
fs: 
fd: 
vi: 
pt: Oracle
fn: oci_lob_writetofile
fs: 
fd: 
vi: 
pt: Oracle
fn: oci_new_collection
fs: OCI-Collection oci_new_collection ( resource $connection , string $tdo [, string $schema ] )
fd: Allocates a new collection object.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_new_connect
fs: resource oci_new_connect ( string $username , string $password [, string $db [, string $charset [, int $session_mode ]]] )
fd: Establishes a new connection to an Oracle server and logs on. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_new_cursor
fs: resource oci_new_cursor ( resource $connection )
fd: Allocates a new statement handle on the specified connection.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_new_descriptor
fs: OCI-Lob oci_new_descriptor ( resource $connection [, int $type ] )
fd: Allocates resources to hold descriptor or LOB locator.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_num_fields
fs: int oci_num_fields ( resource $statement )
fd: Gets the number of columns in the given statement.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_num_rows
fs: int oci_num_rows ( resource $statement )
fd: Gets the number of rows affected during statement execution.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_parse
fs: resource oci_parse ( resource $connection , string $query )
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_password_change
fs: bool oci_password_change ( resource $connection , string $username , string $old_password , string $new_password )
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_pconnect
fs: resource oci_pconnect ( string $username , string $password [, string $db [, string $charset [, int $session_mode ]]] )
fd: Creates a persistent connection to an Oracle server and logs on. 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_result
fs: mixed oci_result ( resource $statement , mixed $field )
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_rollback
fs: bool oci_rollback ( resource $connection )
fd: Rolls back all outstanding statements for the Oracle connection.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_server_version
fs: string oci_server_version ( resource $connection )
fd: Returns a string with version information of the Oracle server, which uses the provided connection.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_set_prefetch
fs: bool oci_set_prefetch ( resource $statement , int $rows )
fd: 
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: oci_statement_type
fs: string oci_statement_type ( resource $statement )
fd: Returns the type of the provided OCI statement.
vi: PHP 5, PECL oci8:1.1-1.2.4
pt: Oracle
fn: ocibindbyname
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicancel
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicloselob
fs: 
fd: 
vi: PHP 4 >= 4.0.6, PECL oci8:1.0
pt: Oracle
fn: ocicollappend
fs: 
fd: 
vi: PHP 4 >= 4.0.6, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicollassign
fs: 
fd: 
vi: PHP 4 >= 4.0.6, PECL oci8:1.0
pt: Oracle
fn: ocicollassignelem
fs: 
fd: 
vi: PHP 4 >= 4.0.6, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicollgetelem
fs: 
fd: 
vi: PHP 4 >= 4.0.6, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicollmax
fs: 
fd: 
vi: PHP 4 >= 4.0.6, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicollsize
fs: 
fd: 
vi: PHP 4 >= 4.0.6, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicolltrim
fs: 
fd: 
vi: PHP 4 >= 4.0.6, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicolumnisnull
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicolumnname
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicolumnprecision
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicolumnscale
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicolumnsize
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicolumntype
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicolumntyperaw
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocicommit
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocidefinebyname
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocierror
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ociexecute
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocifetch
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocifetchinto
fs: int ocifetchinto ( resource $statement , array &$result [, int $mode ] )
fd: This function is deprecated.
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocifetchstatement
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocifreecollection
fs: 
fd: 
vi: PHP 4 >= 4.0.7, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocifreecursor
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocifreedesc
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocifreestatement
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ociinternaldebug
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ociloadlob
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocilogoff
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocilogon
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocinewcollection
fs: 
fd: 
vi: PHP 4 >= 4.0.6, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocinewcursor
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocinewdescriptor
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocinlogon
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocinumcols
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ociparse
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ociplogon
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ociresult
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocirollback
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocirowcount
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocisavelob
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocisavelobfile
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ociserverversion
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocisetprefetch
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ocistatementtype
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ociwritelobtofile
fs: 
fd: 
vi: PHP 4, PHP 5, PECL oci8:1.0-1.2.4
pt: Oracle
fn: ociwritetemporarylob
fs: 
fd: 
vi: PHP 4 >= 4.0.6, PECL oci8:1.0
pt: Oracle
fn: octdec
fs: number octdec ( string $octal_string )
fd: Returns the decimal equivalent of the octal number represented by the octal_string argument.
vi: PHP 4, PHP 5
pt: Mathematical
fn: odbc_autocommit
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_binmode
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_close
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_close_all
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_columnprivileges
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_columns
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_commit
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_connect
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_cursor
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_data_source
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: ODBC (Unified)
fn: odbc_do
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_error
fs: 
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: ODBC (Unified)
fn: odbc_errormsg
fs: 
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: ODBC (Unified)
fn: odbc_exec
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_execute
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_fetch_array
fs: array odbc_fetch_array ( resource $result [, int $rownumber ] )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: ODBC (Unified)
fn: odbc_fetch_into
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_fetch_object
fs: object odbc_fetch_object ( resource $result [, int $rownumber ] )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: ODBC (Unified)
fn: odbc_fetch_row
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_field_len
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_field_name
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_field_num
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_field_precision
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_field_scale
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_field_type
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_foreignkeys
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_free_result
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_gettypeinfo
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_longreadlen
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_next_result
fs: 
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: ODBC (Unified)
fn: odbc_num_fields
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_num_rows
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_pconnect
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_prepare
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_primarykeys
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_procedurecolumns
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_procedures
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_result
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_result_all
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_rollback
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_setoption
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_specialcolumns
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_statistics
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_tableprivileges
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: odbc_tables
fs: 
fd: 
vi: PHP 4, PHP 5
pt: ODBC (Unified)
fn: openal_buffer_create
fs: resource openal_buffer_create ( void )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_buffer_data
fs: bool openal_buffer_data ( resource $buffer , int $format , string $data , int $freq )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_buffer_destroy
fs: bool openal_buffer_destroy ( resource $buffer )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_buffer_get
fs: int openal_buffer_get ( resource $buffer , int $property )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_buffer_loadwav
fs: bool openal_buffer_loadwav ( resource $buffer , string $wavfile )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_context_create
fs: resource openal_context_create ( resource $device )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_context_current
fs: bool openal_context_current ( resource $context )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_context_destroy
fs: bool openal_context_destroy ( resource $context )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_context_process
fs: bool openal_context_process ( resource $context )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_context_suspend
fs: bool openal_context_suspend ( resource $context )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_device_close
fs: bool openal_device_close ( resource $device )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_device_open
fs: resource openal_device_open ([ string $device_desc ] )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_listener_get
fs: mixed openal_listener_get ( int $property )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_listener_set
fs: bool openal_listener_set ( int $property , mixed $setting )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_source_create
fs: resource openal_source_create ( void )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_source_destroy
fs: bool openal_source_destroy ( resource $source )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_source_get
fs: mixed openal_source_get ( resource $source , int $property )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_source_pause
fs: bool openal_source_pause ( resource $source )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_source_play
fs: bool openal_source_play ( resource $source )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_source_rewind
fs: bool openal_source_rewind ( resource $source )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_source_set
fs: bool openal_source_set ( resource $source , int $property , mixed $setting )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_source_stop
fs: bool openal_source_stop ( resource $source )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: openal_stream
fs: resource openal_stream ( resource $source , int $format , int $rate )
fd: 
vi: PECL openal:0.1
pt: OpenAL Audio Bindings
fn: opendir
fs: resource opendir ( string $path [, resource $context ] )
fd: 
vi: PHP 4, PHP 5
pt: Directory
fn: openlog
fs: bool openlog ( string $ident , int $option , int $facility )
fd: openlog() opens a connection to the system logger for a program. 
vi: PHP 4, PHP 5
pt: Network
fn: openssl_csr_export
fs: bool openssl_csr_export ( resource $csr , string &$out [, bool $notext ] )
fd: openssl_csr_export() takes the Certificate Signing Request represented by csr and stores it as ascii-armoured text into out, which is passed by reference.
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_csr_export_to_file
fs: bool openssl_csr_export_to_file ( resource $csr , string $outfilename [, bool $notext ] )
fd: openssl_csr_export_to_file() takes the Certificate Signing Request represented by csr and saves it as ascii-armoured text into the file named by outfilename.
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_csr_get_public_key
fs: resource openssl_csr_get_public_key ( mixed $csr [, bool $use_shortnames ] )
fd: 
vi: PHP 5 >= 5.2.0
pt: OpenSSL
fn: openssl_csr_get_subject
fs: array openssl_csr_get_subject ( mixed $csr [, bool $use_shortnames ] )
fd: 
vi: PHP 5 >= 5.2.0
pt: OpenSSL
fn: openssl_csr_new
fs: mixed openssl_csr_new ( array $dn , resource &$privkey [, array $configargs [, array $extraattribs ]] )
fd: openssl_csr_new() generates a new CSR (Certificate Signing Request) based on the information provided by dn, which represents the Distinguished Name to be used in the certificate. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_csr_sign
fs: resource openssl_csr_sign ( mixed $csr , mixed $cacert , mixed $priv_key , int $days [, array $configargs [, int $serial ]] )
fd: openssl_csr_sign() generates an x509 certificate resource from the given CSR. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_error_string
fs: string openssl_error_string ( void )
fd: openssl_error_string() returns the last error from the openSSL library. Error messages are stacked, so this function should be called multiple times to collect all of the information.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_free_key
fs: void openssl_free_key ( resource $key_identifier )
fd: openssl_free_key() frees the key associated with the specified key_identifier from memory.
vi: PHP 4 >= 4.0.4, PHP 5
pt: OpenSSL
fn: openssl_get_privatekey
fs: 
fd: 
vi: PHP 4 >= 4.0.4, PHP 5
pt: OpenSSL
fn: openssl_get_publickey
fs: 
fd: 
vi: PHP 4 >= 4.0.4, PHP 5
pt: OpenSSL
fn: openssl_open
fs: bool openssl_open ( string $sealed_data , string &$open_data , string $env_key , mixed $priv_key_id )
fd: openssl_open() opens (decrypts) sealed_data using the private key associated with the key identifier priv_key_id and the envelope key env_key, and fills open_data with the decrypted data. The envelope key is generated when the data are sealed and can only be used by one specific private key.
vi: PHP 4 >= 4.0.4, PHP 5
pt: OpenSSL
fn: openssl_pkcs12_export
fs: bool openssl_pkcs12_export ( mixed $x509 , string &$out , mixed $priv_key , string $pass [, array $args ] )
fd: openssl_pkcs12_export() stores x509 into a string named by out in a PKCS#12 file format.
vi: PHP 5 >= 5.2.2
pt: OpenSSL
fn: openssl_pkcs12_export_to_file
fs: bool openssl_pkcs12_export_to_file ( mixed $x509 , string $filename , mixed $priv_key , string $pass [, array $args ] )
fd: openssl_pkcs12_export_to_file() stores x509 into a file named by filename in a PKCS#12 file format.
vi: PHP 5 >= 5.2.2
pt: OpenSSL
fn: openssl_pkcs12_read
fs: bool openssl_pkcs12_read ( mixed $PKCS12 , array &$certs , string $pass )
fd: openssl_pkcs12_read() parses the PKCS#12 certificate store supplied by PKCS12 into a array named certs.
vi: PHP 5 >= 5.2.2
pt: OpenSSL
fn: openssl_pkcs7_decrypt
fs: bool openssl_pkcs7_decrypt ( string $infilename , string $outfilename , mixed $recipcert [, mixed $recipkey ] )
fd: Decrypts the S/MIME encrypted message contained in the file specified by infilename using the certificate and its associated private key specified by recipcert and recipkey.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_pkcs7_encrypt
fs: bool openssl_pkcs7_encrypt ( string $infile , string $outfile , mixed $recipcerts , array $headers [, int $flags [, int $cipherid ]] )
fd: openssl_pkcs7_encrypt() takes the contents of the file named infile and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by recipcerts.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_pkcs7_sign
fs: bool openssl_pkcs7_sign ( string $infilename , string $outfilename , mixed $signcert , mixed $privkey , array $headers [, int $flags [, string $extracerts ]] )
fd: openssl_pkcs7_sign() takes the contents of the file named infilename and signs them using the certificate and its matching private key specified by signcert and privkey parameters.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_pkcs7_verify
fs: mixed openssl_pkcs7_verify ( string $filename , int $flags [, string $outfilename [, array $cainfo [, string $extracerts [, string $content ]]]] )
fd: openssl_pkcs7_verify() reads the S/MIME message contained in the given file and examines the digital signature.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_pkey_export
fs: bool openssl_pkey_export ( mixed $key , string &$out [, string $passphrase [, array $configargs ]] )
fd: openssl_pkey_export() exports key as a PEM encoded string and stores it into out (which is passed by reference). 
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_pkey_export_to_file
fs: bool openssl_pkey_export_to_file ( mixed $key , string $outfilename [, string $passphrase [, array $configargs ]] )
fd: openssl_pkey_export_to_file() saves an ascii-armoured (PEM encoded) rendition of key into the file named by outfilename. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_pkey_free
fs: void openssl_pkey_free ( resource $key )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_pkey_get_details
fs: array openssl_pkey_get_details ( resource $key )
fd: This function returns the key details (bits, key, type).
vi: PHP 5 >= 5.2.0
pt: OpenSSL
fn: openssl_pkey_get_private
fs: resource openssl_pkey_get_private ( mixed $key [, string $passphrase ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_pkey_get_public
fs: resource openssl_pkey_get_public ( mixed $certificate )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_pkey_new
fs: resource openssl_pkey_new ([ array $configargs ] )
fd: openssl_pkey_new() generates a new private and public key pair.
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_private_decrypt
fs: bool openssl_private_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding ] )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_private_encrypt
fs: bool openssl_private_encrypt ( string $data , string &$crypted , mixed $key [, int $padding ] )
fd: openssl_private_encrypt() encrypts data with private key and stores the result into crypted.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_public_decrypt
fs: bool openssl_public_decrypt ( string $data , string &$decrypted , mixed $key [, int $padding ] )
fd: 
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_public_encrypt
fs: bool openssl_public_encrypt ( string $data , string &$crypted , mixed $key [, int $padding ] )
fd: openssl_public_encrypt() encrypts data with public key and stores the result into crypted.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_seal
fs: int openssl_seal ( string $data , string &$sealed_data , array &$env_keys , array $pub_key_ids )
fd: openssl_seal() seals (encrypts) data by using RC4 with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in pub_key_ids and each encrypted key is returned in env_keys. This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient's public key.
vi: PHP 4 >= 4.0.4, PHP 5
pt: OpenSSL
fn: openssl_sign
fs: bool openssl_sign ( string $data , string &$signature , mixed $priv_key_id [, int $signature_alg ] )
fd: openssl_sign() computes a signature for the specified data by using SHA1 for hashing followed by encryption using the private key associated with priv_key_id. Note that the data itself is not encrypted.
vi: PHP 4 >= 4.0.4, PHP 5
pt: OpenSSL
fn: openssl_verify
fs: int openssl_verify ( string $data , string $signature , mixed $pub_key_id [, int $signature_alg ] )
fd: openssl_verify() verifies that the signature is correct for the specified data using the public key associated with pub_key_id. This must be the public key corresponding to the private key used for signing.
vi: PHP 4 >= 4.0.4, PHP 5
pt: OpenSSL
fn: openssl_x509_check_private_key
fs: bool openssl_x509_check_private_key ( mixed $cert , mixed $key )
fd: Checks whether the given key is the private key that corresponds to cert.
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_x509_checkpurpose
fs: int openssl_x509_checkpurpose ( mixed $x509cert , int $purpose [, array $cainfo [, string $untrustedfile ]] )
fd: openssl_x509_checkpurpose() examines a certificate to see if it can be used for the specified purpose.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_x509_export
fs: bool openssl_x509_export ( mixed $x509 , string &$output [, bool $notext ] )
fd: openssl_x509_export() stores x509 into a string named by output in a PEM encoded format.
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_x509_export_to_file
fs: bool openssl_x509_export_to_file ( mixed $x509 , string $outfilename [, bool $notext ] )
fd: openssl_x509_export_to_file() stores x509 into a file named by outfilename in a PEM encoded format.
vi: PHP 4 >= 4.2.0, PHP 5
pt: OpenSSL
fn: openssl_x509_free
fs: void openssl_x509_free ( resource $x509cert )
fd: openssl_x509_free() frees the certificate associated with the specified x509cert resource from memory.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_x509_parse
fs: array openssl_x509_parse ( mixed $x509cert [, bool $shortnames ] )
fd: openssl_x509_parse() returns information about the supplied x509cert, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: openssl_x509_read
fs: resource openssl_x509_read ( mixed $x509certdata )
fd: openssl_x509_read() parses the certificate supplied by x509certdata and returns a resource identifier for it.
vi: PHP 4 >= 4.0.6, PHP 5
pt: OpenSSL
fn: ora_bind
fs: bool ora_bind ( resource $cursor , string $phpvar , string $sqlparam , int $length [, int $type ] )
fd: Binds the named PHP variable with a SQL parameter. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_close
fs: bool ora_close ( resource $cursor )
fd: Closes a data cursor.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_columnname
fs: string ora_columnname ( resource $cursor , int $column )
fd: Returns the name of the column on the cursor.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_columnsize
fs: int ora_columnsize ( resource $cursor , int $column )
fd: Returns the size of a column on the cursor.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_columntype
fs: string ora_columntype ( resource $cursor , int $column )
fd: Returns the Oracle data type name of the column on the cursor.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_commit
fs: bool ora_commit ( resource $connection )
fd: Commits an Oracle transaction. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_commitoff
fs: bool ora_commitoff ( resource $connection )
fd: 
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_commiton
fs: bool ora_commiton ( resource $connection )
fd: 
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_do
fs: resource ora_do ( resource $connection , string $query )
fd: Parse and execute a statement, then fetch the first result row. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_error
fs: string ora_error ([ resource $cursor_or_connection ] )
fd: Returns the error message of the last executed statement on the specified cursor or connection.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_errorcode
fs: int ora_errorcode ([ resource $cursor_or_connection ] )
fd: Returns the numeric error code of the last executed statement on the specified cursor or connection.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_exec
fs: bool ora_exec ( resource $cursor )
fd: Executes the parsed statement cursor.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_fetch
fs: bool ora_fetch ( resource $cursor )
fd: Retrieves a row of data from the specified cursor.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_fetch_into
fs: int ora_fetch_into ( resource $cursor , array &$result [, int $flags ] )
fd: Fetches a row of data into an array.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_getcolumn
fs: string ora_getcolumn ( resource $cursor , int $column )
fd: Fetches the data for a column or function result.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_logoff
fs: bool ora_logoff ( resource $connection )
fd: Logs out the user and disconnects from the server.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_logon
fs: resource ora_logon ( string $user , string $password )
fd: Establishes a connection between PHP and an Oracle database. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_numcols
fs: int ora_numcols ( resource $cursor )
fd: Returns the number of columns in a result. It only returns meaningful values after a parse/exec/fetch sequence.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_numrows
fs: int ora_numrows ( resource $cursor )
fd: Returns the number of rows in a result.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_open
fs: resource ora_open ( resource $connection )
fd: Opens an Oracle cursor associated with connection.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_parse
fs: bool ora_parse ( resource $cursor , string $sql_statement [, int $defer ] )
fd: Parses an SQL statement or a PL/SQL block and associates it with the given cursor.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_plogon
fs: resource ora_plogon ( string $user , string $password )
fd: Establishes a persistent connection between PHP and an Oracle database.
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: ora_rollback
fs: bool ora_rollback ( resource $connection )
fd: Rollbacks an Oracle transaction. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: Oracle
fn: orbitenum
fs: new OrbitEnum ( string $id )
fd: 
vi: 
pt: Satellite CORBA client extension
fn: orbitobject
fs: new OrbitObject ( string $ior )
fd: 
vi: 
pt: Satellite CORBA client extension
fn: orbitstruct
fs: new OrbitStruct ( string $id )
fd: 
vi: 
pt: Satellite CORBA client extension
fn: ord
fs: int ord ( string $string )
fd: Returns the ASCII value of the first character of string. 
vi: PHP 4, PHP 5
pt: String
fn: output_add_rewrite_var
fs: bool output_add_rewrite_var ( string $name , string $value )
fd: This function adds another name/value pair to the URL rewrite mechanism.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Output Control
fn: output_reset_rewrite_vars
fs: bool output_reset_rewrite_vars ( void )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Output Control
fn: overload
fs: void overload ( string $class_name )
fd: The overload() function will enable property and method call overloading for a class identified by class_name.
vi: PHP 4 >= 4.2.0
pt: Object property and method call overloading
fn: override_function
fs: bool override_function ( string $function_name , string $function_args , string $function_code )
fd: Overrides built-in functions by replacing them in the symbol table.
vi: PECL apd:0.2-1.0.1
pt: Advanced PHP debugger
fn: ovrimos_close
fs: void ovrimos_close ( int $connection )
fd: Closes the specified connection to Ovrimos. This has the effect of rolling back uncommitted transactions.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_commit
fs: bool ovrimos_commit ( int $connection_id )
fd: Commits the transaction.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_connect
fs: int ovrimos_connect ( string $host , string $dborport , string $user , string $password )
fd: Connects to the specified database.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_cursor
fs: string ovrimos_cursor ( int $result_id )
fd: Gets the name of the cursor. Useful when wishing to perform positioned updates or deletes.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_exec
fs: int ovrimos_exec ( int $connection_id , string $query )
fd: Executes an SQL statement (query or update) and returns a result identifier.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_execute
fs: bool ovrimos_execute ( int $result_id [, array $parameters_array ] )
fd: Executes a prepared statement.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_fetch_into
fs: bool ovrimos_fetch_into ( int $result_id , array &$result_array [, string $how [, int $rownumber ]] )
fd: Fetches a row from the given result set, into result_array.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_fetch_row
fs: bool ovrimos_fetch_row ( int $result_id [, int $how [, int $row_number ]] )
fd: Fetches a row from the result set. Column values should be retrieved with other calls.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_field_len
fs: int ovrimos_field_len ( int $result_id , int $field_number )
fd: Gets the length of the specified output column.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_field_name
fs: string ovrimos_field_name ( int $result_id , int $field_number )
fd: Returns the output column name at the index specified.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_field_num
fs: int ovrimos_field_num ( int $result_id , string $field_name )
fd: Returns the 1-based index of the specified output column.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_field_type
fs: int ovrimos_field_type ( int $result_id , int $field_number )
fd: Returns the type of the output column
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_free_result
fs: bool ovrimos_free_result ( int $result_id )
fd: Frees the specified result identifier.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_longreadlen
fs: bool ovrimos_longreadlen ( int $result_id , int $length )
fd: Specifies how many bytes are to be retrieved from long datatypes (long varchar and long varbinary).
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_num_fields
fs: int ovrimos_num_fields ( int $result_id )
fd: Returns the number of columns in the specified result identifier.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_num_rows
fs: int ovrimos_num_rows ( int $result_id )
fd: Gets the number of rows affected by update operations.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_prepare
fs: int ovrimos_prepare ( int $connection_id , string $query )
fd: Prepares an SQL statement.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_result
fs: string ovrimos_result ( int $result_id , mixed $field )
fd: Retrieves the output column specified by field.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_result_all
fs: int ovrimos_result_all ( int $result_id [, string $format ] )
fd: Prints the whole result set as an HTML table.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: ovrimos_rollback
fs: bool ovrimos_rollback ( int $connection_id )
fd: Rolls back the transaction.
vi: PHP 4 >= 4.0.3, PHP 5 <= 5.0.5
pt: Ovrimos SQL
fn: pack
fs: string pack ( string $format [, mixed $args [, mixed $... ]] )
fd: Pack given arguments into binary string according to format. 
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: parse_ini_file
fs: array parse_ini_file ( string $filename [, bool $process_sections ] )
fd: parse_ini_file() loads in the ini file specified in filename, and returns the settings in it in an associative array. 
vi: PHP 4, PHP 5
pt: Filesystem
fn: parse_str
fs: void parse_str ( string $str [, array &$arr ] )
fd: Parses str as if it were the query string passed via a URL and sets variables in the current scope. 
vi: PHP 4, PHP 5
pt: String
fn: parse_url
fs: mixed parse_url ( string $url [, int $component ] )
fd: This function parses a URL and returns an associative array containing any of the various components of the URL that are present. 
vi: PHP 4, PHP 5
pt: URL
fn: parsekit_compile_file
fs: array parsekit_compile_file ( string $filename [, array &$errors [, int $options ]] )
fd: 
vi: PECL parsekit:0.2-1.2
pt: Parsekit
fn: parsekit_compile_string
fs: array parsekit_compile_string ( string $phpcode [, array &$errors [, int $options ]] )
fd: 
vi: PECL parsekit:0.2-1.2
pt: Parsekit
fn: parsekit_func_arginfo
fs: array parsekit_func_arginfo ( mixed $function )
fd: 
vi: PECL parsekit:0.3-1.2
pt: Parsekit
fn: passthru
fs: void passthru ( string $command [, int &$return_var ] )
fd: 
vi: PHP 4, PHP 5
pt: Program Execution
fn: pathinfo
fs: mixed pathinfo ( string $path [, int $options ] )
fd: pathinfo() returns an associative array containing information about path.
vi: PHP 4 >= 4.0.3, PHP 5
pt: Filesystem
fn: pclose
fs: int pclose ( resource $handle )
fd: 
vi: PHP 4, PHP 5
pt: Filesystem
fn: pcntl_alarm
fs: int pcntl_alarm ( int $seconds )
fd: Creates a timer that will send a SIGALRM signal to the process after the given number of seconds. Any call to pcntl_alarm() will cancel any previously set alarm.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Process Control
fn: pcntl_exec
fs: void pcntl_exec ( string $path [, array $args [, array $envs ]] )
fd: Executes the program with the given arguments.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Process Control
fn: pcntl_fork
fs: int pcntl_fork ( void )
fd: The pcntl_fork() function creates a child process that differs from the parent process only in its PID and PPID. Please see your system's fork(2) man page for specific details as to how fork works on your system.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Process Control
fn: pcntl_getpriority
fs: int pcntl_getpriority ([ int $pid [, int $process_identifier ]] )
fd: pcntl_getpriority() gets the priority of pid. Because priority levels can differ between system types and kernel versions, please see your system's getpriority(2) man page for specific details.
vi: PHP 5
pt: Process Control
fn: pcntl_setpriority
fs: bool pcntl_setpriority ( int $priority [, int $pid [, int $process_identifier ]] )
fd: pcntl_setpriority() sets the priority of pid.
vi: PHP 5
pt: Process Control
fn: pcntl_signal
fs: bool pcntl_signal ( int $signo , callback $handler [, bool $restart_syscalls ] )
fd: The pcntl_signal() function installs a new signal handler for the signal indicated by signo.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Process Control
fn: pcntl_wait
fs: int pcntl_wait ( int &$status [, int $options ] )
fd: The wait function suspends execution of the current process until a child has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function. If a child has already exited by the time of the call (a so-called zombie process), the function returns immediately. Any system resources used by the child are freed. Please see your system's wait(2) man page for specific details as to how wait works on your system. 
vi: PHP 5
pt: Process Control
fn: pcntl_waitpid
fs: int pcntl_waitpid ( int $pid , int &$status [, int $options ] )
fd: Suspends execution of the current process until a child as specified by the pid argument has exited, or until a signal is delivered whose action is to terminate the current process or to call a signal handling function. 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Process Control
fn: pcntl_wexitstatus
fs: int pcntl_wexitstatus ( int $status )
fd: Returns the return code of a terminated child.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Process Control
fn: pcntl_wifexited
fs: bool pcntl_wifexited ( int $status )
fd: Checks whether the child status code represents a normal exit.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Process Control
fn: pcntl_wifsignaled
fs: bool pcntl_wifsignaled ( int $status )
fd: Checks whether the child process exited because of a signal which was not caught.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Process Control
fn: pcntl_wifstopped
fs: bool pcntl_wifstopped ( int $status )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Process Control
fn: pcntl_wstopsig
fs: int pcntl_wstopsig ( int $status )
fd: Returns the number of the signal which caused the child to stop.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Process Control
fn: pcntl_wtermsig
fs: int pcntl_wtermsig ( int $status )
fd: Returns the number of the signal that caused the child process to terminate.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Process Control
fn: pdf_activate_item
fs: bool PDF_activate_item ( resource $pdfdoc , int $id )
fd: Activates a previously created structure element or other content item. Returns TRUE on success or FALSE on failure.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_add_annotation
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_add_bookmark
fs: 
fd: 
vi: PHP 4 >= 4.0.1, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_add_launchlink
fs: bool PDF_add_launchlink ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename )
fd: Adds a link to a web resource. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_add_locallink
fs: bool PDF_add_locallink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , int $page , string $dest )
fd: Add a link annotation to a target within the current PDF file. Returns TRUE on success or FALSE on failure. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_add_nameddest
fs: bool PDF_add_nameddest ( resource $pdfdoc , string $name , string $optlist )
fd: Creates a named destination on an arbitrary page in the current document. Returns TRUE on success or FALSE on failure.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_add_note
fs: bool PDF_add_note ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )
fd: Sets an annotation for the current page. Returns TRUE on success or FALSE on failure. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_add_outline
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_add_pdflink
fs: bool PDF_add_pdflink ( resource $pdfdoc , float $bottom_left_x , float $bottom_left_y , float $up_right_x , float $up_right_y , string $filename , int $page , string $dest )
fd: Add a file link annotation to a PDF target. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_add_table_cell
fs: int PDF_add_table_cell ( resource $pdfdoc , int $table , int $column , int $row , string $text , string $optlist )
fd: Adds a cell to a new or existing table.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_add_textflow
fs: int PDF_add_textflow ( resource $pdfdoc , int $textflow , string $text , string $optlist )
fd: Creates a Textflow object, or adds text and explicit options to an existing Textflow.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_add_thumbnail
fs: bool PDF_add_thumbnail ( resource $pdfdoc , int $image )
fd: Adds an existing image as thumbnail for the current page. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_add_weblink
fs: bool PDF_add_weblink ( resource $pdfdoc , float $lowerleftx , float $lowerlefty , float $upperrightx , float $upperrighty , string $url )
fd: Adds a weblink annotation to a target url on the Web. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_arc
fs: bool PDF_arc ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )
fd: Adds a counterclockwise circular arc.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_arcn
fs: bool PDF_arcn ( resource $p , float $x , float $y , float $r , float $alpha , float $beta )
fd: 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_attach_file
fs: bool PDF_attach_file ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $filename , string $description , string $author , string $mimetype , string $icon )
fd: Adds a file attachment annotation. Returns TRUE on success or FALSE on failure. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_begin_document
fs: int PDF_begin_document ( resource $pdfdoc , string $filename , string $optlist )
fd: Creates a new PDF file subject to various options.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_begin_font
fs: bool PDF_begin_font ( resource $pdfdoc , string $filename , float $a , float $b , float $c , float $d , float $e , float $f , string $optlist )
fd: Starts a Type 3 font definition.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_begin_glyph
fs: bool PDF_begin_glyph ( resource $pdfdoc , string $glyphname , float $wx , float $llx , float $lly , float $urx , float $ury )
fd: Starts a glyph definition for a Type 3 font.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_begin_item
fs: int PDF_begin_item ( resource $pdfdoc , string $tag , string $optlist )
fd: Opens a structure element or other content item with attributes supplied as options.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_begin_layer
fs: bool PDF_begin_layer ( resource $pdfdoc , int $layer )
fd: Starts a layer for subsequent output on the page. Returns TRUE on success or FALSE on failure. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_begin_page
fs: bool PDF_begin_page ( resource $pdfdoc , float $width , float $height )
fd: Adds a new page to the document. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_begin_page_ext
fs: bool PDF_begin_page_ext ( resource $pdfdoc , float $width , float $height , string $optlist )
fd: Adds a new page to the document, and specifies various options. The parameters width and height are the dimensions of the new page in points. Returns TRUE on success or FALSE on failure. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_begin_pattern
fs: int PDF_begin_pattern ( resource $pdfdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )
fd: Starts a new pattern definition.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_begin_template
fs: int PDF_begin_template ( resource $pdfdoc , float $width , float $height )
fd: Starts a new template definition. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_begin_template_ext
fs: int PDF_begin_template_ext ( resource $pdfdoc , float $width , float $height , string $optlist )
fd: Starts a new template definition.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_circle
fs: bool PDF_circle ( resource $pdfdoc , float $x , float $y , float $r )
fd: Adds a circle. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_clip
fs: bool PDF_clip ( resource $p )
fd: Uses the current path as clipping path, and terminate the path. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_close
fs: bool PDF_close ( resource $p )
fd: Closes the generated PDF file, and frees all document-related resources. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_close_image
fs: bool PDF_close_image ( resource $p , int $image )
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_close_pdi
fs: bool PDF_close_pdi ( resource $p , int $doc )
fd: Closes all open page handles, and closes the input PDF document. Returns TRUE on success or FALSE on failure. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_close_pdi_page
fs: bool PDF_close_pdi_page ( resource $p , int $page )
fd: Closes the page handle, and frees all page-related resources. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_closepath
fs: bool PDF_closepath ( resource $p )
fd: Closes the current path. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_closepath_fill_stroke
fs: bool PDF_closepath_fill_stroke ( resource $p )
fd: Closes the path, fills, and strokes it. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_closepath_stroke
fs: bool PDF_closepath_stroke ( resource $p )
fd: Closes the path, and strokes it. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_concat
fs: bool PDF_concat ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )
fd: Concatenates a matrix to the current transformation matrix (CTM). Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_continue_text
fs: bool PDF_continue_text ( resource $p , string $text )
fd: Prints text at the next line. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_create_3dview
fs: int PDF_create_3dview ( resource $pdfdoc , string $username , string $optlist )
fd: Creates a 3D view. 
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_create_action
fs: int PDF_create_action ( resource $pdfdoc , string $type , string $optlist )
fd: Creates an action which can be applied to various objects and events.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_create_annotation
fs: bool PDF_create_annotation ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $type , string $optlist )
fd: Creates a rectangular annotation on the current page.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_create_bookmark
fs: int PDF_create_bookmark ( resource $pdfdoc , string $text , string $optlist )
fd: Creates a bookmark subject to various options.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_create_field
fs: bool PDF_create_field ( resource $pdfdoc , float $llx , float $lly , float $urx , float $ury , string $name , string $type , string $optlist )
fd: Creates a form field on the current page subject to various options.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_create_fieldgroup
fs: bool PDF_create_fieldgroup ( resource $pdfdoc , string $name , string $optlist )
fd: Creates a form field group subject to various options.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_create_gstate
fs: int PDF_create_gstate ( resource $pdfdoc , string $optlist )
fd: Creates a graphics state object subject to various options.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_create_pvf
fs: bool PDF_create_pvf ( resource $pdfdoc , string $filename , string $data , string $optlist )
fd: Creates a named virtual read-only file from data provided in memory.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_create_textflow
fs: int PDF_create_textflow ( resource $pdfdoc , string $text , string $optlist )
fd: Preprocesses text for later formatting and creates a textflow object.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_curveto
fs: bool PDF_curveto ( resource $p , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
fd: Draws a Bezier curve from the current point, using 3 more control points. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_define_layer
fs: int PDF_define_layer ( resource $pdfdoc , string $name , string $optlist )
fd: Creates a new layer definition. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_delete
fs: bool PDF_delete ( resource $pdfdoc )
fd: Deletes a PDFlib object, and frees all internal resources. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_delete_pvf
fs: int PDF_delete_pvf ( resource $pdfdoc , string $filename )
fd: Deletes a named virtual file and frees its data structures (but not the contents).
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_delete_table
fs: bool PDF_delete_table ( resource $pdfdoc , int $table , string $optlist )
fd: Deletes a table and all associated data structures.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_delete_textflow
fs: bool PDF_delete_textflow ( resource $pdfdoc , int $textflow )
fd: Deletes a textflow and the associated data structures.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_encoding_set_char
fs: bool PDF_encoding_set_char ( resource $pdfdoc , string $encoding , int $slot , string $glyphname , int $uv )
fd: Adds a glyph name and/or Unicode value to a custom encoding.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_end_document
fs: bool PDF_end_document ( resource $pdfdoc , string $optlist )
fd: Closes the generated PDF file and applies various options.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_end_font
fs: bool PDF_end_font ( resource $pdfdoc )
fd: Terminates a Type 3 font definition.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_end_glyph
fs: bool PDF_end_glyph ( resource $pdfdoc )
fd: Terminates a glyph definition for a Type 3 font.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_end_item
fs: bool PDF_end_item ( resource $pdfdoc , int $id )
fd: Closes a structure element or other content item.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_end_layer
fs: bool PDF_end_layer ( resource $pdfdoc )
fd: Deactivates all active layers. Returns TRUE on success or FALSE on failure. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_end_page
fs: bool PDF_end_page ( resource $p )
fd: Finishes the page. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_end_page_ext
fs: bool PDF_end_page_ext ( resource $pdfdoc , string $optlist )
fd: Finishes a page, and applies various options. Returns TRUE on success or FALSE on failure.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_end_pattern
fs: bool PDF_end_pattern ( resource $p )
fd: Finishes the pattern definition. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_end_template
fs: bool PDF_end_template ( resource $p )
fd: Finishes a template definition. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_endpath
fs: bool PDF_endpath ( resource $p )
fd: Ends the current path without filling or stroking it.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_fill
fs: bool PDF_fill ( resource $p )
fd: Fills the interior of the current path with the current fill color. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_fill_imageblock
fs: int PDF_fill_imageblock ( resource $pdfdoc , int $page , string $blockname , int $image , string $optlist )
fd: Fills an image block with variable data according to its properties. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_fill_pdfblock
fs: int PDF_fill_pdfblock ( resource $pdfdoc , int $page , string $blockname , int $contents , string $optlist )
fd: Fills a PDF block with variable data according to its properties. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_fill_stroke
fs: bool PDF_fill_stroke ( resource $p )
fd: Fills and strokes the current path with the current fill and stroke color. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_fill_textblock
fs: int PDF_fill_textblock ( resource $pdfdoc , int $page , string $blockname , string $text , string $optlist )
fd: Fills a text block with variable data according to its properties. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_findfont
fs: int PDF_findfont ( resource $p , string $fontname , string $encoding , int $embed )
fd: 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_fit_image
fs: bool PDF_fit_image ( resource $pdfdoc , int $image , float $x , float $y , string $optlist )
fd: Places an image or template on the page, subject to various options. Returns TRUE on success or FALSE on failure.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_fit_pdi_page
fs: bool PDF_fit_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , string $optlist )
fd: Places an imported PDF page on the page, subject to various options. Returns TRUE on success or FALSE on failure.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_fit_table
fs: string PDF_fit_table ( resource $pdfdoc , int $table , float $llx , float $lly , float $urx , float $ury , string $optlist )
fd: Places a table on the page fully or partially.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_fit_textflow
fs: string PDF_fit_textflow ( resource $pdfdoc , int $textflow , float $llx , float $lly , float $urx , float $ury , string $optlist )
fd: Formats the next portion of a textflow into a rectangular area.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_fit_textline
fs: bool PDF_fit_textline ( resource $pdfdoc , string $text , float $x , float $y , string $optlist )
fd: Places a single line of text on the page, subject to various options. Returns TRUE on success or FALSE on failure.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_get_apiname
fs: string PDF_get_apiname ( resource $pdfdoc )
fd: Gets the name of the API function which threw the last exception or failed.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_get_buffer
fs: string PDF_get_buffer ( resource $p )
fd: Fetches the buffer containing the generated PDF data.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_errmsg
fs: string PDF_get_errmsg ( resource $pdfdoc )
fd: Gets the text of the last thrown exception or the reason for a failed function call.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_get_errnum
fs: int PDF_get_errnum ( resource $pdfdoc )
fd: Gets the number of the last thrown exception or the reason for a failed function call.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_get_font
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_fontname
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_fontsize
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_image_height
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_image_width
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_majorversion
fs: int PDF_get_majorversion ( void )
fd: 
vi: PHP 4 >= 4.2.0, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_minorversion
fs: int PDF_get_minorversion ( void )
fd: Returns the minor version number of the PDFlib version. 
vi: PHP 4 >= 4.2.0, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_parameter
fs: string PDF_get_parameter ( resource $p , string $key , float $modifier )
fd: Gets the contents of some PDFlib parameter with string type.
vi: PHP 4 >= 4.0.1, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_pdi_parameter
fs: string PDF_get_pdi_parameter ( resource $p , string $key , int $doc , int $page , int $reserved )
fd: Gets the contents of a PDI document parameter with string type. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_pdi_value
fs: float PDF_get_pdi_value ( resource $p , string $key , int $doc , int $page , int $reserved )
fd: Gets the contents of a PDI document parameter with numerical type. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_get_value
fs: float PDF_get_value ( resource $p , string $key , float $modifier )
fd: Gets the value of some PDFlib parameter with numerical type.
vi: PHP 4 >= 4.0.1, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_info_font
fs: float PDF_info-font ( resource $pdfdoc , int $font , string $keyword , string $optlist )
fd: Queries detailed information about a loaded font.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_info_matchbox
fs: float PDF_info_matchbox ( resource $pdfdoc , string $boxname , int $num , string $keyword )
fd: Queries information about a matchbox on the current page.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_info_table
fs: float PDF_info_table ( resource $pdfdoc , int $table , string $keyword )
fd: Retrieves table information related to the most recently placed table instance.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_info_textflow
fs: float PDF_info_textflow ( resource $pdfdoc , int $textflow , string $keyword )
fd: Queries the current state of a textflow.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_info_textline
fs: float PDF_info_textline ( resource $pdfdoc , string $text , string $keyword , string $optlist )
fd: Performs textline formatting and queries the resulting metrics.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_initgraphics
fs: bool PDF_initgraphics ( resource $p )
fd: Reset all color and graphics state parameters to their defaults. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_lineto
fs: bool PDF_lineto ( resource $p , float $x , float $y )
fd: Draws a line from the current point to another point. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_load_3ddata
fs: int PDF_load_3ddata ( resource $pdfdoc , string $filename , string $optlist )
fd: Loads a 3D model from a disk-based or virtual file. 
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_load_font
fs: int PDF_load_font ( resource $pdfdoc , string $fontname , string $encoding , string $optlist )
fd: Searches for a font and prepares it for later use.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_load_iccprofile
fs: int PDF_load_iccprofile ( resource $pdfdoc , string $profilename , string $optlist )
fd: Searches for an ICC profile, and prepares it for later use.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_load_image
fs: int PDF_load_image ( resource $pdfdoc , string $imagetype , string $filename , string $optlist )
fd: Opens a disk-based or virtual image file subject to various options.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_makespotcolor
fs: int PDF_makespotcolor ( resource $p , string $spotname )
fd: Finds a built-in spot color name, or makes a named spot color from the current fill color. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_moveto
fs: bool PDF_moveto ( resource $p , float $x , float $y )
fd: Sets the current point for graphics output. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_new
fs: resource PDF_new ( $ )
fd: Creates a new PDFlib object with default settings.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_open_ccitt
fs: int PDF_open_ccitt ( resource $pdfdoc , string $filename , int $width , int $height , int $BitReverse , int $k , int $Blackls1 )
fd: Opens a raw CCITT image. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_open_file
fs: bool PDF_open_file ( resource $p , string $filename )
fd: Creates a new PDF file using the supplied file name. Returns TRUE on success or FALSE on failure. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_open_gif
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_open_image
fs: int PDF_open_image ( resource $p , string $imagetype , string $source , string $data , int $length , int $width , int $height , int $components , int $bpc , string $params )
fd: Uses image data from a variety of data sources. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_open_image_file
fs: int PDF_open_image_file ( resource $p , string $imagetype , string $filename , string $stringparam , int $intparam )
fd: Opens an image file. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_open_jpeg
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_open_memory_image
fs: int PDF_open_memory_image ( resource $p , resource $image )
fd: This function is not supported by PDFlib GmbH.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_open_pdi
fs: int PDF_open_pdi ( resource $pdfdoc , string $filename , string $optlist , int $len )
fd: Opens a disk-based or virtual PDF document and prepares it for later use. 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_open_pdi_page
fs: int PDF_open_pdi_page ( resource $p , int $doc , int $pagenumber , string $optlist )
fd: 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_open_tiff
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_pcos_get_number
fs: float PDF_pcos_get_number ( resource $p , int $doc , string $path )
fd: Gets the value of a pCOS path with type number or boolean.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_pcos_get_stream
fs: string PDF_pcos_get_stream ( resource $p , int $doc , string $optlist , string $path )
fd: Gets the contents of a pCOS path with type stream, fstream, or string.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_pcos_get_string
fs: string PDF_pcos_get_string ( resource $p , int $doc , string $path )
fd: Gets the value of a pCOS path with type name, string, or boolean.
vi: PECL pdflib:2.1.0-2.1.3
pt: PDF
fn: pdf_place_image
fs: bool PDF_place_image ( resource $pdfdoc , int $image , float $x , float $y , float $scale )
fd: Places an image and scales it. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_place_pdi_page
fs: bool PDF_place_pdi_page ( resource $pdfdoc , int $page , float $x , float $y , float $sx , float $sy )
fd: Places a PDF page and scales it. Returns TRUE on success or FALSE on failure. 
vi: PHP 4 >= 4.0.6, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_process_pdi
fs: int PDF_process_pdi ( resource $pdfdoc , int $doc , int $page , string $optlist )
fd: Processes certain elements of an imported PDF document.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_rect
fs: bool PDF_rect ( resource $p , float $x , float $y , float $width , float $height )
fd: Draws a rectangle. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_restore
fs: bool PDF_restore ( resource $p )
fd: Restores the most recently saved graphics state. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_resume_page
fs: bool PDF_resume_page ( resource $pdfdoc , string $optlist )
fd: Resumes a page to add more content to it.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_rotate
fs: bool PDF_rotate ( resource $p , float $phi )
fd: Rotates the coordinate system. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_save
fs: bool PDF_save ( resource $p )
fd: Saves the current graphics state. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_scale
fs: bool PDF_scale ( resource $p , float $sx , float $sy )
fd: Scales the coordinate system. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_border_color
fs: bool PDF_set_border_color ( resource $p , float $red , float $green , float $blue )
fd: Sets the border color for all kinds of annotations. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_border_dash
fs: bool PDF_set_border_dash ( resource $pdfdoc , float $black , float $white )
fd: Sets the border dash style for all kinds of annotations. Returns TRUE on success or FALSE on failure. 
vi: PHP 4 >= 4.0.1, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_border_style
fs: bool PDF_set_border_style ( resource $pdfdoc , string $style , float $width )
fd: Sets the border style for all kinds of annotations. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_char_spacing
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_duration
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_gstate
fs: bool PDF_set_gstate ( resource $pdfdoc , int $gstate )
fd: Activates a graphics state object.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_set_horiz_scaling
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_info
fs: bool PDF_set_info ( resource $p , string $key , string $value )
fd: Fill document information field key with value. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.1, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_info_author
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_info_creator
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_info_keywords
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_info_subject
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_info_title
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_layer_dependency
fs: bool PDF_set_layer_dependency ( resource $pdfdoc , string $type , string $optlist )
fd: Defines hierarchical and group relationships among layers. Returns TRUE on success or FALSE on failure. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_set_leading
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_parameter
fs: bool PDF_set_parameter ( resource $p , string $key , string $value )
fd: Sets some PDFlib parameter with string type. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_text_matrix
fs: 
fd: 
vi: PHP 4 <= 4.0.4
pt: PDF
fn: pdf_set_text_pos
fs: bool PDF_set_text_pos ( resource $p , float $x , float $y )
fd: Sets the position for text output on the page. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_text_rendering
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_text_rise
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_value
fs: bool PDF_set_value ( resource $p , string $key , float $value )
fd: Sets the value of some PDFlib parameter with numerical type. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.1, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_set_word_spacing
fs: 
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setcolor
fs: bool PDF_setcolor ( resource $p , string $fstype , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )
fd: Sets the current color space and color. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setdash
fs: bool PDF_setdash ( resource $pdfdoc , float $b , float $w )
fd: Sets the current dash pattern to b black and w white units. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setdashpattern
fs: bool PDF_setdashpattern ( resource $pdfdoc , string $optlist )
fd: Sets a dash pattern defined by an option list. Returns TRUE on success or FALSE on failure.
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_setflat
fs: bool PDF_setflat ( resource $pdfdoc , float $flatness )
fd: Sets the flatness parameter. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setfont
fs: bool PDF_setfont ( resource $pdfdoc , int $font , float $fontsize )
fd: 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setgray
fs: bool PDF_setgray ( resource $p , float $g )
fd: Sets the current fill and stroke color to a gray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setgray_fill
fs: bool PDF_setgray_fill ( resource $p , float $g )
fd: Sets the current fill color to a gray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setgray_stroke
fs: bool PDF_setgray_stroke ( resource $p , float $g )
fd: Sets the current stroke color to a gray value between 0 and 1 inclusive. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setlinecap
fs: bool PDF_setlinecap ( resource $p , int $linecap )
fd: Sets the linecap parameter to control the shape at the end of a path with respect to stroking.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setlinejoin
fs: bool PDF_setlinejoin ( resource $p , int $value )
fd: Sets the linejoin parameter to specify the shape at the corners of paths that are stroked. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setlinewidth
fs: bool PDF_setlinewidth ( resource $p , float $width )
fd: Sets the current line width. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setmatrix
fs: bool PDF_setmatrix ( resource $p , float $a , float $b , float $c , float $d , float $e , float $f )
fd: Explicitly sets the current transformation matrix. Returns TRUE on success or FALSE on failure.
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setmiterlimit
fs: bool PDF_setmiterlimit ( resource $pdfdoc , float $miter )
fd: Sets the miter limit.Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setpolydash
fs: 
fd: 
vi: PHP 4 >= 4.0.5, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setrgbcolor
fs: bool PDF_setrgbcolor ( resource $p , float $red , float $green , float $blue )
fd: Sets the current fill and stroke color to the supplied RGB values. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setrgbcolor_fill
fs: bool PDF_setrgbcolor_fill ( resource $p , float $red , float $green , float $blue )
fd: Sets the current fill color to the supplied RGB values. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_setrgbcolor_stroke
fs: bool PDF_setrgbcolor_stroke ( resource $p , float $red , float $green , float $blue )
fd: Sets the current stroke color to the supplied RGB values. Returns TRUE on success or FALSE on failure. 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_shading
fs: int PDF_shading ( resource $pdfdoc , string $shtype , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist )
fd: Defines a blend from the current fill color to another color. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_shading_pattern
fs: int PDF_shading_pattern ( resource $pdfdoc , int $shading , string $optlist )
fd: Defines a shading pattern using a shading object. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_shfill
fs: bool PDF_shfill ( resource $pdfdoc , int $shading )
fd: Fills an area with a shading, based on a shading object. 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_show
fs: bool PDF_show ( resource $pdfdoc , string $text )
fd: Prints text in the current font and size at the current position. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_show_boxed
fs: int PDF_show_boxed ( resource $p , string $text , float $left , float $top , float $width , float $height , string $mode , string $feature )
fd: 
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_show_xy
fs: bool PDF_show_xy ( resource $p , string $text , float $x , float $y )
fd: Prints text in the current font. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_skew
fs: bool PDF_skew ( resource $p , float $alpha , float $beta )
fd: Skews the coordinate system in x and y direction by alpha and beta degrees. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_stringwidth
fs: float PDF_stringwidth ( resource $p , string $text , int $font , float $fontsize )
fd: Returns the width of text in an arbitrary font.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_stroke
fs: bool PDF_stroke ( resource $p )
fd: Strokes the path with the current color and line width, and clear it. Returns TRUE on success or FALSE on failure.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_suspend_page
fs: bool PDF_suspend_page ( resource $pdfdoc , string $optlist )
fd: 
vi: PECL pdflib:2.0-2.1.3
pt: PDF
fn: pdf_translate
fs: bool PDF_translate ( resource $p , float $tx , float $ty )
fd: Translates the origin of the coordinate system.
vi: PHP 4, PECL pdflib:1.0-2.1.3
pt: PDF
fn: pdf_utf16_to_utf8
fs: string PDF_utf16_to_utf8 ( resource $pdfdoc , string $utf16string )
fd: Converts a string from UTF-16 format to UTF-8.
vi: PECL pdflib:2.0.3-2.1.3
pt: PDF
fn: pdf_utf32_to_utf16
fs: string PDF_utf32_to_utf16 ( resource $pdfdoc , string $utf32string , string $ordering )
fd: Converts a string from UTF-32 format to UTF-16.
vi: 
pt: PDF
fn: pdf_utf8_to_utf16
fs: string PDF_utf8_to_utf16 ( resource $pdfdoc , string $utf8string , string $ordering )
fd: Converts a string from UTF-8 format to UTF-16.
vi: PECL pdflib:2.0.3-2.1.3
pt: PDF
fn: pfpro_cleanup
fs: bool pfpro_cleanup ( void )
fd: Used to shutdown the Payflow Pro library cleanly. 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5
pt: Verisign Payflow Pro
fn: pfpro_init
fs: bool pfpro_init ( void )
fd: Used to initialise the Payflow Pro library. 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5
pt: Verisign Payflow Pro
fn: pfpro_process
fs: array pfpro_process ( array $parameters [, string $address [, int $port [, int $timeout [, string $proxy_address [, int $proxy_port [, string $proxy_logon [, string $proxy_password ]]]]]]] )
fd: pfpro_process() processes a transaction with Payflow Pro. 
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5
pt: Verisign Payflow Pro
fn: pfpro_process_raw
fs: string pfpro_process_raw ( string $parameters [, string $address [, int $port [, int $timeout [, string $proxy_address [, int $proxy_port [, string $proxy_logon [, string $proxy_password ]]]]]]] )
fd: pfpro_process_raw() processes a raw transaction string with Payflow Pro.
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5
pt: Verisign Payflow Pro
fn: pfpro_version
fs: string pfpro_version ( void )
fd: pfpro_version() returns the version string of the Payflow Pro library. At the time of writing, this was L211.
vi: PHP 4 >= 4.0.2, PHP 5 <= 5.0.5
pt: Verisign Payflow Pro
fn: pfsockopen
fs: resource pfsockopen ( string $hostname [, int $port [, int &$errno [, string &$errstr [, float $timeout ]]]] )
fd: 
vi: PHP 4, PHP 5
pt: Network
fn: pg_affected_rows
fs: int pg_affected_rows ( resource $result )
fd: pg_affected_rows() returns the number of tuples (instances/records/rows) affected by INSERT, UPDATE, and DELETE queries. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_cancel_query
fs: bool pg_cancel_query ( resource $connection )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_client_encoding
fs: string pg_client_encoding ([ resource $connection ] )
fd: PostgreSQL supports automatic character set conversion between server and client for certain character sets. pg_client_encoding() returns the client encoding as a string. The returned string will be one of the standard PostgreSQL encoding identifiers. 
vi: PHP 4 >= 4.0.3, PHP 5
pt: PostgreSQL
fn: pg_close
fs: bool pg_close ([ resource $connection ] )
fd: pg_close() closes the non-persistent connection to a PostgreSQL database associated with the given connection resource. 
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_connect
fs: resource pg_connect ( string $connection_string [, int $connect_type ] )
fd: pg_connect() opens a connection to a PostgreSQL database specified by the connection_string. 
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_connection_busy
fs: bool pg_connection_busy ( resource $connection )
fd: pg_connection_busy() determines whether or not a connection is busy. If it is busy, a previous query is still executing.
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_connection_reset
fs: bool pg_connection_reset ( resource $connection )
fd: pg_connection_reset() resets the connection. It is useful for error recovery.
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_connection_status
fs: int pg_connection_status ( resource $connection )
fd: pg_connection_status() returns the status of the specified connection.
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_convert
fs: array pg_convert ( resource $connection , string $table_name , array $assoc_array [, int $options ] )
fd: pg_convert() checks and converts the values in assoc_array into suitable values for use in a SQL statement. Precondition for pg_convert() is the existence of a table table_name which has at least as many columns as assoc_array has elements. The fieldnames in table_name must match the indices in assoc_array and the corresponding datatypes must be compatible. Returns an array with the converted values on success, FALSE otherwise. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_copy_from
fs: bool pg_copy_from ( resource $connection , string $table_name , array $rows [, string $delimiter [, string $null_as ]] )
fd: pg_copy_from() inserts records into a table from rows. It issues a COPY FROM SQL command internally to insert records.
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_copy_to
fs: array pg_copy_to ( resource $connection , string $table_name [, string $delimiter [, string $null_as ]] )
fd: pg_copy_to() copies a table to an array. It issues COPY TO SQL command internally to retrieve records.
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_dbname
fs: string pg_dbname ([ resource $connection ] )
fd: pg_dbname() returns the name of the database that the given PostgreSQL connection resource.
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_delete
fs: mixed pg_delete ( resource $connection , string $table_name , array $assoc_array [, int $options ] )
fd: pg_delete() deletes records from a table specified by the keys and values in assoc_array.
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_end_copy
fs: bool pg_end_copy ([ resource $connection ] )
fd: 
vi: PHP 4 >= 4.0.3, PHP 5
pt: PostgreSQL
fn: pg_escape_bytea
fs: string pg_escape_bytea ([ resource $connection ], string $data )
fd: pg_escape_bytea() escapes string for bytea datatype. It returns escaped string. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_escape_string
fs: string pg_escape_string ([ resource $connection ], string $data )
fd: pg_escape_string() escapes a string for insertion into the database. It returns an escaped string in the PostgreSQL format.
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_execute
fs: resource pg_execute ( resource $connection , string $stmtname , array $params )
fd: 
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_fetch_all
fs: array pg_fetch_all ( resource $result )
fd: pg_fetch_all() returns an array that contains all rows (records) in the result resource. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_fetch_all_columns
fs: array pg_fetch_all_columns ( resource $result [, int $column ] )
fd: pg_fetch_all_columns() returns an array that contains all rows (records) in a particular column of the result resource. 
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_fetch_array
fs: array pg_fetch_array ( resource $result [, int $row [, int $result_type ]] )
fd: pg_fetch_array() returns an array that corresponds to the fetched row (record). 
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_fetch_assoc
fs: array pg_fetch_assoc ( resource $result [, int $row ] )
fd: pg_fetch_assoc() returns an associative array that corresponds to the fetched row (records). 
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_fetch_object
fs: object pg_fetch_object ( resource $result [, int $row [, int $result_type ]] )
fd: 
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_fetch_result
fs: string pg_fetch_result ( resource $result , int $row , mixed $field )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_fetch_row
fs: array pg_fetch_row ( resource $result [, int $row ] )
fd: pg_fetch_row() fetches one row of data from the result associated with the specified result resource. 
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_field_is_null
fs: int pg_field_is_null ( resource $result , int $row , mixed $field )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_field_name
fs: string pg_field_name ( resource $result , int $field_number )
fd: pg_field_name() returns the name of the field occupying the given field_number in the given PostgreSQL result resource. Field numbering starts from 0. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_field_num
fs: int pg_field_num ( resource $result , string $field_name )
fd: pg_field_num() will return the number of the field number that corresponds to the field_name in the given PostgreSQL result resource. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_field_prtlen
fs: int pg_field_prtlen ( resource $result , int $row_number , mixed $field_name_or_number )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_field_size
fs: int pg_field_size ( resource $result , int $field_number )
fd: pg_field_size() returns the internal storage size (in bytes) of the field number in the given PostgreSQL result. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_field_table
fs: mixed pg_field_table ( resource $result , int $field_number [, bool $oid_only ] )
fd: pg_field_table() returns the name of the table that field belongs to, or the table's oid if oid_only is TRUE.
vi: PHP 5 >= 5.2.0
pt: PostgreSQL
fn: pg_field_type
fs: string pg_field_type ( resource $result , int $field_number )
fd: pg_field_type() returns a string containing the base type name of the given field_number in the given PostgreSQL result resource. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_field_type_oid
fs: int pg_field_type_oid ( resource $result , int $field_number )
fd: pg_field_type_oid() returns an integer containing the OID of the base type of the given field_number in the given PostgreSQL result resource. 
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_free_result
fs: bool pg_free_result ( resource $result )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_get_notify
fs: array pg_get_notify ( resource $connection [, int $result_type ] )
fd: pg_get_notify() gets notifications generated by a NOTIFY SQL command. To receive notifications, the LISTEN SQL command must be issued.
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_get_pid
fs: int pg_get_pid ( resource $connection )
fd: pg_get_pid() gets the backend's (database server process) PID.
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_get_result
fs: resource pg_get_result ([ resource $connection ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_host
fs: string pg_host ([ resource $connection ] )
fd: pg_host() returns the host name of the given PostgreSQL connection resource is connected to.
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_insert
fs: mixed pg_insert ( resource $connection , string $table_name , array $assoc_array [, int $options ] )
fd: pg_insert() inserts the values of assoc_array into the table specified by table_name.
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_last_error
fs: string pg_last_error ([ resource $connection ] )
fd: pg_last_error() returns the last error message for a given connection. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_last_notice
fs: string pg_last_notice ( resource $connection )
fd: pg_last_notice() returns the last notice message from the PostgreSQL server on the specified connection. The PostgreSQL server sends notice messages in several cases, for instance when creating a SERIAL column in a table. 
vi: PHP 4 >= 4.0.6, PHP 5
pt: PostgreSQL
fn: pg_last_oid
fs: string pg_last_oid ( resource $result )
fd: pg_last_oid() is used to retrieve the OID assigned to an inserted row. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_close
fs: bool pg_lo_close ( resource $large_object )
fd: pg_lo_close() closes a large object.
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_create
fs: int pg_lo_create ([ resource $connection ] )
fd: pg_lo_create() creates a large object and returns the OID of the large object. PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE are not supported, the object is created always with both read and write access. INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3 and above). 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_export
fs: bool pg_lo_export ( resource $connection , int $oid , string $pathname )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_import
fs: int pg_lo_import ( resource $connection , string $pathname )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_open
fs: resource pg_lo_open ( resource $connection , int $oid , string $mode )
fd: pg_lo_open() opens a large object in the database and returns large object resource so that it can be manipulated. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_read
fs: string pg_lo_read ( resource $large_object [, int $len ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_read_all
fs: int pg_lo_read_all ( resource $large_object )
fd: pg_lo_read_all() reads a large object and passes it straight through to the browser after sending all pending headers. Mainly intended for sending binary data like images or sound. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_seek
fs: bool pg_lo_seek ( resource $large_object , int $offset [, int $whence ] )
fd: pg_lo_seek() seeks a position within a large object resource. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_tell
fs: int pg_lo_tell ( resource $large_object )
fd: pg_lo_tell() returns the current position (offset from the beginning) of a large object. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_unlink
fs: bool pg_lo_unlink ( resource $connection , int $oid )
fd: pg_lo_unlink() deletes a large object with the oid. Returns TRUE on success or FALSE on failure. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_lo_write
fs: int pg_lo_write ( resource $large_object , string $data [, int $len ] )
fd: pg_lo_write() writes data into a large object at the current seek position. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_meta_data
fs: array pg_meta_data ( resource $connection , string $table_name )
fd: pg_meta_data() returns table definition for table_name as an array. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_num_fields
fs: int pg_num_fields ( resource $result )
fd: pg_num_fields() returns the number of fields (columns) in a PostgreSQL result resource. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_num_rows
fs: int pg_num_rows ( resource $result )
fd: pg_num_rows() will return the number of rows in a PostgreSQL result resource. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_options
fs: string pg_options ([ resource $connection ] )
fd: pg_options() will return a string containing the options specified on the given PostgreSQL connection resource.
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_parameter_status
fs: string pg_parameter_status ( resource $connection , string $param_name )
fd: 
vi: PHP 5
pt: PostgreSQL
fn: pg_pconnect
fs: resource pg_pconnect ( string $connection_string [, int $connect_type ] )
fd: pg_pconnect() opens a connection to a PostgreSQL database. It returns a connection resource that is needed by other PostgreSQL functions. 
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_ping
fs: bool pg_ping ([ resource $connection ] )
fd: pg_ping() pings a database connection and tries to reconnect it if it is broken.
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_port
fs: int pg_port ([ resource $connection ] )
fd: pg_port() returns the port number that the given PostgreSQL connection resource is connected to.
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_prepare
fs: resource pg_prepare ( resource $connection , string $stmtname , string $query )
fd: 
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_put_line
fs: bool pg_put_line ( string $data )
fd: 
vi: PHP 4 >= 4.0.3, PHP 5
pt: PostgreSQL
fn: pg_query
fs: resource pg_query ( string $query )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_query_params
fs: resource pg_query_params ( resource $connection , string $query , array $params )
fd: 
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_result_error
fs: string pg_result_error ( resource $result )
fd: pg_result_error() returns any error message associated with the result resource.
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_result_error_field
fs: string pg_result_error_field ( resource $result , int $fieldcode )
fd: pg_result_error_field() returns one of the detailed error message fields associated with result resource. It is only available against a PostgreSQL 7.4 or above server. The error field is specified by the fieldcode. 
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_result_seek
fs: bool pg_result_seek ( resource $result , int $offset )
fd: pg_result_seek() sets the internal row offset in a result resource.
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_result_status
fs: mixed pg_result_status ( resource $result [, int $type ] )
fd: pg_result_status() returns the status of a result resource, or the PostgreSQL command completion tag associated with the result
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_select
fs: mixed pg_select ( resource $connection , string $table_name , array $assoc_array [, int $options ] )
fd: pg_select() selects records specified by assoc_array which has field=>value. For a successful query, it returns an array containing all records and fields that match the condition specified by assoc_array. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_send_execute
fs: bool pg_send_execute ( resource $connection , string $stmtname , array $params )
fd: Sends a request to execute a prepared statement with given parameters, without waiting for the result(s). 
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_send_prepare
fs: bool pg_send_prepare ( resource $connection , string $stmtname , string $query )
fd: Sends a request to create a prepared statement with the given parameters, without waiting for completion. 
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_send_query
fs: bool pg_send_query ( resource $connection , string $query )
fd: pg_send_query() sends a query or queries asynchronously to the connection.
vi: PHP 4 >= 4.2.0, PHP 5
pt: PostgreSQL
fn: pg_send_query_params
fs: bool pg_send_query_params ( resource $connection , string $query , array $params )
fd: Submits a command and separate parameters to the server without waiting for the result(s). 
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_set_client_encoding
fs: int pg_set_client_encoding ( string $encoding )
fd: 
vi: PHP 4 >= 4.0.3, PHP 5
pt: PostgreSQL
fn: pg_set_error_verbosity
fs: int pg_set_error_verbosity ( resource $connection , int $verbosity )
fd: 
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_trace
fs: bool pg_trace ( string $pathname [, string $mode [, resource $connection ]] )
fd: pg_trace() enables tracing of the PostgreSQL frontend/backend communication to a file. To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol. 
vi: PHP 4 >= 4.0.1, PHP 5
pt: PostgreSQL
fn: pg_transaction_status
fs: int pg_transaction_status ( resource $connection )
fd: Returns the current in-transaction status of the server.
vi: PHP 5 >= 5.1.0
pt: PostgreSQL
fn: pg_tty
fs: string pg_tty ([ resource $connection ] )
fd: pg_tty() returns the TTY name that server side debugging output is sent to on the given PostgreSQL connection resource. 
vi: PHP 4, PHP 5
pt: PostgreSQL
fn: pg_unescape_bytea
fs: string pg_unescape_bytea ( string $data )
fd: pg_unescape_bytea() unescapes PostgreSQL bytea data values. It returns the unescaped string, possibly containing binary data. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_untrace
fs: bool pg_untrace ([ resource $connection ] )
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: PostgreSQL
fn: pg_update
fs: mixed pg_update ( resource $connection , string $table_name , array $data , array $condition [, int $options ] )
fd: pg_update() updates records that matches condition with data.
vi: PHP 4 >= 4.3.0, PHP 5
pt: PostgreSQL
fn: pg_version
fs: array pg_version ([ resource $connection ] )
fd: pg_version() returns an array with the client, protocol and server version. Protocol and server versions are only available if PHP was compiled with PostgreSQL 7.4 or later. 
vi: PHP 5
pt: PostgreSQL
fn: phar_apiversion
fs: string Phar::apiVersion ( void )
fd: Return the API version of the phar file format that will be used when creating phars. The Phar extension supports reading API version 1.0.0 or newer.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_cancompress
fs: bool Phar::canCompress ([ int $type ] )
fd: This should be used to test whether compression is possible prior to loading a phar archive containing compressed files.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_canwrite
fs: bool Phar::canWrite ( void )
fd: This method determines whether write access has been disabled in the system php.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_compressallfilesbzip2
fs: bool Phar->compressAllFilesBZIP2 ( void )
fd: This method compresses all files in the Phar archive using bzip2 compression.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_compressallfilesgz
fs: bool Phar->compressAllFilesGZ ( void )
fd: This method compresses all files in the Phar archive using gzip compression.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_construct
fs: void Phar::__construct ( string $fname [, int $flags [, string $alias ]] )
fd: 
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_count
fs: int Phar->count ( void )
fd: 
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_getmetadata
fs: int Phar->getMetaData ( void )
fd: 
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_getmodified
fs: bool Phar->getModified ( void )
fd: This method can be used to determine whether a phar has either had an internal file deleted, or contents of a file changed in some way.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_getsignature
fs: array Phar->getSignature ( void )
fd: Returns the verification signature of a phar archive in a hexadecimal string.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_getstub
fs: string Phar->getStub ( void )
fd: One of the features that differentiates a Phar archive from other familiar archive formats like tar or zip is that a Phar archive is explicitly designed to be included to allow distributing an application or library that can be run without extraction directly from the archive. In order to accomplish this, Phar archives contain a bootstrap loader, or stub written in PHP that can perform any action. 
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_getversion
fs: string Phar->getVersion ( void )
fd: Returns the API version of an opened Phar archive.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_isbuffering
fs: bool Phar->isBuffering ( void )
fd: 
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_loadphar
fs: mixed Phar::loadPhar ( string $filename [, string $alias ] )
fd: This can be used to read the contents of an external Phar archive. This is most useful for assigning an alias to a phar so that subsequent references to the phar can use the shorter alias, or for loading Phar archives that only contain data and are not intended for execution/inclusion in PHP scripts.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_mapphar
fs: mixed Phar::mapPhar ([ string $alias [, int $dataoffset ]] )
fd: This static method can only be used inside a Phar archive's loader stub in order to initialize the phar when it is directly executed, or when it is included in another script.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_offsetexists
fs: bool Phar::offsetExists ( string $offset )
fd: This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a Phar archive using array access brackets. 
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_offsetget
fs: int Phar::offsetGet ( string $offset )
fd: This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a Phar archive using array access brackets. offsetGet is used for retrieving files from a Phar archive.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_offsetset
fs: void Phar::offsetSet ( string $offset , string $value )
fd: This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a Phar archive using array access brackets. offsetSet is used for modifying an existing file, or adding a new file to a Phar archive.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_offsetunset
fs: bool Phar::offsetUnset ( string $offset )
fd: This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a Phar archive using array access brackets.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_setmetadata
fs: void Phar->setMetaData ( mixed $metadata )
fd: setMetaData() should only be used to store customized data that describes something about the phar archive as a complete entity.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_setstub
fs: void Phar->setStub ( string $stub )
fd: This method is used to add a PHP bootstrap loader stub to a new Phar archive, or to replace the loader stub in an existing Phar archive. 
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_startbuffering
fs: void Phar->startBuffering ( void )
fd: Although technically unnecessary, the startBuffering() method can provide a significant performance boost when creating or modifying a Phar archive with a large number of files. Ordinarily, every time a file within a Phar archive is created or modified in any way, the entire Phar archive will be recreated with the changes. In this way, the archive will be up-to-date with the activity performed on it. 
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_stopbuffering
fs: void Phar->stopBuffering ( void )
fd: stopBuffering() is used in conjunction with the startBuffering() method. startBuffering() can provide a significant performance boost when creating or modifying a Phar archive with a large number of files. Ordinarily, every time a file within a Phar archive is created or modified in any way, the entire Phar archive will be recreated with the changes. In this way, the archive will be up-to-date with the activity performed on it. 
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: phar_uncompressallfiles
fs: bool Phar->uncompressAllFiles ( void )
fd: This method decompresses all files in the Phar archive.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_chmod
fs: void PharFileInfo->chmod ( int $permissions )
fd: PharFileInfo->chmod() allows setting of the executable file permissions bit, as well as read-only bits.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_construct
fs: void PharFileInfo::__construct ( string $entry )
fd: This should not be called directly.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_getPharFlags
fs: int PharFileInfo->getPharFlags ( void )
fd: This returns the flags set in the manifest for a Phar. This will always return 0 in the current implementation.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_getcompressedsize
fs: int PharFileInfo->getCompressedSize ( void )
fd: This returns the size of the file within the Phar archive.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_getcrc32
fs: int PharFileInfo->getCRC32 ( void )
fd: 
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_getmetadata
fs: int PharFileInfo->getMetaData ( void )
fd: Return meta-data that was saved in the Phar archive's manifest for this file.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_iscompressed
fs: bool PharFileInfo->isCompressed ( void )
fd: This returns whether a file is compressed within a Phar archive with either Gzip or Bzip2 compression.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_iscompressedbzip2
fs: bool PharFileInfo->isCompressedBZIP2 ( void )
fd: This returns whether a file is compressed within a Phar archive with Bzip2 compression.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_iscompressedgz
fs: bool PharFileInfo->isCompressedGZ ( void )
fd: This returns whether a file is compressed within a Phar archive with Gzip compression.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_iscrcchecked
fs: bool PharFileInfo->isCRCChecked ( void )
fd: This returns whether a file within a Phar archive has had its CRC verified.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_setcompressedbzip2
fs: bool PharFileInfo->setCompressedBZIP2 ( void )
fd: This method compresses the file inside the Phar archive using bzip2 compression.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_setcompressedgz
fs: bool PharFileInfo->setCompressedGZ ( void )
fd: This method compresses the file inside the Phar archive using gzip compression.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_setmetadata
fs: void PharFileInfo->setMetaData ( mixed $metadata )
fd: setMetaData() should only be used to store customized data in a file that cannot be represented with existing information stored with a file. Meta-data can significantly slow down the performance of loading a phar archive if the data is large, or if there are many files containing meta-data.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: pharfileinfo_setuncompressed
fs: bool PharFileInfo->setUncompressed ( void )
fd: This method decompresses the file inside the Phar archive.
vi: PECL phar:1.0.0-1.2.1
pt: Phar archive stream and classes
fn: php_check_syntax
fs: bool php_check_syntax ( string $filename [, string &$error_message ] )
fd: Performs a syntax (lint) check on the specified filename testing for scripting errors. 
vi: PHP 5 <= 5.0.4
pt: Miscellaneous
fn: php_ini_scanned_files
fs: string php_ini_scanned_files ( void )
fd: php_ini_scanned_files() returns a comma-separated list of configuration files parsed after php.ini. These files are found in a directory defined by the --with-config-file-scan-dir option which is set during compilation. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: PHP Options&Information
fn: php_logo_guid
fs: string php_logo_guid ( void )
fd: This function returns the ID which can be used to display the PHP logo using the built-in image.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: php_sapi_name
fs: string php_sapi_name ( void )
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: PHP Options&Information
fn: php_strip_whitespace
fs: string php_strip_whitespace ( string $filename )
fd: Returns the PHP source code in filename with PHP comments and whitespace removed. This may be useful for determining the amount of actual code in your scripts compared with the amount of comments.
vi: PHP 5
pt: Miscellaneous
fn: php_uname
fs: string php_uname ([ string $mode ] )
fd: php_uname() returns a description of the operating system PHP is running on. For the name of just the operating system, consider using the PHP_OS constant, but be reminded this constant will contain the operating system PHP was built on. 
vi: PHP 4 >= 4.0.2, PHP 5
pt: PHP Options&Information
fn: phpcredits
fs: bool phpcredits ([ int $flag ] )
fd: This function prints out the credits listing the PHP developers, modules, etc. It generates the appropriate HTML codes to insert the information in a page.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: phpinfo
fs: bool phpinfo ([ int $what ] )
fd: Outputs a large amount of information about the current state of PHP. This includes information about PHP compilation options and extensions, the PHP version, server information and environment (if compiled as a module), the PHP environment, OS version information, paths, master and local values of configuration options, HTTP headers, and the PHP License. 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: phpversion
fs: string phpversion ([ string $extension ] )
fd: Returns a string containing the version of the currently running PHP parser or extension.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: pi
fs: float pi ( void )
fd: 
vi: PHP 4, PHP 5
pt: Mathematical
fn: png2wbmp
fs: bool png2wbmp ( string $pngname , string $wbmpname , int $dest_height , int $dest_width , int $threshold )
fd: Converts a PNG file into a WBMP file.
vi: PHP 4 >= 4.0.5, PHP 5
pt: Image
fn: popen
fs: resource popen ( string $command , string $mode )
fd: Opens a pipe to a process executed by forking the command given by command.
vi: PHP 4, PHP 5
pt: Filesystem
fn: pos
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: posix_access
fs: bool posix_access ( string $file [, int $mode ] )
fd: posix_access() checks the user's permission of a file.
vi: PHP 5 >= 5.1.0
pt: POSIX
fn: posix_ctermid
fs: string posix_ctermid ( void )
fd: 
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_get_last_error
fs: int posix_get_last_error ( void )
fd: Retrieve the error number set by the last posix function that failed.
vi: PHP 4 >= 4.2.0, PHP 5
pt: POSIX
fn: posix_getcwd
fs: string posix_getcwd ( void )
fd: Gets the absolute pathname of the script's current working directory.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getegid
fs: int posix_getegid ( void )
fd: Return the numeric effective group ID of the current process.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_geteuid
fs: int posix_geteuid ( void )
fd: Return the numeric effective user ID of the current process.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getgid
fs: int posix_getgid ( void )
fd: Return the numeric real group ID of the current process.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getgrgid
fs: array posix_getgrgid ( int $gid )
fd: Gets information about a group provided its id.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getgrnam
fs: array posix_getgrnam ( string $name )
fd: Gets information about a group provided its name.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getgroups
fs: array posix_getgroups ( void )
fd: Gets the group set of the current process.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getlogin
fs: string posix_getlogin ( void )
fd: Returns the login name of the user owning the current process.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getpgid
fs: int posix_getpgid ( int $pid )
fd: Returns the process group identifier of the process pid.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getpgrp
fs: int posix_getpgrp ( void )
fd: Return the process group identifier of the current process.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getpid
fs: int posix_getpid ( void )
fd: Return the process identifier of the current process.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getppid
fs: int posix_getppid ( void )
fd: Return the process identifier of the parent process of the current process.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getpwnam
fs: array posix_getpwnam ( string $username )
fd: 
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getpwuid
fs: array posix_getpwuid ( int $uid )
fd: 
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getrlimit
fs: array posix_getrlimit ( void )
fd: 
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getsid
fs: int posix_getsid ( int $pid )
fd: Return the session id of the process pid. The session id of a process is the process group id of the session leader.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_getuid
fs: int posix_getuid ( void )
fd: Return the numeric real user ID of the current process.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_initgroups
fs: bool posix_initgroups ( string $name , int $base_group_id )
fd: Calculates the group access list for the user specified in name.
vi: PHP 5 >= 5.2.0
pt: POSIX
fn: posix_isatty
fs: bool posix_isatty ( int $fd )
fd: Determines if the file descriptor fd refers to a valid terminal type device.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_kill
fs: bool posix_kill ( int $pid , int $sig )
fd: Send the signal sig to the process with the process identifier pid.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_mkfifo
fs: bool posix_mkfifo ( string $pathname , int $mode )
fd: posix_mkfifo() creates a special FIFO file which exists in the file system and acts as a bidirectional communication endpoint for processes.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_mknod
fs: bool posix_mknod ( string $pathname , int $mode [, int $major [, int $minor ]] )
fd: Creates a special or ordinary file.
vi: PHP 5 >= 5.1.0
pt: POSIX
fn: posix_setegid
fs: bool posix_setegid ( int $gid )
fd: Set the effective group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.
vi: PHP 4 >= 4.0.2, PHP 5
pt: POSIX
fn: posix_seteuid
fs: bool posix_seteuid ( int $uid )
fd: Set the real user ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.
vi: PHP 4 >= 4.0.2, PHP 5
pt: POSIX
fn: posix_setgid
fs: bool posix_setgid ( int $gid )
fd: Set the real group ID of the current process. This is a privileged function and needs appropriate privileges (usually root) on the system to be able to perform this function.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_setpgid
fs: bool posix_setpgid ( int $pid , int $pgid )
fd: Let the process pid join the process group pgid.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_setsid
fs: int posix_setsid ( void )
fd: Make the current process a session leader.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_setuid
fs: bool posix_setuid ( int $uid )
fd: Set the real user ID of the current process. This is a privileged function that needs appropriate privileges (usually root) on the system to be able to perform this function.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_strerror
fs: string posix_strerror ( int $errno )
fd: Returns the POSIX system error message associated with the given errno.
vi: PHP 4 >= 4.2.0, PHP 5
pt: POSIX
fn: posix_times
fs: array posix_times ( void )
fd: Gets information about the current CPU usage.
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_ttyname
fs: string posix_ttyname ( int $fd )
fd: 
vi: PHP 4, PHP 5
pt: POSIX
fn: posix_uname
fs: array posix_uname ( void )
fd: Gets information about the system. 
vi: PHP 4, PHP 5
pt: POSIX
fn: pow
fs: number pow ( number $base , number $exp )
fd: Returns base raised to the power of exp. 
vi: PHP 4, PHP 5
pt: Mathematical
fn: preg_grep
fs: array preg_grep ( string $pattern , array $input [, int $flags ] )
fd: Returns the array consisting of the elements of the input array that match the given pattern.
vi: PHP 4, PHP 5
pt: Regular Expression (Perl-Compatible)
fn: preg_last_error
fs: int preg_last_error ( void )
fd: Returns the error code of the last PCRE regex execution.
vi: PHP 5 >= 5.2.0
pt: Regular Expression (Perl-Compatible)
fn: preg_match
fs: int preg_match ( string $pattern , string $subject [, array &$matches [, int $flags [, int $offset ]]] )
fd: Searches subject for a match to the regular expression given in pattern.
vi: PHP 4, PHP 5
pt: Regular Expression (Perl-Compatible)
fn: preg_match_all
fs: int preg_match_all ( string $pattern , string $subject , array &$matches [, int $flags [, int $offset ]] )
fd: Searches subject for all matches to the regular expression given in pattern and puts them in matches in the order specified by flags. 
vi: PHP 4, PHP 5
pt: Regular Expression (Perl-Compatible)
fn: preg_quote
fs: string preg_quote ( string $str [, string $delimiter ] )
fd: preg_quote() takes str and puts a backslash in front of every character that is part of the regular expression syntax. This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters. 
vi: PHP 4, PHP 5
pt: Regular Expression (Perl-Compatible)
fn: preg_replace
fs: mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit [, int &$count ]] )
fd: Searches subject for matches to pattern and replaces them with replacement.
vi: PHP 4, PHP 5
pt: Regular Expression (Perl-Compatible)
fn: preg_replace_callback
fs: mixed preg_replace_callback ( mixed $pattern , callback $callback , mixed $subject [, int $limit [, int &$count ]] )
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: Regular Expression (Perl-Compatible)
fn: preg_split
fs: array preg_split ( string $pattern , string $subject [, int $limit [, int $flags ]] )
fd: Split the given string by a regular expression.
vi: PHP 4, PHP 5
pt: Regular Expression (Perl-Compatible)
fn: prev
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: print
fs: int print ( string $arg )
fd: Outputs arg. 
vi: PHP 4, PHP 5
pt: String
fn: print_r
fs: mixed print_r ( mixed $expression [, bool $return ] )
fd: print_r() displays information about a variable in a way that's readable by humans. 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: printer_abort
fs: void printer_abort ( resource $printer_handle )
fd: This function deletes the printers spool file.
vi: 
pt: Printer
fn: printer_close
fs: void printer_close ( resource $printer_handle )
fd: This function closes the printer connection. printer_close() also closes the active device context.
vi: 
pt: Printer
fn: printer_create_brush
fs: resource printer_create_brush ( int $style , string $color )
fd: The function creates a new brush and returns a handle to it. A brush is used to fill shapes.
vi: 
pt: Printer
fn: printer_create_dc
fs: void printer_create_dc ( resource $printer_handle )
fd: The function creates a new device context. A device context is used to customize the graphic objects of the document.
vi: 
pt: Printer
fn: printer_create_font
fs: resource printer_create_font ( string $face , int $height , int $width , int $font_weight , bool $italic , bool $underline , bool $strikeout , int $orientation )
fd: The function creates a new font and returns a handle to it. A font is used to draw text.
vi: 
pt: Printer
fn: printer_create_pen
fs: resource printer_create_pen ( int $style , int $width , string $color )
fd: The function creates a new pen and returns a handle to it. A pen is used to draw lines and curves.
vi: 
pt: Printer
fn: printer_delete_brush
fs: void printer_delete_brush ( resource $brush_handle )
fd: The function deletes the selected brush.
vi: 
pt: Printer
fn: printer_delete_dc
fs: bool printer_delete_dc ( resource $printer_handle )
fd: The function deletes the device context.
vi: 
pt: Printer
fn: printer_delete_font
fs: void printer_delete_font ( resource $font_handle )
fd: The function deletes the selected font.
vi: 
pt: Printer
fn: printer_delete_pen
fs: void printer_delete_pen ( resource $pen_handle )
fd: The function deletes the selected pen.
vi: 
pt: Printer
fn: printer_draw_bmp
fs: bool printer_draw_bmp ( resource $printer_handle , string $filename , int $x , int $y [, int $width ], int $height )
fd: The function draws an bmp.
vi: 
pt: Printer
fn: printer_draw_chord
fs: void printer_draw_chord ( resource $printer_handle , int $rec_x , int $rec_y , int $rec_x1 , int $rec_y1 , int $rad_x , int $rad_y , int $rad_x1 , int $rad_y1 )
fd: The function simply draws an chord.
vi: 
pt: Printer
fn: printer_draw_elipse
fs: void printer_draw_elipse ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y )
fd: The function draws an ellipse.
vi: 
pt: Printer
fn: printer_draw_line
fs: void printer_draw_line ( resource $printer_handle , int $from_x , int $from_y , int $to_x , int $to_y )
fd: The function draws a line using the selected pen.
vi: 
pt: Printer
fn: printer_draw_pie
fs: void printer_draw_pie ( resource $printer_handle , int $rec_x , int $rec_y , int $rec_x1 , int $rec_y1 , int $rad1_x , int $rad1_y , int $rad2_x , int $rad2_y )
fd: The function draws an pie.
vi: 
pt: Printer
fn: printer_draw_rectangle
fs: void printer_draw_rectangle ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y )
fd: The function draws a rectangle.
vi: 
pt: Printer
fn: printer_draw_roundrect
fs: void printer_draw_roundrect ( resource $printer_handle , int $ul_x , int $ul_y , int $lr_x , int $lr_y , int $width , int $height )
fd: The function draws a rectangle with rounded corners.
vi: 
pt: Printer
fn: printer_draw_text
fs: void printer_draw_text ( resource $printer_handle , string $text , int $x , int $y )
fd: The function draws text at position x, y using the selected font.
vi: 
pt: Printer
fn: printer_end_doc
fs: bool printer_end_doc ( resource $printer_handle )
fd: Closes a new document in the printer spooler. The document is now ready for printing.
vi: 
pt: Printer
fn: printer_end_page
fs: bool printer_end_page ( resource $printer_handle )
fd: The function closes the active page in the active document.
vi: 
pt: Printer
fn: printer_get_option
fs: mixed printer_get_option ( resource $printer_handle , string $option )
fd: The function retrieves the configuration setting of option.
vi: 
pt: Printer
fn: printer_list
fs: array printer_list ( int $enumtype [, string $name [, int $level ]] )
fd: The function enumerates available printers and their capabilities.
vi: 
pt: Printer
fn: printer_logical_fontheight
fs: int printer_logical_fontheight ( resource $printer_handle , int $height )
fd: The function calculates the logical font height of height.
vi: 
pt: Printer
fn: printer_open
fs: resource printer_open ([ string $printername ] )
fd: This function tries to open a connection to the given printer. 
vi: 
pt: Printer
fn: printer_select_brush
fs: void printer_select_brush ( resource $printer_handle , resource $brush_handle )
fd: The function selects a brush as the active drawing object of the actual device context. A brush is used to fill shapes. If you draw an rectangle the brush is used to draw the shapes, while the pen is used to draw the border. 
vi: 
pt: Printer
fn: printer_select_font
fs: void printer_select_font ( resource $printer_handle , resource $font_handle )
fd: The function selects a font to draw text.
vi: 
pt: Printer
fn: printer_select_pen
fs: void printer_select_pen ( resource $printer_handle , resource $pen_handle )
fd: The function selects a pen as the active drawing object of the actual device context. A pen is used to draw lines and curves. I.e. if you draw a single line the pen is used. If you draw an rectangle the pen is used to draw the borders, while the brush is used to fill the shape. If you haven't selected a pen before drawing shapes, the shape won't be outlined.
vi: 
pt: Printer
fn: printer_set_option
fs: bool printer_set_option ( resource $printer_handle , int $option , mixed $value )
fd: The function sets options for the current connection.
vi: 
pt: Printer
fn: printer_start_doc
fs: bool printer_start_doc ( resource $printer_handle [, string $document ] )
fd: The function creates a new document in the printer spooler. A document can contain multiple pages, it's used to schedule the print job in the spooler.
vi: 
pt: Printer
fn: printer_start_page
fs: bool printer_start_page ( resource $printer_handle )
fd: The function creates a new page in the active document.
vi: 
pt: Printer
fn: printer_write
fs: bool printer_write ( resource $printer_handle , string $content )
fd: Writes content directly to the printer.
vi: 
pt: Printer
fn: printf
fs: int printf ( string $format [, mixed $args [, mixed $... ]] )
fd: 
vi: PHP 4, PHP 5
pt: String
fn: proc_close
fs: int proc_close ( resource $process )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Program Execution
fn: proc_get_status
fs: array proc_get_status ( resource $process )
fd: 
vi: PHP 5
pt: Program Execution
fn: proc_nice
fs: bool proc_nice ( int $increment )
fd: proc_nice() changes the priority of the current process by the amount specified in increment. A positive increment will lower the priority of the current process, whereas a negative increment will raise the priority. 
vi: PHP 5
pt: Program Execution
fn: proc_open
fs: resource proc_open ( string $cmd , array $descriptorspec , array &$pipes [, string $cwd [, array $env [, array $other_options ]]] )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Program Execution
fn: proc_terminate
fs: bool proc_terminate ( resource $process [, int $signal ] )
fd: 
vi: PHP 5
pt: Program Execution
fn: property_exists
fs: bool property_exists ( mixed $class , string $property )
fd: This function checks if the given property exists in the specified class (and if it is accessible from the current scope). 
vi: PHP 5 >= 5.1.0
pt: Class/Object
fn: ps_add_bookmark
fs: int ps_add_bookmark ( resource $psdoc , string $text [, int $parent [, int $open ]] )
fd: Adds a bookmark for the current page. Bookmarks usually appear in PDF-Viewers left of the page in a hierarchical tree. Clicking on a bookmark will jump to the given page. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_add_launchlink
fs: bool ps_add_launchlink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename )
fd: Places a hyperlink at the given position pointing to a file program which is being started when clicked on. The hyperlink's source position is a rectangle with its lower left corner at (llx, lly) and its upper right corner at (urx, ury). The rectangle has by default a thin blue border. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_add_locallink
fs: bool ps_add_locallink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , int $page , string $dest )
fd: Places a hyperlink at the given position pointing to a page in the same document. Clicking on the link will jump to the given page. The first page in a document has number 1. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_add_note
fs: bool ps_add_note ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $contents , string $title , string $icon , int $open )
fd: Adds a note at a certain position on the page. Notes are like little rectangular sheets with text on it, which can be placed anywhere on a page. They are shown either folded or unfolded. If unfolded, the specified icon is used as a placeholder. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_add_pdflink
fs: bool ps_add_pdflink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $filename , int $page , string $dest )
fd: Places a hyperlink at the given position pointing to a second pdf document. Clicking on the link will branch to the document at the given page. The first page in a document has number 1. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_add_weblink
fs: bool ps_add_weblink ( resource $psdoc , float $llx , float $lly , float $urx , float $ury , string $url )
fd: Places a hyperlink at the given position pointing to a web page. The hyperlink's source position is a rectangle with its lower left corner at (llx, lly) and its upper right corner at (urx, ury). The rectangle has by default a thin blue border. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_arc
fs: bool ps_arc ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta )
fd: Draws a portion of a circle with at middle point at (x, y). The arc starts at an angle of alpha and ends at an angle of beta.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_arcn
fs: bool ps_arcn ( resource $psdoc , float $x , float $y , float $radius , float $alpha , float $beta )
fd: Draws a portion of a circle with at middle point at (x, y). The arc starts at an angle of alpha and ends at an angle of beta.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_begin_page
fs: bool ps_begin_page ( resource $psdoc , float $width , float $height )
fd: Starts a new page. Although the parameters width and height imply a different page size for each page, this is not possible in PostScript. The first call of ps_begin_page() will set the page size for the whole document. Consecutive calls will have no effect, except for creating a new page. The situation is different if you intent to convert the PostScript document into PDF. This function places pdfmarks into the document which can set the size for each page indiviually. The resulting PDF document will have different page sizes. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_begin_pattern
fs: int ps_begin_pattern ( resource $psdoc , float $width , float $height , float $xstep , float $ystep , int $painttype )
fd: Starts a new pattern. A pattern is like a page containing e.g. a drawing which can be used for filling areas.
vi: PECL ps:1.2.0-1.3.5
pt: PostScript document creation
fn: ps_begin_template
fs: int ps_begin_template ( resource $psdoc , float $width , float $height )
fd: Starts a new template. A template is called a form in the postscript language. It is created similar to a pattern but used like an image. Templates are often used for drawings which are placed several times through out the document, e.g. like a company logo. All drawing functions may be used within a template.
vi: PECL ps:1.2.0-1.3.5
pt: PostScript document creation
fn: ps_circle
fs: bool ps_circle ( resource $psdoc , float $x , float $y , float $radius )
fd: Draws a circle with its middle point at (x, y). The circle starts and ends at position (x+radius, y). If this function is called outside a path it will start a new path. If it is called within a path it will add the circle as a subpath. If the last drawing operation does not end in point (x+radius, y) then there will be a gap in the path.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_clip
fs: bool ps_clip ( resource $psdoc )
fd: Takes the current path and uses it to define the border of a clipping area. Everything drawn outside of that area will not be visible.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_close
fs: bool ps_close ( resource $psdoc )
fd: Closes the PostScript document. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_close_image
fs: void ps_close_image ( resource $psdoc , int $imageid )
fd: Closes an image and frees its resources. Once an image is closed it cannot be used anymore.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_closepath
fs: bool ps_closepath ( resource $psdoc )
fd: Connects the last point with the first point of a path. The resulting path can be used for stroking, filling, clipping, etc..
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_closepath_stroke
fs: bool ps_closepath_stroke ( resource $psdoc )
fd: Connects the last point with first point of a path and draws the resulting closed line.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_continue_text
fs: bool ps_continue_text ( resource $psdoc , string $text )
fd: Output a text one line below the last line.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_curveto
fs: bool ps_curveto ( resource $psdoc , float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
fd: Add a section of a cubic Bézier curve described by the three given control points to the current path.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_delete
fs: bool ps_delete ( resource $psdoc )
fd: Mainly frees memory used by the document.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_end_page
fs: bool ps_end_page ( resource $psdoc )
fd: 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_end_pattern
fs: bool ps_end_pattern ( resource $psdoc )
fd: 
vi: PECL ps:1.2.0-1.3.5
pt: PostScript document creation
fn: ps_end_template
fs: bool ps_end_template ( resource $psdoc )
fd: 
vi: PECL ps:1.2.0-1.3.5
pt: PostScript document creation
fn: ps_fill
fs: bool ps_fill ( resource $psdoc )
fd: 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_fill_stroke
fs: bool ps_fill_stroke ( resource $psdoc )
fd: 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_findfont
fs: int ps_findfont ( resource $psdoc , string $fontname , string $encoding [, bool $embed ] )
fd: Loads a font for later use.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_get_buffer
fs: string ps_get_buffer ( resource $psdoc )
fd: This function is not implemented yet. It will always return an empty string. The idea for a later implementation is to write the contents of the postscript file into an internal buffer if in memory creation is requested, and retrieve the buffer content with this function. Currently, documents created in memory are send to the browser without buffering. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_get_parameter
fs: string ps_get_parameter ( resource $psdoc , string $name [, float $modifier ] )
fd: 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_get_value
fs: float ps_get_value ( resource $psdoc , string $name [, float $modifier ] )
fd: 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_hyphenate
fs: array ps_hyphenate ( resource $psdoc , string $text )
fd: Hyphenates the passed word.
vi: PECL ps:1.1.1-1.3.5
pt: PostScript document creation
fn: ps_include_file
fs: 
fd: 
vi: 
pt: 
fn: ps_lineto
fs: bool ps_lineto ( resource $psdoc , float $x , float $y )
fd: Adds a straight line from the current point to the given coordinates to the current path.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_makespotcolor
fs: int ps_makespotcolor ( resource $psdoc , string $name [, float $reserved ] )
fd: Creates a spot color from the current fill color. The fill color must be defined in rgb, cmyk or gray colorspace. The spot color name can be an arbitrary name.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_moveto
fs: bool ps_moveto ( resource $psdoc , float $x , float $y )
fd: Sets the current point to new coordinates. If this is the first call of ps_moveto() after a previous path has been ended then it will start a new path. If this function is called in the middle of a path it will just set the current point and start a subpath.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_new
fs: resource ps_new ( void )
fd: Creates a new document instance. It does not create the file on disk or in memory, it just sets up everything.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_open_file
fs: bool ps_open_file ( resource $psdoc [, string $filename ] )
fd: Creates a new file on disk and writes the PostScript document into it.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_open_image
fs: int ps_open_image ( resource $psdoc , string $type , string $source , string $data , int $lenght , int $width , int $height , int $components , int $bpc , string $params )
fd: Reads an image which is already available in memory. The parameter source is currently not evaluated and assumed to be memory. The image data is a sequence of pixels starting in th upper left corner and ending in the lower right corner. Each pixel consists of components color components, and each component has bpc bits.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_open_image_file
fs: int ps_open_image_file ( resource $psdoc , string $type , string $filename [, string $stringparam [, int $intparam ]] )
fd: Loads an image for later use.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_open_memory_image
fs: 
fd: 
vi: 
pt: 
fn: ps_place_image
fs: bool ps_place_image ( resource $psdoc , int $imageid , float $x , float $y , float $scale )
fd: Places a formerly loaded image on the page. The image can be scaled.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_rect
fs: bool ps_rect ( resource $psdoc , float $x , float $y , float $width , float $height )
fd: Draws a rectangle with its lower left corner at (x, y). The rectangle starts and ends in its lower left corner. If this function is called outside a path it will start a new path. If it is called within a path it will add the rectangle as a subpath. If the last drawing operation does not end in the lower left corner then there will be a gap in the path.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_restore
fs: bool ps_restore ( resource $psdoc )
fd: Restores a previously saved graphics context.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_rotate
fs: bool ps_rotate ( resource $psdoc , float $rot )
fd: Sets the rotation of the coordinate system.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_save
fs: bool ps_save ( resource $psdoc )
fd: Saves the current graphics context, containing colors, translation and rotation settings and some more.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_scale
fs: bool ps_scale ( resource $psdoc , float $x , float $y )
fd: Sets horizontal and vertical scaling of the coordinate system.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_set_border_color
fs: bool ps_set_border_color ( resource $psdoc , float $red , float $green , float $blue )
fd: 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_set_border_dash
fs: bool ps_set_border_dash ( resource $psdoc , float $black , float $white )
fd: 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_set_border_style
fs: bool ps_set_border_style ( resource $psdoc , string $style , float $width )
fd: 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_set_info
fs: bool ps_set_info ( resource $p , string $key , string $val )
fd: Sets certain information fields of the document. This fields will be shown as a comment in the header of the PostScript file. If the document is converted to pdf this fields will also be used for the document information. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_set_parameter
fs: bool ps_set_parameter ( resource $psdoc , string $name , string $value )
fd: Sets several parameters which are used by many functions. Parameters are by definition string values.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_set_text_pos
fs: bool ps_set_text_pos ( resource $psdoc , float $x , float $y )
fd: Set the position for the next text output.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_set_value
fs: bool ps_set_value ( resource $psdoc , string $name , float $value )
fd: Sets several values which are used by many functions. Parameters are by definition float values.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_setcolor
fs: bool ps_setcolor ( resource $psdoc , string $type , string $colorspace , float $c1 , float $c2 , float $c3 , float $c4 )
fd: Sets the color for drawing, filling, or both.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_setdash
fs: bool ps_setdash ( resource $psdoc , float $on , float $off )
fd: Sets the length of the black and white portions of a dashed line.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_setflat
fs: 
fd: 
vi: 
pt: 
fn: ps_setfont
fs: bool ps_setfont ( resource $psdoc , int $fontid , float $size )
fd: 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_setgray
fs: bool ps_setgray ( resource $psdoc , float $gray )
fd: Sets the gray value for all following drawing operations.
vi: PECL ps:1.1.0-1.1.1
pt: PostScript document creation
fn: ps_setlinecap
fs: bool ps_setlinecap ( resource $psdoc , int $type )
fd: Sets how line ends look like.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_setlinejoin
fs: bool ps_setlinejoin ( resource $psdoc , int $type )
fd: Sets how lines are joined.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_setlinewidth
fs: bool ps_setlinewidth ( resource $psdoc , float $width )
fd: Sets the line width for all following drawing operations.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_setmiterlimit
fs: bool ps_setmiterlimit ( resource $psdoc , float $value )
fd: If two lines join in a small angle and the line join is set to PS_LINEJOIN_MITER, then the resulting spike will be very long. The miter limit is the maximum ratio of the miter length (the length of the spike) and the line width.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_setoverprintmode
fs: 
fd: 
vi: 
pt: 
fn: ps_setpolydash
fs: bool ps_setpolydash ( resource $psdoc , float $arr )
fd: Sets the length of the black and white portions of a dashed line. ps_setpolydash() is used to set more complicated dash patterns.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_shading
fs: int ps_shading ( resource $psdoc , string $type , float $x0 , float $y0 , float $x1 , float $y1 , float $c1 , float $c2 , float $c3 , float $c4 , string $optlist )
fd: 
vi: PECL ps:1.3.0-1.3.5
pt: PostScript document creation
fn: ps_shading_pattern
fs: int ps_shading_pattern ( resource $psdoc , int $shadingid , string $optlist )
fd: 
vi: PECL ps:1.3.0-1.3.5
pt: PostScript document creation
fn: ps_shfill
fs: bool ps_shfill ( resource $psdoc , int $shadingid )
fd: 
vi: PECL ps:1.3.0-1.3.5
pt: PostScript document creation
fn: ps_show
fs: bool ps_show ( resource $psdoc , string $text )
fd: Output a text at the current text position.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_show2
fs: 
fd: 
vi: 
pt: 
fn: ps_show_boxed
fs: int ps_show_boxed ( resource $psdoc , string $text , float $left , float $bottom , float $width , float $height , string $hmode [, string $feature ] )
fd: Outputs a text in a given box. The lower left corner of the box is at (left, bottom). Line breaks will be inserted where needed. Multiple spaces are treated as one. Tabulators are treated as spaces. 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_show_xy
fs: bool ps_show_xy ( resource $psdoc , string $text , float $x , float $y )
fd: Output a text at the given text position.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_show_xy2
fs: 
fd: 
vi: 
pt: 
fn: ps_string_geometry
fs: array ps_string_geometry ( resource $psdoc , string $text [, int $fontid [, float $size ]] )
fd: 
vi: PECL ps:1.2.0-1.3.5
pt: PostScript document creation
fn: ps_stringwidth
fs: float ps_stringwidth ( resource $psdoc , string $text [, int $fontid [, float $size ]] )
fd: Calculates the width of a string in points if it was output in the given font and font size. This function needs an Adobe font metrics file to calculate the precise width. If kerning is turned on, it will be taken into account.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_stroke
fs: bool ps_stroke ( resource $psdoc )
fd: 
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: ps_symbol
fs: bool ps_symbol ( resource $psdoc , int $ord )
fd: Output the glyph at position ord in the font encoding vector of the current font.
vi: PECL ps:1.2.0-1.3.5
pt: PostScript document creation
fn: ps_symbol_name
fs: string ps_symbol_name ( resource $psdoc , int $ord [, int $fontid ] )
fd: This function needs an Adobe font metrics file to know which glyphs are available.
vi: PECL ps:1.2.0-1.3.5
pt: PostScript document creation
fn: ps_symbol_width
fs: float ps_symbol_width ( resource $psdoc , int $ord [, int $fontid [, float $size ]] )
fd: Calculates the width of a glyph in points if it was output in the given font and font size. This function needs an Adobe font metrics file to calculate the precise width.
vi: PECL ps:1.2.0-1.3.5
pt: PostScript document creation
fn: ps_translate
fs: bool ps_translate ( resource $psdoc , float $x , float $y )
fd: Sets a new initial point of the coordinate system.
vi: PECL ps:1.1.0-1.3.5
pt: PostScript document creation
fn: pspell_add_to_personal
fs: bool pspell_add_to_personal ( int $dictionary_link , string $word )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_add_to_session
fs: bool pspell_add_to_session ( int $dictionary_link , string $word )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_check
fs: bool pspell_check ( int $dictionary_link , string $word )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_clear_session
fs: bool pspell_clear_session ( int $dictionary_link )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_config_create
fs: int pspell_config_create ( string $language [, string $spelling [, string $jargon [, string $encoding ]]] )
fd: Create a config used to open a dictionary. 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_config_data_dir
fs: 
fd: 
vi: 
pt: 
fn: pspell_config_dict_dir
fs: 
fd: 
vi: 
pt: 
fn: pspell_config_ignore
fs: bool pspell_config_ignore ( int $dictionary_link , int $n )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_config_mode
fs: bool pspell_config_mode ( int $dictionary_link , int $mode )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_config_personal
fs: bool pspell_config_personal ( int $dictionary_link , string $file )
fd: Set a file that contains personal wordlist.
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_config_repl
fs: bool pspell_config_repl ( int $dictionary_link , string $file )
fd: Set a file that contains replacement pairs. 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_config_runtogether
fs: bool pspell_config_runtogether ( int $dictionary_link , bool $flag )
fd: This function determines whether run-together words will be treated as legal compounds. That is, thecat will be a legal compound, although there should be a space between the two words.
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_config_save_repl
fs: bool pspell_config_save_repl ( int $dictionary_link , bool $flag )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_new
fs: int pspell_new ( string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode ]]]] )
fd: pspell_new() opens up a new dictionary and returns the dictionary link identifier for use in other pspell functions. 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_new_config
fs: int pspell_new_config ( int $config )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_new_personal
fs: int pspell_new_personal ( string $personal , string $language [, string $spelling [, string $jargon [, string $encoding [, int $mode ]]]] )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_save_wordlist
fs: bool pspell_save_wordlist ( int $dictionary_link )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_store_replacement
fs: bool pspell_store_replacement ( int $dictionary_link , string $misspelled , string $correct )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: pspell_suggest
fs: array pspell_suggest ( int $dictionary_link , string $word )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: Pspell
fn: putenv
fs: bool putenv ( string $setting )
fd: Adds setting to the server environment. The environment variable will only exist for the duration of the current request. At the end of the request the environment is restored to its original state. 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: px_close
fs: bool px_close ( resource $pxdoc )
fd: Closes the paradox database. This function will not close the file.
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_create_fp
fs: bool px_create_fp ( resource $pxdoc , resource $file , array $fielddesc )
fd: Create a new paradox database file.
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_date2string
fs: string px_date2string ( resource $pxdoc , int $value , string $format )
fd: Turns a date as it stored in the paradox file into human readable format. Paradox dates are the number of days since 1.1.0000. This function is just for convenience. It can be easily replaced by some math and the calendar functions as demonstrated in the example below.
vi: PECL paradox:1.4.0-1.4.1
pt: Paradox File Access
fn: px_delete
fs: bool px_delete ( resource $pxdoc )
fd: Deletes the resource of the paradox file and frees all memory.
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_delete_record
fs: bool px_delete_record ( resource $pxdoc , int $num )
fd: This function deletes a record from the database. It does not free the space in the database file but just marks it as deleted. Inserting a new record afterwards will reuse the space. 
vi: PECL paradox:1.4.0-1.4.1
pt: Paradox File Access
fn: px_get_field
fs: array px_get_field ( resource $pxdoc , int $fieldno )
fd: 
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_get_info
fs: array px_get_info ( resource $pxdoc )
fd: 
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_get_parameter
fs: string px_get_parameter ( resource $pxdoc , string $name )
fd: Gets various parameters.
vi: PECL paradox:1.1.0-1.4.1
pt: Paradox File Access
fn: px_get_record
fs: array px_get_record ( resource $pxdoc , int $num [, int $mode ] )
fd: 
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_get_schema
fs: array px_get_schema ( resource $pxdoc [, int $mode ] )
fd: px_get_schema() returns the database schema.
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_get_value
fs: float px_get_value ( resource $pxdoc , string $name )
fd: Gets various values.
vi: PECL paradox:1.1.0-1.4.1
pt: Paradox File Access
fn: px_insert_record
fs: int px_insert_record ( resource $pxdoc , array $data )
fd: Inserts a new record into the database. The record is not necessarily inserted at the end of the database, but may be inserted at any position depending on where the first free slot is found. 
vi: PECL paradox:1.4.0-1.4.1
pt: Paradox File Access
fn: px_new
fs: resource px_new ( void )
fd: Create a new paradox object. You will have to call this function before any further functions. px_new() does not create any file on the disk, it just creates an instance of a paradox object. This function must not be called if the object oriented interface is used. Use new paradox_db() instead.
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_numfields
fs: int px_numfields ( resource $pxdoc )
fd: Get the number of fields in a database file.
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_numrecords
fs: int px_numrecords ( resource $pxdoc )
fd: Get the number of records in a database file.
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_open_fp
fs: bool px_open_fp ( resource $pxdoc , resource $file )
fd: Open an existing paradox database file.
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_put_record
fs: bool px_put_record ( resource $pxdoc , array $record [, int $recpos ] )
fd: Stores a record into a paradox database. The record is always added at the end of the database, regardless of any free slots.
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_retrieve_record
fs: array px_retrieve_record ( resource $pxdoc , int $num [, int $mode ] )
fd: 
vi: PECL paradox:1.4.0-1.4.1
pt: Paradox File Access
fn: px_set_blob_file
fs: bool px_set_blob_file ( resource $pxdoc , string $filename )
fd: Sets the name of the file where blobs are going to be read from or written into.
vi: PECL paradox:1.3.0-1.4.1
pt: Paradox File Access
fn: px_set_parameter
fs: bool px_set_parameter ( resource $pxdoc , string $name , string $value )
fd: Sets various parameters.
vi: PECL paradox:1.1.0-1.4.1
pt: Paradox File Access
fn: px_set_tablename
fs: void px_set_tablename ( resource $pxdoc , string $name )
fd: 
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_set_targetencoding
fs: bool px_set_targetencoding ( resource $pxdoc , string $encoding )
fd: Set the encoding for data retrieved from a character field. All character fields will be recoded to the encoding set by this function. If the encoding is not set, the character data will be returned in the DOS code page encoding as specified in the database file. The encoding can be any string identifier known to iconv or recode. On Unix systems run iconv -l for a list of available encodings. 
vi: PECL paradox:1.0-1.4.1
pt: Paradox File Access
fn: px_set_value
fs: bool px_set_value ( resource $pxdoc , string $name , float $value )
fd: Sets various values.
vi: PECL paradox:1.1.0-1.4.1
pt: Paradox File Access
fn: px_timestamp2string
fs: string px_timestamp2string ( resource $pxdoc , float $value , string $format )
fd: Turns a timestamp as it stored in the paradox file into human readable format. Paradox timestamps are the number of milliseconds since 1.1.0000. This function is just for convenience. It can be easily replaced by some math and the calendar functions as demonstrated in the following example.
vi: PECL paradox:1.4.0-1.4.1
pt: Paradox File Access
fn: px_update_record
fs: bool px_update_record ( resource $pxdoc , array $data , int $num )
fd: Updates an exiting record in the database. The record starts at 0. 
vi: PECL paradox:1.4.0-1.4.1
pt: Paradox File Access
fn: qdom_error
fs: string qdom_error ( void )
fd: 
vi: PHP 4 >= 4.0.5
pt: qtdom
fn: qdom_tree
fs: QDomDocument qdom_tree ( string $doc )
fd: 
vi: PHP 4 >= 4.0.4
pt: qtdom
fn: quoted_printable_decode
fs: string quoted_printable_decode ( string $str )
fd: 
vi: PHP 4, PHP 5
pt: String
fn: quotemeta
fs: string quotemeta ( string $str )
fd: Returns a version of str with a backslash character (\) before every character that is among these:\ + * ? [ ^ ] ( $ )
vi: PHP 4, PHP 5
pt: String
fn: rad2deg
fs: float rad2deg ( float $number )
fd: This function converts number from radian to degrees.
vi: PHP 4, PHP 5
pt: Mathematical
fn: radius_acct_open
fs: resource radius_acct_open ( void )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_add_server
fs: bool radius_add_server ( resource $radius_handle , string $hostname , int $port , string $secret , int $timeout , int $max_tries )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_auth_open
fs: resource radius_auth_open ( void )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_close
fs: bool radius_close ( resource $radius_handle )
fd: It is not needed to call this function because php frees all resources at the end of each request.
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_config
fs: bool radius_config ( resource $radius_handle , string $file )
fd: Before issuing any Radius requests, the library must be made aware of the servers it can contact. The easiest way to configure the library is to call radius_config().
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_create_request
fs: bool radius_create_request ( resource $radius_handle , int $type )
fd: A Radius request consists of a code specifying the kind of request, and zero or more attributes which provide additional information. To begin constructing a new request, call radius_create_request(). 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_cvt_addr
fs: string radius_cvt_addr ( string $data )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_cvt_int
fs: int radius_cvt_int ( string $data )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_cvt_string
fs: string radius_cvt_string ( string $data )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_demangle
fs: string radius_demangle ( resource $radius_handle , string $mangled )
fd: Some data (Passwords, MS-CHAPv1 MPPE-Keys) is mangled for security reasons, and must be demangled before you can use them.
vi: PECL radius:1.2-1.2.5
pt: Radius
fn: radius_demangle_mppe_key
fs: string radius_demangle_mppe_key ( resource $radius_handle , string $mangled )
fd: 
vi: PECL radius:1.2-1.2.5
pt: Radius
fn: radius_get_attr
fs: mixed radius_get_attr ( resource $radius_handle )
fd: Like Radius requests, each response may contain zero or more attributes.
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_get_vendor_attr
fs: array radius_get_vendor_attr ( string $data )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_put_addr
fs: bool radius_put_addr ( resource $radius_handle , int $type , string $addr )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_put_attr
fs: bool radius_put_attr ( resource $radius_handle , int $type , string $value )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_put_int
fs: bool radius_put_int ( resource $radius_handle , int $type , int $value )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_put_string
fs: bool radius_put_string ( resource $radius_handle , int $type , string $value )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_put_vendor_addr
fs: bool radius_put_vendor_addr ( resource $radius_handle , int $vendor , int $type , string $addr )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_put_vendor_attr
fs: bool radius_put_vendor_attr ( resource $radius_handle , int $vendor , int $type , string $value )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_put_vendor_int
fs: bool radius_put_vendor_int ( resource $radius_handle , int $vendor , int $type , int $value )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_put_vendor_string
fs: bool radius_put_vendor_string ( resource $radius_handle , int $vendor , int $type , string $value )
fd: 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_request_authenticator
fs: string radius_request_authenticator ( resource $radius_handle )
fd: The request authenticator is needed for demangling mangled data like passwords and encryption-keys.
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_send_request
fs: int radius_send_request ( resource $radius_handle )
fd: After the Radius request has been constructed, it is sent by radius_send_request(). 
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_server_secret
fs: string radius_server_secret ( resource $radius_handle )
fd: The shared secret is needed as salt for demangling mangled data like passwords and encryption-keys.
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: radius_strerror
fs: string radius_strerror ( resource $radius_handle )
fd: If Radius-functions fail then they record an error message. This error message can be retrieved with this function.
vi: PECL radius:1.1-1.2.5
pt: Radius
fn: rand
fs: int rand ([ int $min ], int $max )
fd: 
vi: PHP 4, PHP 5
pt: Mathematical
fn: range
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: rar_close
fs: bool rar_close ( resource $rar_file )
fd: Close Rar archive and free all allocated resources.
vi: 
pt: Rar
fn: rar_entry_get
fs: RarEntry rar_entry_get ( resource $rar_file , string $entry_name )
fd: Get entry object from the Rar archive.
vi: 
pt: Rar
fn: rar_list
fs: array rar_list ( resource $rar_file )
fd: Get entries list from the Rar archive.
vi: 
pt: Rar
fn: rar_open
fs: resource rar_open ( string $filename [, string $password ] )
fd: Open specified Rar archive and return Rar file resource.
vi: 
pt: Rar
fn: rawurldecode
fs: string rawurldecode ( string $str )
fd: Returns a string in which the sequences with percent (%) signs followed by two hex digits have been replaced with literal characters.
vi: PHP 4, PHP 5
pt: URL
fn: rawurlencode
fs: string rawurlencode ( string $str )
fd: 
vi: PHP 4, PHP 5
pt: URL
fn: read_exif_data
fs: 
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Exif
fn: readdir
fs: string readdir ( resource $dir_handle )
fd: Returns the filename of the next file from the directory. The filenames are returned in the order in which they are stored by the filesystem.
vi: PHP 4, PHP 5
pt: Directory
fn: readfile
fs: int readfile ( string $filename [, bool $use_include_path [, resource $context ]] )
fd: Reads a file and writes it to the output buffer.
vi: PHP 4, PHP 5
pt: Filesystem
fn: readgzfile
fs: int readgzfile ( string $filename [, int $use_include_path ] )
fd: Reads a file, decompresses it and writes it to standard output. 
vi: PHP 4, PHP 5
pt: Zlib Compression
fn: readline
fs: string readline ([ string $prompt ] )
fd: Reads a single line from the user.
vi: PHP 4, PHP 5
pt: GNU Readline
fn: readline_add_history
fs: bool readline_add_history ( string $line )
fd: This function adds a line to the command line history.
vi: PHP 4, PHP 5
pt: GNU Readline
fn: readline_callback_handler_install
fs: bool readline_callback_handler_install ( string $prompt , callback $callback )
fd: Sets up a readline callback interface then prints prompt and immediately returns. Calling this function twice without removing the previous callback interface will automatically and conveniently overwrite the old interface. 
vi: PHP 5 >= 5.1.0
pt: GNU Readline
fn: readline_callback_handler_remove
fs: bool readline_callback_handler_remove ( void )
fd: Removes a previously installed callback handler and restores terminal settings.
vi: PHP 5 >= 5.1.0
pt: GNU Readline
fn: readline_callback_read_char
fs: void readline_callback_read_char ( void )
fd: Reads a character of user input.
vi: PHP 5 >= 5.1.0
pt: GNU Readline
fn: readline_clear_history
fs: bool readline_clear_history ( void )
fd: This function clears the entire command line history.
vi: PHP 4, PHP 5
pt: GNU Readline
fn: readline_completion_function
fs: bool readline_completion_function ( callback $function )
fd: This function registers a completion function. This is the same kind of functionality you'd get if you hit your tab key while using Bash.
vi: PHP 4, PHP 5
pt: GNU Readline
fn: readline_info
fs: mixed readline_info ([ string $varname [, string $newvalue ]] )
fd: Gets or sets various internal readline variables.
vi: PHP 4, PHP 5
pt: GNU Readline
fn: readline_list_history
fs: array readline_list_history ( void )
fd: Gets the entire command line history.
vi: PHP 4, PHP 5
pt: GNU Readline
fn: readline_on_new_line
fs: void readline_on_new_line ( void )
fd: Tells readline that the cursor has moved to a new line.
vi: PHP 5 >= 5.1.0
pt: GNU Readline
fn: readline_read_history
fs: bool readline_read_history ([ string $filename ] )
fd: This function reads a command history from a file.
vi: PHP 4, PHP 5
pt: GNU Readline
fn: readline_redisplay
fs: void readline_redisplay ( void )
fd: Redraws readline to redraw the display.
vi: PHP 5 >= 5.1.0
pt: GNU Readline
fn: readline_write_history
fs: bool readline_write_history ([ string $filename ] )
fd: This function writes the command history to a file.
vi: PHP 4, PHP 5
pt: GNU Readline
fn: readlink
fs: string readlink ( string $path )
fd: readlink() does the same as the readlink C function.
vi: PHP 4, PHP 5
pt: Filesystem
fn: realpath
fs: string realpath ( string $path )
fd: realpath() expands all symbolic links and resolves references to '/./', '/../' and extra '/' characters in the input path. and return the canonicalized absolute pathname.
vi: PHP 4, PHP 5
pt: Filesystem
fn: recode
fs: 
fd: 
vi: PHP 4, PHP 5
pt: GNU Recode
fn: recode_file
fs: bool recode_file ( string $request , resource $input , resource $output )
fd: Recode the file referenced by file handle input into the file referenced by file handle output according to the recode request.
vi: PHP 4, PHP 5
pt: GNU Recode
fn: recode_string
fs: string recode_string ( string $request , string $string )
fd: Recode the string string according to the recode request request.
vi: PHP 4, PHP 5
pt: GNU Recode
fn: register_shutdown_function
fs: void register_shutdown_function ( callback $function [, mixed $parameter [, mixed $... ]] )
fd: Multiple calls to register_shutdown_function() can be made, and each will be called in the same order as they were registered.
vi: PHP 4, PHP 5
pt: Function Handling
fn: register_tick_function
fs: bool register_tick_function ( callback $function [, mixed $arg [, mixed $... ]] )
fd: 
vi: PHP 4 >= 4.0.3, PHP 5
pt: Function Handling
fn: rename
fs: bool rename ( string $oldname , string $newname [, resource $context ] )
fd: Attempts to rename oldname to newname.
vi: PHP 4, PHP 5, PECL zip:1.1.0-1.4.1
pt: Filesystem
fn: rename_function
fs: bool rename_function ( string $original_name , string $new_name )
fd: Renames a orig_name to new_name in the global function table. Useful for temporarily overriding built-in functions.
vi: PECL apd:0.2-1.0.1
pt: Advanced PHP debugger
fn: require
fs: 
fd: 
vi: 
pt: 
fn: require_once
fs: 
fd: 
vi: 
pt: 
fn: reset
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: restore_error_handler
fs: bool restore_error_handler ( void )
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Error Handling and Logging
fn: restore_exception_handler
fs: bool restore_exception_handler ( void )
fd: 
vi: PHP 5
pt: Error Handling and Logging
fn: restore_include_path
fs: void restore_include_path ( void )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: PHP Options&Information
fn: return
fs: 
fd: 
vi: 
pt: 
fn: rewind
fs: bool rewind ( resource $handle )
fd: Sets the file position indicator for handle to the beginning of the file stream. 
vi: PHP 4, PHP 5
pt: Filesystem
fn: rewinddir
fs: void rewinddir ( resource $dir_handle )
fd: Resets the directory stream indicated by dir_handle to the beginning of the directory.
vi: PHP 4, PHP 5
pt: Directory
fn: rmdir
fs: bool rmdir ( string $dirname [, resource $context ] )
fd: Attempts to remove the directory named by dirname. The directory must be empty, and the relevant permissions must permit this.
vi: PHP 4, PHP 5
pt: Filesystem
fn: round
fs: float round ( float $val [, int $precision ] )
fd: Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default). 
vi: PHP 4, PHP 5
pt: Mathematical
fn: rpm_close
fs: bool rpm_close ( resource $rpmr )
fd: rpm_close() will close an RPM file pointer.
vi: PECL rpmreader:0.1-0.3
pt: RPM Header Reading
fn: rpm_get_tag
fs: mixed rpm_get_tag ( resource $rpmr , int $tagnum )
fd: rpm_get_tag() will retrieve a given tag from the RPM file's header and return it.
vi: PECL rpmreader:0.1-0.3
pt: RPM Header Reading
fn: rpm_is_valid
fs: bool rpm_is_valid ( string $filename )
fd: rpm_is_valid() will test an RPM file for validity as an RPM file.
vi: PECL rpmreader:0.1-0.3
pt: RPM Header Reading
fn: rpm_open
fs: resource rpm_open ( string $filename )
fd: rpm_open() will open an RPM file and will determine if the file is a valid RPM file.
vi: PECL rpmreader:0.1-0.3
pt: RPM Header Reading
fn: rpm_version
fs: string rpm_version ( void )
fd: rpm_version() will return the current version of the rpmreader extension.
vi: PECL rpmreader:0.3
pt: RPM Header Reading
fn: rsort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: rtrim
fs: string rtrim ( string $str [, string $charlist ] )
fd: This function returns a string with whitespace stripped from the end of str. 
vi: PHP 4, PHP 5
pt: String
fn: runkit_class_adopt
fs: bool runkit_class_adopt ( string $classname , string $parentname )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_class_emancipate
fs: bool runkit_class_emancipate ( string $classname )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_constant_add
fs: bool runkit_constant_add ( string $constname , mixed $value )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_constant_redefine
fs: bool runkit_constant_redefine ( string $constname , mixed $newvalue )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_constant_remove
fs: bool runkit_constant_remove ( string $constname )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_function_add
fs: bool runkit_function_add ( string $funcname , string $arglist , string $code )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_function_copy
fs: bool runkit_function_copy ( string $funcname , string $targetname )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_function_redefine
fs: bool runkit_function_redefine ( string $funcname , string $arglist , string $code )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_function_remove
fs: bool runkit_function_remove ( string $funcname )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_function_rename
fs: bool runkit_function_rename ( string $funcname , string $newname )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_import
fs: bool runkit_import ( string $filename [, int $flags ] )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_lint
fs: bool runkit_lint ( string $code )
fd: The runkit_lint() function performs a syntax (lint) check on the specified php code testing for scripting errors. This is similar to using php -l from the command line except runkit_lint() accepts actual code rather than a filename. 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_lint_file
fs: bool runkit_lint_file ( string $filename )
fd: The runkit_lint_file() function performs a syntax (lint) check on the specified filename testing for scripting errors. This is similar to using php -l from the commandline. 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_method_add
fs: bool runkit_method_add ( string $classname , string $methodname , string $args , string $code [, int $flags ] )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_method_copy
fs: bool runkit_method_copy ( string $dClass , string $dMethod , string $sClass [, string $sMethod ] )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_method_redefine
fs: bool runkit_method_redefine ( string $classname , string $methodname , string $args , string $code [, int $flags ] )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_method_remove
fs: bool runkit_method_remove ( string $classname , string $methodname )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_method_rename
fs: bool runkit_method_rename ( string $classname , string $methodname , string $newname )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_return_value_used
fs: bool runkit_return_value_used ( void )
fd: 
vi: PECL runkit:0.8-0.9
pt: runkit
fn: runkit_sandbox_output_handler
fs: mixed runkit_sandbox_output_handler ( object $sandbox [, mixed $callback ] )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: runkit_superglobals
fs: array runkit_superglobals ( void )
fd: 
vi: PECL runkit:0.7-0.9
pt: runkit
fn: samconnection_commit
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_connect
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_constructor
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_disconnect
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_errno
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_error
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_isconnected
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_peek
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_peekall
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_receive
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_remove
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_rollback
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_send
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_setDebug
fs: 
fd: The setdebug method is used to turn on or off additional debugging output. The SAM framework will provide method/function entry and exit trace data plus additional information. Protocol specific implementations also provide extra output. 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_subscribe
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: samconnection_unsubscribe
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: sammessage_body
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: sammessage_constructor
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: sammessage_header
fs: 
fd: 
vi: 
pt: SAM - Simple Asynchronous Messaging
fn: satellite_caught_exception
fs: bool satellite_caught_exception ( void )
fd: 
vi: PHP 4 >= 4.0.3
pt: Satellite CORBA client extension
fn: satellite_exception_id
fs: string satellite_exception_id ( void )
fd: 
vi: PHP 4 >= 4.0.3
pt: Satellite CORBA client extension
fn: satellite_exception_value
fs: OrbitStruct satellite_exception_value ( void )
fd: 
vi: PHP 4 >= 4.0.3
pt: Satellite CORBA client extension
fn: satellite_get_repository_id
fs: int satellite_get_repository_id ( object $obj )
fd: Not implemented.
vi: PHP 4 >= 4.0.3
pt: Satellite CORBA client extension
fn: satellite_load_idl
fs: bool satellite_load_idl ( string $file )
fd: Load an IDL file into Satellite.
vi: PHP 4 >= 4.0.3
pt: Satellite CORBA client extension
fn: satellite_object_to_string
fs: string satellite_object_to_string ( object $obj )
fd: Convert an object to its string representation (IOR).
vi: PHP 4 >= 4.0.7
pt: Satellite CORBA client extension
fn: scandir
fs: array scandir ( string $directory [, int $sorting_order [, resource $context ]] )
fd: 
vi: PHP 5
pt: Directory
fn: sem_acquire
fs: bool sem_acquire ( resource $sem_identifier )
fd: sem_acquire() blocks (if necessary) until the semaphore can be acquired. A process attempting to acquire a semaphore which it has already acquired will block forever if acquiring the semaphore would cause its maximum number of semaphore to be exceeded. 
vi: PHP 4, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: sem_get
fs: resource sem_get ( int $key [, int $max_acquire [, int $perm [, int $auto_release ]]] )
fd: sem_get() returns an id that can be used to access the System V semaphore with the given key. 
vi: PHP 4, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: sem_release
fs: bool sem_release ( resource $sem_identifier )
fd: sem_release() releases the semaphore if it is currently acquired by the calling process, otherwise a warning is generated. 
vi: PHP 4, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: sem_remove
fs: bool sem_remove ( resource $sem_identifier )
fd: sem_remove() removes the given semaphore. 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: serialize
fs: string serialize ( mixed $value )
fd: Generates a storable representation of a value 
vi: PHP 4, PHP 5, PECL axis2:0.1.0-0.1.1
pt: Variable Handling
fn: sesam_affected_rows
fs: int sesam_affected_rows ( string $result_id )
fd: Gets the number of rows affected by an immediate query. 
vi: 
pt: SESAM Database
fn: sesam_commit
fs: bool sesam_commit ( void )
fd: Commits any pending updates to the database. 
vi: 
pt: SESAM Database
fn: sesam_connect
fs: bool sesam_connect ( string $catalog , string $schema , string $user )
fd: Establishes a connection to a SESAM database handler task. The connection is always persistent in the sense that only the very first invocation will actually load the driver from the configured SESAM OML PLAM library. Subsequent calls will reuse the driver and will immediately use the given catalog, schema, and user.
vi: 
pt: SESAM Database
fn: sesam_diagnostic
fs: array sesam_diagnostic ( void )
fd: Returns status information for last SESAM call.
vi: 
pt: SESAM Database
fn: sesam_disconnect
fs: bool sesam_disconnect ( void )
fd: Closes the logical link to a SESAM database (without actually disconnecting and unloading the driver). 
vi: 
pt: SESAM Database
fn: sesam_errormsg
fs: string sesam_errormsg ( void )
fd: Gets the SESAM error message associated with the most recent SESAM error.
vi: 
pt: SESAM Database
fn: sesam_execimm
fs: string sesam_execimm ( string $query )
fd: Executes an immediate statement. 
vi: 
pt: SESAM Database
fn: sesam_fetch_array
fs: array sesam_fetch_array ( string $result_id [, int $whence [, int $offset ]] )
fd: 
vi: 
pt: SESAM Database
fn: sesam_fetch_result
fs: mixed sesam_fetch_result ( string $result_id [, int $max_rows ] )
fd: Fetches a result, optionally limited to max_rows.
vi: 
pt: SESAM Database
fn: sesam_fetch_row
fs: array sesam_fetch_row ( string $result_id [, int $whence [, int $offset ]] )
fd: Fetches one row of data from the result associated with the specified result identifier. The row is returned as an array (indexed by values between 0 and $array[count]-1).
vi: 
pt: SESAM Database
fn: sesam_field_array
fs: array sesam_field_array ( string $result_id )
fd: Returns a mixed associative/indexed array with meta information (column name, type, precision, ...) about individual columns of the result after the query associated with result_id.
vi: 
pt: SESAM Database
fn: sesam_field_name
fs: int sesam_field_name ( string $result_id , int $index )
fd: Gets the field name.
vi: 
pt: SESAM Database
fn: sesam_free_result
fs: bool sesam_free_result ( string $result_id )
fd: Releases resources for the query.
vi: 
pt: SESAM Database
fn: sesam_num_fields
fs: int sesam_num_fields ( string $result_id )
fd: 
vi: 
pt: SESAM Database
fn: sesam_query
fs: string sesam_query ( string $query [, bool $scrollable ] )
fd: sesam_query() sends a query to the currently active database on the server. It can execute both immediate SQL statements and select type queries.
vi: 
pt: SESAM Database
fn: sesam_rollback
fs: bool sesam_rollback ( void )
fd: sesam_rollback() discards any pending updates to the database. Also affected are result cursors and result descriptors. 
vi: 
pt: SESAM Database
fn: sesam_seek_row
fs: bool sesam_seek_row ( string $result_id , int $whence [, int $offset ] )
fd: Sets the scrollable cursor mode for subsequent fetches.
vi: 
pt: SESAM Database
fn: sesam_settransaction
fs: bool sesam_settransaction ( int $isolation_level , int $read_only )
fd: Overrides the default values for the isolation level and read-only transaction parameters (which are set in the SESAM configuration file), in order to optimize subsequent queries and guarantee database consistency. The overridden values are used for the next transaction only. See the SESAM handbook for detailed explanation of the semantics. 
vi: 
pt: SESAM Database
fn: session_cache_expire
fs: int session_cache_expire ([ int $new_cache_expire ] )
fd: session_cache_expire() returns the current setting of session.cache_expire. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Session Handling
fn: session_cache_limiter
fs: string session_cache_limiter ([ string $cache_limiter ] )
fd: session_cache_limiter() returns the name of the current cache limiter. 
vi: PHP 4 >= 4.0.3, PHP 5
pt: Session Handling
fn: session_commit
fs: 
fd: 
vi: PHP 4 >= 4.4.0, PHP 5
pt: Session Handling
fn: session_decode
fs: bool session_decode ( string $data )
fd: session_decode() decodes the session data in data, setting variables stored in the session.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_destroy
fs: bool session_destroy ( void )
fd: In order to kill the session altogether, like to log the user out, the session id must also be unset. If a cookie is used to propagate the session id (default behavior), then the session cookie must be deleted.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_encode
fs: string session_encode ( void )
fd: session_encode() returns a string with the contents of the current session encoded within.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_get_cookie_params
fs: array session_get_cookie_params ( void )
fd: Gets the session cookie parameters.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_id
fs: string session_id ([ string $id ] )
fd: session_id() is used to get or set the session id for the current session. 
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_is_registered
fs: bool session_is_registered ( string $name )
fd: Finds out whether a global variable is registered in a session.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_module_name
fs: string session_module_name ([ string $module ] )
fd: session_module_name() gets the name of the current session module.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_name
fs: string session_name ([ string $name ] )
fd: session_name() returns the name of the current session. 
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_pgsql_add_error
fs: bool session_pgsql_add_error ( int $error_level [, string $error_message ] )
fd: 
vi: 
pt: PostgreSQL Session Save Handler
fn: session_pgsql_get_error
fs: array session_pgsql_get_error ([ bool $with_error_message ] )
fd: Get the number of errors and optional the error messages.
vi: 
pt: PostgreSQL Session Save Handler
fn: session_pgsql_get_field
fs: string session_pgsql_get_field ( void )
fd: 
vi: 
pt: PostgreSQL Session Save Handler
fn: session_pgsql_reset
fs: bool session_pgsql_reset ( void )
fd: Reset the connection to the session database servers.
vi: 
pt: PostgreSQL Session Save Handler
fn: session_pgsql_set_field
fs: bool session_pgsql_set_field ( string $value )
fd: 
vi: 
pt: PostgreSQL Session Save Handler
fn: session_pgsql_status
fs: array session_pgsql_status ( void )
fd: 
vi: 
pt: PostgreSQL Session Save Handler
fn: session_regenerate_id
fs: bool session_regenerate_id ([ bool $delete_old_session ] )
fd: session_regenerate_id() will replace the current session id with a new one, and keep the current session information.
vi: PHP 4 >= 4.3.2, PHP 5
pt: Session Handling
fn: session_register
fs: bool session_register ( mixed $name [, mixed $... ] )
fd: session_register() accepts a variable number of arguments, any of which can be either a string holding the name of a variable or an array consisting of variable names or other arrays. For each name, session_register() registers the global variable with that name in the current session. 
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_save_path
fs: string session_save_path ([ string $path ] )
fd: session_save_path() returns the path of the current directory used to save session data.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_set_cookie_params
fs: void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure [, bool $httponly ]]]] )
fd: Set cookie parameters defined in the php.ini file. The effect of this function only lasts for the duration of the script.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_set_save_handler
fs: bool session_set_save_handler ( callback $open , callback $close , callback $read , callback $write , callback $destroy , callback $gc )
fd: session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred. i.e. Storing the session data in a local database.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_start
fs: bool session_start ( void )
fd: session_start() creates a session or resumes the current one based on the current session id that's being passed via a request, such as GET, POST, or a cookie. 
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_unregister
fs: bool session_unregister ( string $name )
fd: session_unregister() unregisters the global variable named name from the current session.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_unset
fs: void session_unset ( void )
fd: The session_unset() function frees all session variables currently registered.
vi: PHP 4, PHP 5
pt: Session Handling
fn: session_write_close
fs: void session_write_close ( void )
fd: End the current session and store session data. 
vi: PHP 4 >= 4.0.4, PHP 5
pt: Session Handling
fn: set_error_handler
fs: mixed set_error_handler ( callback $error_handler [, int $error_types ] )
fd: Sets a user function (error_handler) to handle errors in a script. 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Error Handling and Logging
fn: set_exception_handler
fs: string set_exception_handler ( callback $exception_handler )
fd: Sets the default exception handler if an exception is not caught within a try/catch block. Execution will stop after the exception_handler is called.
vi: PHP 5
pt: Error Handling and Logging
fn: set_file_buffer
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Filesystem
fn: set_include_path
fs: string set_include_path ( string $new_include_path )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: PHP Options&Information
fn: set_magic_quotes_runtime
fs: bool set_magic_quotes_runtime ( int $new_setting )
fd: 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: set_time_limit
fs: void set_time_limit ( int $seconds )
fd: Set the number of seconds a script is allowed to run. If this is reached, the script returns a fatal error. The default limit is 30 seconds or, if it exists, the max_execution_time value defined in the php.ini. 
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: setcookie
fs: bool setcookie ( string $name [, string $value [, int $expire [, string $path [, string $domain [, bool $secure [, bool $httponly ]]]]]] )
fd: setcookie() defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent before any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including <html> and <head> tags as well as any whitespace. 
vi: PHP 4, PHP 5
pt: Network
fn: setlocale
fs: string setlocale ( int $category , string $locale [, string $... ] )
fd: 
vi: PHP 4, PHP 5
pt: String
fn: setrawcookie
fs: bool setrawcookie ( string $name [, string $value [, int $expire [, string $path [, string $domain [, bool $secure [, bool $httponly ]]]]]] )
fd: 
vi: PHP 5
pt: Network
fn: settype
fs: bool settype ( mixed &$var , string $type )
fd: Set the type of variable var to type.
vi: PHP 4, PHP 5
pt: Variable Handling
fn: sha1
fs: string sha1 ( string $str [, bool $raw_output ] )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL hash:1.1-1.3
pt: String
fn: sha1_file
fs: string sha1_file ( string $filename [, bool $raw_output ] )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5, PECL hash:1.1-1.3
pt: String
fn: shell_exec
fs: string shell_exec ( string $cmd )
fd: 
vi: PHP 4, PHP 5
pt: Program Execution
fn: shm_attach
fs: int shm_attach ( int $key [, int $memsize [, int $perm ]] )
fd: shm_attach() returns an id that can be used to access the System V shared memory with the given key, the first call creates the shared memory segment with memsize and the optional perm-bits perm. 
vi: PHP 4, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: shm_detach
fs: bool shm_detach ( int $shm_identifier )
fd: 
vi: PHP 4, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: shm_get_var
fs: mixed shm_get_var ( int $shm_identifier , int $variable_key )
fd: shm_get_var() returns the variable with a given variable_key, in the given shared memory segment. The variable is still present in the shared memory.
vi: PHP 4, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: shm_put_var
fs: bool shm_put_var ( int $shm_identifier , int $variable_key , mixed $variable )
fd: shm_put_var() inserts or updates the variable with the given variable_key. 
vi: PHP 4, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: shm_remove
fs: bool shm_remove ( int $shm_identifier )
fd: shm_remove() removes the shared memory shm_identifier. All data will be destroyed.
vi: PHP 4, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: shm_remove_var
fs: bool shm_remove_var ( int $shm_identifier , int $variable_key )
fd: Removes a variable with a given variable_key and frees the occupied memory.
vi: PHP 4, PHP 5
pt: Semaphore, Shared Memory and IPC
fn: shmop_close
fs: void shmop_close ( int $shmid )
fd: shmop_close() is used to close a shared memory block.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Shared Memory
fn: shmop_delete
fs: bool shmop_delete ( int $shmid )
fd: shmop_delete() is used to delete a shared memory block.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Shared Memory
fn: shmop_open
fs: int shmop_open ( int $key , string $flags , int $mode , int $size )
fd: shmop_open() can create or open a shared memory block.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Shared Memory
fn: shmop_read
fs: string shmop_read ( int $shmid , int $start , int $count )
fd: shmop_read() will read a string from shared memory block.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Shared Memory
fn: shmop_size
fs: int shmop_size ( int $shmid )
fd: shmop_size() is used to get the size, in bytes of the shared memory block.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Shared Memory
fn: shmop_write
fs: int shmop_write ( int $shmid , string $data , int $offset )
fd: shmop_write() will write a string into shared memory block.
vi: PHP 4 >= 4.0.4, PHP 5
pt: Shared Memory
fn: show_source
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: shuffle
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: similar_text
fs: int similar_text ( string $first , string $second [, float &$percent ] )
fd: This calculates the similarity between two strings as described in Oliver [1993]. Note that this implementation does not use a stack as in Oliver's pseudo code, but recursive calls which may or may not speed up the whole process. Note also that the complexity of this algorithm is O(N**3) where N is the length of the longest string.
vi: PHP 4, PHP 5
pt: String
fn: simplexml_element_addAttribute
fs: 
fd: 
vi: PHP 5 >= 5.1.3
pt: SimpleXML functions
fn: simplexml_element_addChild
fs: 
fd: 
vi: PHP 5 >= 5.1.3
pt: SimpleXML functions
fn: simplexml_element_asXML
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SimpleXML functions
fn: simplexml_element_attributes
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SimpleXML functions
fn: simplexml_element_children
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SimpleXML functions
fn: simplexml_element_construct
fs: 
fd: 
vi: 
pt: SimpleXML functions
fn: simplexml_element_getDocNamespaces
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: SimpleXML functions
fn: simplexml_element_getName
fs: 
fd: 
vi: PHP 5 >= 5.1.3
pt: SimpleXML functions
fn: simplexml_element_getNamespaces
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: SimpleXML functions
fn: simplexml_element_registerXPathNamespace
fs: 
fd: 
vi: PHP 5 >= 5.2.0
pt: SimpleXML functions
fn: simplexml_element_xpath
fs: 
fd: 
vi: PHP 5 >= 5.2.0
pt: SimpleXML functions
fn: simplexml_import_dom
fs: SimpleXMLElement simplexml_import_dom ( DOMNode $node [, string $class_name ] )
fd: 
vi: PHP 5
pt: SimpleXML functions
fn: simplexml_load_file
fs: object simplexml_load_file ( string $filename [, string $class_name [, int $options [, string $ns [, bool $is_prefix ]]]] )
fd: Convert the well-formed XML document in the given file to an object.
vi: PHP 5
pt: SimpleXML functions
fn: simplexml_load_string
fs: object simplexml_load_string ( string $data [, string $class_name [, int $options [, string $ns [, bool $is_prefix ]]]] )
fd: Takes a well-formed XML string and returns it as an object.
vi: PHP 5
pt: SimpleXML functions
fn: sin
fs: float sin ( float $arg )
fd: sin() returns the sine of the arg parameter. The arg parameter is in radians.
vi: PHP 4, PHP 5
pt: Mathematical
fn: sinh
fs: float sinh ( float $arg )
fd: Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg))/2.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Mathematical
fn: sizeof
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: sleep
fs: int sleep ( int $seconds )
fd: 
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: snmp_get_quick_print
fs: bool snmp_get_quick_print ( void )
fd: Returns the current value stored in the UCD Library for quick_print. quick_print is off by default.
vi: PHP 4, PHP 5
pt: SNMP
fn: snmp_get_valueretrieval
fs: int snmp_get_valueretrieval ( void )
fd: 
vi: PHP 4 >= 4.3.3, PHP 5
pt: SNMP
fn: snmp_read_mib
fs: bool snmp_read_mib ( string $filename )
fd: 
vi: PHP 5
pt: SNMP
fn: snmp_set_enum_print
fs: void snmp_set_enum_print ( int $enum_print )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: SNMP
fn: snmp_set_oid_numeric_print
fs: void snmp_set_oid_numeric_print ( int $oid_numeric_print )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: SNMP
fn: snmp_set_oid_output_format
fs: void snmp_set_oid_output_format ( int $oid_format )
fd: snmp_set_oid_output_format() sets the output format to be full or numeric.
vi: PHP 5 >= 5.2.0
pt: SNMP
fn: snmp_set_quick_print
fs: void snmp_set_quick_print ( bool $quick_print )
fd: Sets the value of quick_print within the UCD SNMP library. When this is set (1), the SNMP library will return 'quick printed' values. This means that just the value will be printed. When quick_print is not enabled (default) the UCD SNMP library prints extra information including the type of the value (i.e. IpAddress or OID). Additionally, if quick_print is not enabled, the library prints additional hex values for all strings of three characters or less. 
vi: PHP 4, PHP 5
pt: SNMP
fn: snmp_set_valueretrieval
fs: void snmp_set_valueretrieval ( int $method )
fd: 
vi: PHP 4 >= 4.3.3, PHP 5
pt: SNMP
fn: snmpget
fs: string snmpget ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )
fd: The snmpget() function is used to read the value of an SNMP object specified by the object_id.
vi: PHP 4, PHP 5
pt: SNMP
fn: snmpgetnext
fs: string snmpgetnext ( string $host , string $community , string $object_id [, int $timeout [, int $retries ]] )
fd: 
vi: PHP 5
pt: SNMP
fn: snmprealwalk
fs: array snmprealwalk ( string $host , string $community , string $object_id [, int $timeout [, int $retries ]] )
fd: 
vi: PHP 4, PHP 5
pt: SNMP
fn: snmpset
fs: bool snmpset ( string $hostname , string $community , string $object_id , string $type , mixed $value [, int $timeout [, int $retries ]] )
fd: snmpset() is used to set the value of an SNMP object specified by the object_id.
vi: PHP 4, PHP 5
pt: SNMP
fn: snmpwalk
fs: array snmpwalk ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )
fd: snmpwalk() function is used to read all the values from an SNMP agent specified by the hostname.
vi: PHP 4, PHP 5
pt: SNMP
fn: snmpwalkoid
fs: array snmpwalkoid ( string $hostname , string $community , string $object_id [, int $timeout [, int $retries ]] )
fd: snmpwalkoid() function is used to read all object ids and their respective values from an SNMP agent specified by hostname. 
vi: PHP 4, PHP 5
pt: SNMP
fn: soap_soapclient_call
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapclient_construct
fs: 
fd: 
vi: 
pt: SOAP
fn: soap_soapclient_dorequest
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapclient_getfunctions
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapclient_getlastrequest
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapclient_getlastrequestheaders
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapclient_getlastresponse
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapclient_getlastresponseheaders
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapclient_gettypes
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapclient_setcookie
fs: 
fd: 
vi: PHP 5 >= 5.0.4
pt: SOAP
fn: soap_soapclient_soapcall
fs: 
fd: 
vi: 
pt: SOAP
fn: soap_soapfault_construct
fs: 
fd: 
vi: 
pt: SOAP
fn: soap_soapheader_construct
fs: 
fd: 
vi: 
pt: SOAP
fn: soap_soapparam_construct
fs: 
fd: 
vi: 
pt: SOAP
fn: soap_soapserver_addfunction
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapserver_construct
fs: 
fd: 
vi: 
pt: SOAP
fn: soap_soapserver_fault
fs: 
fd: 
vi: 
pt: SOAP
fn: soap_soapserver_getfunctions
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapserver_handle
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapserver_setclass
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: SOAP
fn: soap_soapserver_setpersistence
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: SOAP
fn: soap_soapvar_construct
fs: 
fd: 
vi: 
pt: SOAP
fn: socket_accept
fs: resource socket_accept ( resource $socket )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_bind
fs: bool socket_bind ( resource $socket , string $address [, int $port ] )
fd: Binds the name given in address to the socket described by socket.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_clear_error
fs: void socket_clear_error ([ resource $socket ] )
fd: This function clears the error code on the given socket or the global last socket error if no socket is specified. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Socket
fn: socket_close
fs: void socket_close ( resource $socket )
fd: socket_close() closes the socket resource given by socket. This function is specific to sockets and cannot be used on any other type of resources.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_connect
fs: bool socket_connect ( resource $socket , string $address [, int $port ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_create
fs: resource socket_create ( int $domain , int $type , int $protocol )
fd: Creates and returns a socket resource, also referred to as an endpoint of communication. A typical network connection is made up of 2 sockets, one performing the role of the client, and another performing the role of the server.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_create_listen
fs: resource socket_create_listen ( int $port [, int $backlog ] )
fd: socket_create_listen() creates a new socket resource of type AF_INET listening on all local interfaces on the given port waiting for new connections. 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_create_pair
fs: bool socket_create_pair ( int $domain , int $type , int $protocol , array &$fd )
fd: socket_create_pair() creates two connected and indistinguishable sockets, and stores them in fd. This function is commonly used in IPC (InterProcess Communication).
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_get_option
fs: mixed socket_get_option ( resource $socket , int $level , int $optname )
fd: The socket_get_option() function retrieves the value for the option specified by the optname parameter for the specified socket.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Socket
fn: socket_get_status
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Network
fn: socket_getpeername
fs: bool socket_getpeername ( resource $socket , string &$address [, int &$port ] )
fd: Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_getsockname
fs: bool socket_getsockname ( resource $socket , string &$addr [, int &$port ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_last_error
fs: int socket_last_error ([ resource $socket ] )
fd: If a socket resource is passed to this function, the last error which occurred on this particular socket is returned. If the socket resource is omitted, the error code of the last failed socket function is returned.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_listen
fs: bool socket_listen ( resource $socket [, int $backlog ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_read
fs: string socket_read ( resource $socket , int $length [, int $type ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_recv
fs: 
fd: 
vi: 
pt: 
fn: socket_recvfrom
fs: int socket_recvfrom ( resource $socket , string &$buf , int $len , int $flags , string &$name [, int &$port ] )
fd: The socket_recvfrom() function receives len bytes of data in buf from name on port port (if the socket is not of type AF_UNIX) using socket. socket_recvfrom() can be used to gather data from both connected and unconnected sockets. Additionally, one or more flags can be specified to modify the behaviour of the function. 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_select
fs: int socket_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec ] )
fd: socket_select() accepts arrays of sockets and waits for them to change status. Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets. Three independent arrays of socket resources are watched.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_send
fs: int socket_send ( resource $socket , string $buf , int $len , int $flags )
fd: The function socket_send() sends len bytes to the socket socket from buf.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_sendto
fs: int socket_sendto ( resource $socket , string $buf , int $len , int $flags , string $addr [, int $port ] )
fd: The function socket_sendto() sends len bytes from buf through the socket socket to the port at the address addr.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_set_block
fs: bool socket_set_block ( resource $socket )
fd: The socket_set_block() function removes the O_NONBLOCK flag on the socket specified by the socket parameter. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Socket
fn: socket_set_blocking
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Network
fn: socket_set_nonblock
fs: bool socket_set_nonblock ( resource $socket )
fd: The socket_set_nonblock() function sets the O_NONBLOCK flag on the socket specified by the socket parameter. 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_set_option
fs: bool socket_set_option ( resource $socket , int $level , int $optname , mixed $optval )
fd: The socket_set_option() function sets the option specified by the optname parameter, at the specified protocol level, to the value pointed to by the optval parameter for the socket.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Socket
fn: socket_set_timeout
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Network
fn: socket_shutdown
fs: bool socket_shutdown ( resource $socket [, int $how ] )
fd: The socket_shutdown() function allows you to stop incoming, outgoing or all data (the default) from being sent through the socket
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_strerror
fs: string socket_strerror ( int $errno )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: socket_write
fs: int socket_write ( resource $socket , string $buffer [, int $length ] )
fd: The function socket_write() writes to the socket from the given buffer.
vi: PHP 4 >= 4.0.7, PHP 5
pt: Socket
fn: sort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: soundex
fs: string soundex ( string $str )
fd: Calculates the soundex key of str. 
vi: PHP 4, PHP 5
pt: String
fn: spl_autoload
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: Standard PHP Library (SPL)
fn: spl_autoload_call
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: Standard PHP Library (SPL)
fn: spl_autoload_extensions
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: Standard PHP Library (SPL)
fn: spl_autoload_functions
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: Standard PHP Library (SPL)
fn: spl_autoload_register
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: Standard PHP Library (SPL)
fn: spl_autoload_unregister
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: Standard PHP Library (SPL)
fn: spl_classes
fs: 
fd: 
vi: PHP 5
pt: Standard PHP Library (SPL)
fn: spl_object_hash
fs: 
fd: 
vi: PHP 5 >= 5.2.0
pt: Standard PHP Library (SPL)
fn: split
fs: array split ( string $pattern , string $string [, int $limit ] )
fd: Splits a string into array by regular expression.
vi: PHP 4, PHP 5
pt: Regular Expression (POSIX Extended)
fn: spliti
fs: array spliti ( string $pattern , string $string [, int $limit ] )
fd: Splits a string into array by regular expression. 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Regular Expression (POSIX Extended)
fn: sprintf
fs: string sprintf ( string $format [, mixed $args [, mixed $... ]] )
fd: Returns a string produced according to the formatting string format.
vi: PHP 4, PHP 5
pt: String
fn: sql_regcase
fs: string sql_regcase ( string $string )
fd: Creates a regular expression for a case insensitive match.
vi: PHP 4, PHP 5
pt: Regular Expression (POSIX Extended)
fn: sqlite_array_query
fs: array sqlite_array_query ( resource $dbhandle , string $query [, int $result_type [, bool $decode_binary ]] )
fd: 
vi: 
pt: SQLite
fn: sqlite_busy_timeout
fs: void sqlite_busy_timeout ( resource $dbhandle , int $milliseconds )
fd: Object oriented style (method): SQLiteDatabase
vi: 
pt: SQLite
fn: sqlite_changes
fs: int sqlite_changes ( resource $dbhandle )
fd: Object oriented style (method): SQLiteDatabase
vi: 
pt: SQLite
fn: sqlite_close
fs: void sqlite_close ( resource $dbhandle )
fd: Closes the given database handle. If the database was persistent, it will be closed and removed from the persistent list.
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_column
fs: mixed sqlite_column ( resource $result , mixed $index_or_name [, bool $decode_binary ] )
fd: 
vi: 
pt: SQLite
fn: sqlite_create_aggregate
fs: void sqlite_create_aggregate ( resource $dbhandle , string $function_name , callback $step_func , callback $finalize_func [, int $num_args ] )
fd: Object oriented style (method): SQLiteDatabase
vi: 
pt: SQLite
fn: sqlite_create_function
fs: void sqlite_create_function ( resource $dbhandle , string $function_name , callback $callback [, int $num_args ] )
fd: Object oriented style (method): SQLiteDatabase
vi: 
pt: SQLite
fn: sqlite_current
fs: array sqlite_current ( resource $result [, int $result_type [, bool $decode_binary ]] )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_error_string
fs: string sqlite_error_string ( int $error_code )
fd: 
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_escape_string
fs: string sqlite_escape_string ( string $item )
fd: sqlite_escape_string() will correctly quote the string specified by item for use in an SQLite SQL statement. This includes doubling up single-quote characters (') and checking for binary-unsafe characters in the query string. 
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_exec
fs: bool sqlite_exec ( resource $dbhandle , string $query [, string &$error_msg ] )
fd: 
vi: 
pt: SQLite
fn: sqlite_factory
fs: SQLiteDatabase sqlite_factory ( string $filename [, int $mode [, string &$error_message ]] )
fd: 
vi: PHP 5
pt: SQLite
fn: sqlite_fetch_all
fs: array sqlite_fetch_all ( resource $result [, int $result_type [, bool $decode_binary ]] )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_fetch_array
fs: array sqlite_fetch_array ( resource $result [, int $result_type [, bool $decode_binary ]] )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_fetch_column_types
fs: array sqlite_fetch_column_types ( string $table_name , resource $dbhandle [, int $result_type ] )
fd: Object oriented style (method): SQLiteDatabase
vi: 
pt: SQLite
fn: sqlite_fetch_object
fs: object sqlite_fetch_object ( resource $result [, string $class_name [, array $ctor_params [, bool $decode_binary ]]] )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_fetch_single
fs: string sqlite_fetch_single ( resource $result [, bool $decode_binary ] )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_fetch_string
fs: 
fd: 
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_field_name
fs: string sqlite_field_name ( resource $result , int $field_index )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_has_more
fs: bool sqlite_has_more ( resource $result )
fd: Finds whether more rows are available from the given result set.
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_has_prev
fs: bool sqlite_has_prev ( resource $result )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_key
fs: int sqlite_key ( resource $result )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_last_error
fs: int sqlite_last_error ( resource $dbhandle )
fd: Object oriented style (method): SQLiteDatabase
vi: 
pt: SQLite
fn: sqlite_last_insert_rowid
fs: int sqlite_last_insert_rowid ( resource $dbhandle )
fd: Object oriented style (method): SQLiteDatabase
vi: 
pt: SQLite
fn: sqlite_libencoding
fs: string sqlite_libencoding ( void )
fd: The SQLite library may be compiled in either ISO-8859-1 or UTF-8 compatible modes. This function allows you to determine which encoding scheme is used by your version of the library. 
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_libversion
fs: string sqlite_libversion ( void )
fd: Returns the version of the linked SQLite library.
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_next
fs: bool sqlite_next ( resource $result )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_num_fields
fs: int sqlite_num_fields ( resource $result )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_num_rows
fs: int sqlite_num_rows ( resource $result )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_open
fs: resource sqlite_open ( string $filename [, int $mode [, string &$error_message ]] )
fd: Object oriented style (constructor): SQLiteDatabase
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_popen
fs: resource sqlite_popen ( string $filename [, int $mode [, string &$error_message ]] )
fd: sqlite_popen() will first check to see if a persistent handle has already been opened for the given filename. If it finds one, it returns that handle to your script, otherwise it opens a fresh handle to the database. 
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_prev
fs: bool sqlite_prev ( resource $result )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_query
fs: resource sqlite_query ( resource $dbhandle , string $query [, int $result_type [, string &$error_msg ]] )
fd: 
vi: 
pt: SQLite
fn: sqlite_rewind
fs: bool sqlite_rewind ( resource $result )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_seek
fs: bool sqlite_seek ( resource $result , int $rownum )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqlite_single_query
fs: array sqlite_single_query ( resource $db , string $query [, bool $first_row_only [, bool $decode_binary ]] )
fd: Object oriented style (method): SQLiteDatabase
vi: 
pt: SQLite
fn: sqlite_udf_decode_binary
fs: string sqlite_udf_decode_binary ( string $data )
fd: 
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_udf_encode_binary
fs: string sqlite_udf_encode_binary ( string $data )
fd: sqlite_udf_encode_binary() applies a binary encoding to the data so that it can be safely returned from queries (since the underlying libsqlite API is not binary safe). 
vi: PHP 5, PECL sqlite:1.0-1.0.3
pt: SQLite
fn: sqlite_unbuffered_query
fs: resource sqlite_unbuffered_query ( resource $dbhandle , string $query [, int $result_type [, string &$error_msg ]] )
fd: 
vi: 
pt: SQLite
fn: sqlite_valid
fs: bool sqlite_valid ( resource $result )
fd: Object oriented style (method): SQLiteResult
vi: 
pt: SQLite
fn: sqrt
fs: float sqrt ( float $arg )
fd: Returns the square root of arg.
vi: PHP 4, PHP 5
pt: Mathematical
fn: srand
fs: void srand ([ int $seed ] )
fd: Seeds the random number generator with seed or with a random value if no seed is given. 
vi: PHP 4, PHP 5
pt: Mathematical
fn: sscanf
fs: 
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: String
fn: ssh2_auth_hostbased_file
fs: bool ssh2_auth_hostbased_file ( resource $session , string $username , string $hostname , string $pubkeyfile , string $privkeyfile [, string $passphrase [, string $local_username ]] )
fd: Authenticate using a public hostkey read from a file.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_auth_none
fs: mixed ssh2_auth_none ( resource $session , string $username )
fd: Attempt none authentication which usually will (and should) fail. As part of the failure, this function will return an array of accepted authentication methods.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_auth_password
fs: bool ssh2_auth_password ( resource $session , string $username , string $password )
fd: Authenticate over SSH using a plain password
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_auth_pubkey_file
fs: bool ssh2_auth_pubkey_file ( resource $session , string $username , string $pubkeyfile , string $privkeyfile [, string $passphrase ] )
fd: Authenticate using a public key read from a file.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_connect
fs: resource ssh2_connect ( string $host [, int $port [, array $methods [, array $callbacks ]]] )
fd: Establish a connection to a remote SSH server. 
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_exec
fs: resource ssh2_exec ( resource $session , string $command [, string $pty [, array $env [, int $width [, int $height [, int $width_height_type ]]]]] )
fd: Execute a command at the remote end and allocate a channel for it.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_fetch_stream
fs: resource ssh2_fetch_stream ( resource $channel , int $streamid )
fd: Fetches an alternate substream associated with an SSH2 channel stream. The SSH2 protocol currently defines only one substream, STDERR, which has a substream ID of SSH2_STREAM_STDERR (defined as 1).
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_fingerprint
fs: string ssh2_fingerprint ( resource $session [, int $flags ] )
fd: Returns a server hostkey hash from an active session.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_methods_negotiated
fs: array ssh2_methods_negotiated ( resource $session )
fd: Returns list of negotiated methods.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_publickey_add
fs: bool ssh2_publickey_add ( resource $pkey , string $algoname , string $blob [, bool $overwrite [, array $attributes ]] )
fd: 
vi: PECL ssh2:0.10
pt: Secure Shell2
fn: ssh2_publickey_init
fs: resource ssh2_publickey_init ( resource $session )
fd: Request the Publickey subsystem from an already connected SSH2 server. 
vi: PECL ssh2:0.10
pt: Secure Shell2
fn: ssh2_publickey_list
fs: array ssh2_publickey_list ( resource $pkey )
fd: List currently authorized publickeys.
vi: PECL ssh2:0.10
pt: Secure Shell2
fn: ssh2_publickey_remove
fs: bool ssh2_publickey_remove ( resource $pkey , string $algoname , string $blob )
fd: Removes an authorized publickey.
vi: PECL ssh2:0.10
pt: Secure Shell2
fn: ssh2_scp_recv
fs: bool ssh2_scp_recv ( resource $session , string $remote_file , string $local_file )
fd: Copy a file from the remote server to the local filesystem using the SCP protocol.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_scp_send
fs: bool ssh2_scp_send ( resource $session , string $local_file , string $remote_file [, int $create_mode ] )
fd: Copy a file from the local filesystem to the remote server using the SCP protocol.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_sftp
fs: resource ssh2_sftp ( resource $session )
fd: Request the SFTP subsystem from an already connected SSH2 server.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_sftp_lstat
fs: array ssh2_sftp_lstat ( resource $sftp , string $path )
fd: Stats a symbolic link on the remote filesystem without following the link. 
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_sftp_mkdir
fs: bool ssh2_sftp_mkdir ( resource $sftp , string $dirname [, int $mode [, bool $recursive ]] )
fd: Creates a directory on the remote file server with permissions set to mode. 
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_sftp_readlink
fs: string ssh2_sftp_readlink ( resource $sftp , string $link )
fd: Returns the target of a symbolic link.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_sftp_realpath
fs: string ssh2_sftp_realpath ( resource $sftp , string $filename )
fd: Translates filename into the effective real path on the remote filesystem.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_sftp_rename
fs: bool ssh2_sftp_rename ( resource $sftp , string $from , string $to )
fd: Renames a file on the remote filesystem.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_sftp_rmdir
fs: bool ssh2_sftp_rmdir ( resource $sftp , string $dirname )
fd: Removes a directory from the remote file server. 
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_sftp_stat
fs: array ssh2_sftp_stat ( resource $sftp , string $path )
fd: Stats a file on the remote filesystem following any symbolic links. 
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_sftp_symlink
fs: bool ssh2_sftp_symlink ( resource $sftp , string $target , string $link )
fd: Creates a symbolic link named link on the remote filesystem pointing to target.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_sftp_unlink
fs: bool ssh2_sftp_unlink ( resource $sftp , string $filename )
fd: Deletes a file on the remote filesystem.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_shell
fs: resource ssh2_shell ( resource $session [, string $term_type [, array $env [, int $width [, int $height [, int $width_height_type ]]]]] )
fd: Open a shell at the remote end and allocate a stream for it.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: ssh2_tunnel
fs: resource ssh2_tunnel ( resource $session , string $host , int $port )
fd: Open a socket stream to an arbitrary host/port by way of the currently connected SSH server.
vi: PECL ssh2:0.10-0.9
pt: Secure Shell2
fn: stat
fs: array stat ( string $filename )
fd: Gathers the statistics of the file named by filename. If filename is a symbolic link, statistics are from the file itself, not the symlink. 
vi: PHP 4, PHP 5, PECL maxdb:7.5.00.24-7.6.00.38
pt: Filesystem
fn: stats_absolute_deviation
fs: float stats_absolute_deviation ( array $a )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_beta
fs: float stats_cdf_beta ( float $par1 , float $par2 , float $par3 , int $which )
fd: Method Cumulative distribution function (P) is calculated directly by code associated with the following reference. DiDinato, A. R. and Morris, A. H. Algorithm 708: Significant Digit Computation of the Incomplete Beta Function Ratios. ACM Trans. Math. Softw. 18 (1993), 360-373. Computation of other parameters involve a search for a value that produces the desired value of P. The search relies on the monotinicity of P with the other parameter. Note The beta density is proportional to t^(A-1) * (1-t)^(B-1) Arguments P -- The integral from 0 to X of the chi-square distribution. Input range: [0, 1]. Q -- 1-P. Input range: [0, 1]. P + Q = 1.0. X -- Upper limit of integration of beta density. Input range: [0,1]. Search range: [0,1] Y -- 1-X. Input range: [0,1]. Search range: [0,1] X + Y = 1.0. A -- The first parameter of the beta density. Input range: (0, +infinity). Search range: [1D-100,1D100] B -- The second parameter of the beta density. Input range: (0, +infinity). Search range: [1D-100,1D100] STATUS -- 0 if calculation completed correctly -I if input parameter number I is out of range 1 if answer appears to be lower than lowest search bound 2 if answer appears to be higher than greatest search bound 3 if P + Q .ne. 1 4 if X + Y .ne. 1 BOUND -- Undefined if STATUS is 0 Bound exceeded by parameter number I if STATUS is negative. Lower search bound if STATUS is 1. Upper search bound if STATUS is 2.
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_binomial
fs: float stats_cdf_binomial ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_cauchy
fs: float stats_cdf_cauchy ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_chisquare
fs: float stats_cdf_chisquare ( float $par1 , float $par2 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_exponential
fs: float stats_cdf_exponential ( float $par1 , float $par2 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_f
fs: float stats_cdf_f ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_gamma
fs: float stats_cdf_gamma ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_laplace
fs: float stats_cdf_laplace ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_logistic
fs: float stats_cdf_logistic ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_negative_binomial
fs: float stats_cdf_negative_binomial ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_noncentral_chisquare
fs: float stats_cdf_noncentral_chisquare ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_noncentral_f
fs: float stats_cdf_noncentral_f ( float $par1 , float $par2 , float $par3 , float $par4 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_poisson
fs: float stats_cdf_poisson ( float $par1 , float $par2 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_t
fs: float stats_cdf_t ( float $par1 , float $par2 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_uniform
fs: float stats_cdf_uniform ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_cdf_weibull
fs: float stats_cdf_weibull ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_covariance
fs: float stats_covariance ( array $a , array $b )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_den_uniform
fs: float stats_den_uniform ( float $x , float $a , float $b )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_beta
fs: float stats_dens_beta ( float $x , float $a , float $b )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_cauchy
fs: float stats_dens_cauchy ( float $x , float $ave , float $stdev )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_chisquare
fs: float stats_dens_chisquare ( float $x , float $dfr )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_exponential
fs: float stats_dens_exponential ( float $x , float $scale )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_f
fs: float stats_dens_f ( float $x , float $dfr1 , float $dfr2 )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_gamma
fs: float stats_dens_gamma ( float $x , float $shape , float $scale )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_laplace
fs: float stats_dens_laplace ( float $x , float $ave , float $stdev )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_logistic
fs: float stats_dens_logistic ( float $x , float $ave , float $stdev )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_negative_binomial
fs: float stats_dens_negative_binomial ( float $x , float $n , float $pi )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_normal
fs: float stats_dens_normal ( float $x , float $ave , float $stdev )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_pmf_binomial
fs: float stats_dens_pmf_binomial ( float $x , float $n , float $pi )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_pmf_hypergeometric
fs: float stats_dens_pmf_hypergeometric ( float $n1 , float $n2 , float $N1 , float $N2 )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_pmf_poisson
fs: float stats_dens_pmf_poisson ( float $x , float $lb )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_t
fs: float stats_dens_t ( float $x , float $dfr )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_dens_weibull
fs: float stats_dens_weibull ( float $x , float $a , float $b )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_harmonic_mean
fs: number stats_harmonic_mean ( array $a )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_kurtosis
fs: float stats_kurtosis ( array $a )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_beta
fs: float stats_rand_gen_beta ( float $a , float $b )
fd: Returns a random deviate from the beta distribution with parameters A and B. The density of the beta is x^(a-1) * (1-x)^(b-1) / B(a,b) for 0 < x <. Method R. C. H. Cheng.
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_chisquare
fs: float stats_rand_gen_chisquare ( float $df )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_exponential
fs: float stats_rand_gen_exponential ( float $av )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_f
fs: float stats_rand_gen_f ( float $dfn , float $dfd )
fd: Generates a random deviate from the F (variance ratio) distribution with dfn degrees of freedom in the numerator and dfd degrees of freedom in the denominator. Method : directly generates ratio of chisquare variates.
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_funiform
fs: float stats_rand_gen_funiform ( float $low , float $high )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_gamma
fs: float stats_rand_gen_gamma ( float $a , float $r )
fd: Generates random deviates from the gamma distribution whose density is (A**R)/Gamma(R) * X**(R-1) * Exp(-A*X).
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_ibinomial
fs: int stats_rand_gen_ibinomial ( int $n , float $pp )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_ibinomial_negative
fs: int stats_rand_gen_ibinomial_negative ( int $n , float $p )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_int
fs: int stats_rand_gen_int ( void )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_ipoisson
fs: int stats_rand_gen_ipoisson ( float $mu )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_iuniform
fs: int stats_rand_gen_iuniform ( int $low , int $high )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_noncenral_chisquare
fs: float stats_rand_gen_noncenral_chisquare ( float $df , float $xnonc )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_noncentral_f
fs: float stats_rand_gen_noncentral_f ( float $dfn , float $dfd , float $xnonc )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_noncentral_t
fs: float stats_rand_gen_noncentral_t ( float $df , float $xnonc )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_normal
fs: float stats_rand_gen_normal ( float $av , float $sd )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_gen_t
fs: float stats_rand_gen_t ( float $df )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_get_seeds
fs: array stats_rand_get_seeds ( void )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_phrase_to_seeds
fs: array stats_rand_phrase_to_seeds ( string $phrase )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_ranf
fs: float stats_rand_ranf ( void )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_rand_setall
fs: void stats_rand_setall ( int $iseed1 , int $iseed2 )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_skew
fs: float stats_skew ( array $a )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_standard_deviation
fs: float stats_standard_deviation ( array $a [, bool $sample ] )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_stat_binomial_coef
fs: float stats_stat_binomial_coef ( int $x , int $n )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_stat_correlation
fs: float stats_stat_correlation ( array $arr1 , array $arr2 )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_stat_gennch
fs: float stats_stat_gennch ( int $n )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_stat_independent_t
fs: float stats_stat_independent_t ( array $arr1 , array $arr2 )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_stat_innerproduct
fs: float stats_stat_innerproduct ( array $arr1 , array $arr2 )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_stat_noncentral_t
fs: float stats_stat_noncentral_t ( float $par1 , float $par2 , float $par3 , int $which )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_stat_paired_t
fs: float stats_stat_paired_t ( array $arr1 , array $arr2 )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_stat_percentile
fs: float stats_stat_percentile ( float $df , float $xnonc )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_stat_powersum
fs: float stats_stat_powersum ( array $arr , float $power )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: stats_variance
fs: float stats_variance ( array $a [, bool $sample ] )
fd: 
vi: PECL stats:1.0.0-1.0.2
pt: Statistics
fn: str_getcsv
fs: 
fd: 
vi: 
pt: 
fn: str_ireplace
fs: mixed str_ireplace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )
fd: This function returns a string or an array with all occurrences of search in subject (ignoring case) replaced with the given replace value.
vi: PHP 5
pt: String
fn: str_pad
fs: string str_pad ( string $input , int $pad_length [, string $pad_string [, int $pad_type ]] )
fd: This functions returns the input string padded on the left, the right, or both sides to the specified padding length. If the optional argument pad_string is not supplied, the input is padded with spaces, otherwise it is padded with characters from pad_string up to the limit.
vi: PHP 4 >= 4.0.1, PHP 5
pt: String
fn: str_repeat
fs: string str_repeat ( string $input , int $multiplier )
fd: Returns input repeated multiplier times.
vi: PHP 4, PHP 5
pt: String
fn: str_replace
fs: mixed str_replace ( mixed $search , mixed $replace , mixed $subject [, int &$count ] )
fd: This function returns a string or an array with all occurrences of search in subject replaced with the given replace value. 
vi: PHP 4, PHP 5
pt: String
fn: str_rot13
fs: string str_rot13 ( string $str )
fd: Performs the ROT13 encoding on the str argument and returns the resulting string. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: String
fn: str_shuffle
fs: string str_shuffle ( string $str )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: String
fn: str_split
fs: array str_split ( string $string [, int $split_length ] )
fd: Converts a string to an array.
vi: PHP 5
pt: String
fn: str_word_count
fs: mixed str_word_count ( string $string [, int $format [, string $charlist ]] )
fd: Counts the number of words inside string. If the optional format is not specified, then the return value will be an integer representing the number of words found. In the event the format is specified, the return value will be an array, content of which is dependent on the format. The possible value for the format and the resultant outputs are listed below. 
vi: PHP 4 >= 4.3.0, PHP 5
pt: String
fn: strcasecmp
fs: int strcasecmp ( string $str1 , string $str2 )
fd: Binary safe case-insensitive string comparison.
vi: PHP 4, PHP 5
pt: String
fn: strchr
fs: 
fd: 
vi: PHP 4, PHP 5
pt: String
fn: strcmp
fs: int strcmp ( string $str1 , string $str2 )
fd: 
vi: PHP 4, PHP 5
pt: String
fn: strcoll
fs: int strcoll ( string $str1 , string $str2 )
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: String
fn: strcspn
fs: int strcspn ( string $str1 , string $str2 [, int $start [, int $length ]] )
fd: Returns the length of the initial segment of str1 which does not contain any of the characters in str2.
vi: PHP 4, PHP 5
pt: String
fn: stream_bucket_append
fs: void stream_bucket_append ( resource $brigade , resource $bucket )
fd: 
vi: PHP 5
pt: Stream
fn: stream_bucket_make_writeable
fs: object stream_bucket_make_writeable ( resource $brigade )
fd: 
vi: PHP 5
pt: Stream
fn: stream_bucket_new
fs: object stream_bucket_new ( resource $stream , string $buffer )
fd: 
vi: PHP 5
pt: Stream
fn: stream_bucket_prepend
fs: void stream_bucket_prepend ( resource $brigade , resource $bucket )
fd: 
vi: PHP 5
pt: Stream
fn: stream_context_create
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_context_get_default
fs: 
fd: 
vi: PHP 5 >= 5.1.0
pt: Stream
fn: stream_context_get_options
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_context_set_option
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_context_set_params
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_copy_to_stream
fs: int stream_copy_to_stream ( resource $source , resource $dest [, int $maxlength [, int $offset ]] )
fd: Makes a copy of up to maxlength bytes of data from the current position (or from the offset position, if specified) in source to dest. If maxlength is not specified, all remaining content in source will be copied.
vi: PHP 5
pt: Stream
fn: stream_encoding
fs: bool stream_encoding ( resource $stream [, string $encoding ] )
fd: 
vi: 
pt: Stream
fn: stream_filter_append
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_filter_prepend
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_filter_register
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_filter_remove
fs: 
fd: 
vi: PHP 5 >= 5.1.0
pt: Stream
fn: stream_get_contents
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_get_filters
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_get_line
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_get_meta_data
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_get_transports
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_get_wrappers
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_register_wrapper
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_resolve_include_path
fs: string stream_resolve_include_path ( string $filename [, resource $context ] )
fd: 
vi: 
pt: Stream
fn: stream_select
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_set_blocking
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_set_timeout
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_set_write_buffer
fs: 
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Stream
fn: stream_socket_accept
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_socket_client
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_socket_enable_crypto
fs: 
fd: 
vi: PHP 5 >= 5.1.0
pt: Stream
fn: stream_socket_get_name
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_socket_pair
fs: array stream_socket_pair ( int $domain , int $type , int $protocol )
fd: stream_socket_pair() creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication).
vi: PHP 5 >= 5.1.0
pt: Stream
fn: stream_socket_recvfrom
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_socket_sendto
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_socket_server
fs: 
fd: 
vi: PHP 5
pt: Stream
fn: stream_socket_shutdown
fs: bool stream_socket_shutdown ( resource $stream , int $how )
fd: Shutdowns (partially or not) a full-duplex connection.
vi: PHP 5 >= 5.2.1
pt: Stream
fn: stream_wrapper_register
fs: 
fd: 
vi: PHP 4 >= 4.3.2, PHP 5
pt: Stream
fn: stream_wrapper_restore
fs: 
fd: 
vi: PHP 5 >= 5.1.0
pt: Stream
fn: stream_wrapper_unregister
fs: 
fd: 
vi: PHP 5 >= 5.1.0
pt: Stream
fn: strftime
fs: string strftime ( string $format [, int $timestamp ] )
fd: Returns a string formatted according to the given format string using the given timestamp or the current local time if no timestamp is given.
vi: PHP 4, PHP 5
pt: Date and Time
fn: strip_tags
fs: string strip_tags ( string $str [, string $allowable_tags ] )
fd: This function tries to return a string with all HTML and PHP tags stripped from a given str.
vi: PHP 4, PHP 5
pt: String
fn: stripcslashes
fs: string stripcslashes ( string $str )
fd: Returns a string with backslashes stripped off. Recognizes C-like \n, \r ..., octal and hexadecimal representation.
vi: PHP 4, PHP 5
pt: String
fn: stripos
fs: int stripos ( string $haystack , string $needle [, int $offset ] )
fd: 
vi: PHP 5
pt: String
fn: stripslashes
fs: string stripslashes ( string $str )
fd: Un-quotes a quoted string. 
vi: PHP 4, PHP 5
pt: String
fn: stristr
fs: string stristr ( string $haystack , string $needle , bool $before_needle )
fd: Returns all of haystack from the first occurrence of needle to the end.
vi: PHP 4, PHP 5
pt: String
fn: strlen
fs: int strlen ( string $string )
fd: Returns the length of the given string.
vi: PHP 4, PHP 5
pt: String
fn: strnatcasecmp
fs: int strnatcasecmp ( string $str1 , string $str2 )
fd: This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would.
vi: PHP 4, PHP 5
pt: String
fn: strnatcmp
fs: int strnatcmp ( string $str1 , string $str2 )
fd: This function implements a comparison algorithm that orders alphanumeric strings in the way a human being would, this is described as a natural ordering. Note that this comparison is case sensitive.
vi: PHP 4, PHP 5
pt: String
fn: strncasecmp
fs: int strncasecmp ( string $str1 , string $str2 , int $len )
fd: 
vi: PHP 4 >= 4.0.2, PHP 5
pt: String
fn: strncmp
fs: int strncmp ( string $str1 , string $str2 , int $len )
fd: 
vi: PHP 4, PHP 5
pt: String
fn: strpbrk
fs: string strpbrk ( string $haystack , string $char_list )
fd: strpbrk() searches the haystack string for a char_list.
vi: PHP 5
pt: String
fn: strpos
fs: int strpos ( string $haystack , mixed $needle [, int $offset ] )
fd: Returns the numeric position of the first occurrence of needle in the haystack string.
vi: PHP 4, PHP 5
pt: String
fn: strptime
fs: array strptime ( string $date , string $format )
fd: strptime() returns an array with the date parsed, or FALSE on error. 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: strrchr
fs: string strrchr ( string $haystack , string $needle )
fd: This function returns the portion of haystack which starts at the last occurrence of needle and goes until the end of haystack.
vi: PHP 4, PHP 5
pt: String
fn: strrev
fs: string strrev ( string $string )
fd: Returns string, reversed.
vi: PHP 4, PHP 5
pt: String
fn: strripos
fs: int strripos ( string $haystack , string $needle [, int $offset ] )
fd: Find position of last occurrence of a case-insensitive string in a string.
vi: PHP 5
pt: String
fn: strrpos
fs: int strrpos ( string $haystack , string $needle [, int $offset ] )
fd: Returns the numeric position of the last occurrence of needle in the haystack string. Note that the needle in this case can only be a single character in PHP 4. If a string is passed as the needle, then only the first character of that string will be used. 
vi: PHP 4, PHP 5
pt: String
fn: strspn
fs: int strspn ( string $str1 , string $str2 [, int $start [, int $length ]] )
fd: Finds the length of the initial segment matching mask. 
vi: PHP 4, PHP 5
pt: String
fn: strstr
fs: string strstr ( string $haystack , string $needle , bool $before_needle )
fd: Returns part of haystack string from the first occurrence of needle to the end of haystack. 
vi: PHP 4, PHP 5
pt: String
fn: strtok
fs: 
fd: 
vi: PHP 4, PHP 5
pt: String
fn: strtolower
fs: string strtolower ( string $str )
fd: Returns string with all alphabetic characters converted to lowercase. 
vi: PHP 4, PHP 5
pt: String
fn: strtotime
fs: int strtotime ( string $time [, int $now ] )
fd: This function will use the TZ environment variable (if available) to calculate the timestamp. Since PHP 5.1.0 there are easier ways to define the timezone that is used across all date/time functions.
vi: PHP 4, PHP 5
pt: Date and Time
fn: strtoupper
fs: string strtoupper ( string $string )
fd: Returns string with all alphabetic characters converted to uppercase. 
vi: PHP 4, PHP 5
pt: String
fn: strtr
fs: 
fd: 
vi: PHP 4, PHP 5
pt: String
fn: strval
fs: string strval ( mixed $var )
fd: 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: substr
fs: string substr ( string $string , int $start [, int $length ] )
fd: Returns the portion of string specified by the start and length parameters.
vi: PHP 4, PHP 5
pt: String
fn: substr_compare
fs: int substr_compare ( string $main_str , string $str , int $offset [, int $length [, bool $case_insensitivity ]] )
fd: substr_compare() compares main_str from position offset with str up to length characters.
vi: PHP 5
pt: String
fn: substr_count
fs: int substr_count ( string $haystack , string $needle [, int $offset [, int $length ]] )
fd: substr_count() returns the number of times the needle substring occurs in the haystack string. Please note that needle is case sensitive. 
vi: PHP 4, PHP 5
pt: String
fn: substr_replace
fs: mixed substr_replace ( mixed $string , string $replacement , int $start [, int $length ] )
fd: substr_replace() replaces a copy of string delimited by the start and (optionally) length parameters with the string given in replacement.
vi: PHP 4, PHP 5
pt: String
fn: svn_add
fs: bool svn_add ( string $path [, bool $recursive [, bool $force ]] )
fd: Adds the file, directory or symbolic link at path to the working directory.
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_auth_get_parameter
fs: string svn_auth_get_parameter ( string $key )
fd: Retrieves authentication parameter at key.
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_auth_set_parameter
fs: void svn_auth_set_parameter ( string $key , string $value )
fd: Sets authentication parameter at key to value.
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_cat
fs: string svn_cat ( string $repos_url [, int $revision_no ] )
fd: Returns the contents of the URL repos_url to a file in the repository, optionally at revision number revision_no.
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_checkout
fs: bool svn_checkout ( string $repos , string $targetpath [, int $revision ] )
fd: Checks out a working copy from the repository at repos to targetpath at revision revision.
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_cleanup
fs: bool svn_cleanup ( string $workingdir )
fd: Recursively cleanup working copy directory workingdir, finishing any incomplete operations and removing working copy locks. Use when a working copy is in limbo and needs to be usable again.
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_client_version
fs: string svn_client_version ( void )
fd: Returns the version of the SVN client libraries
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_commit
fs: array svn_commit ( string $log , array $targets [, bool $dontrecurse ] )
fd: Commits changes made in the local working copy files enumerated in the targets array to the repository, with the log message log. Directories in the targets array will be recursively committed unless dontrecurse is set to true. 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_diff
fs: array svn_diff ( string $path1 , int $rev1 , string $path2 , int $rev2 )
fd: Recursively diffs two paths, path1 and path2. 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_fs_abort_txn
fs: bool svn_fs_abort_txn ( resource $txn )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_apply_text
fs: resource svn_fs_apply_text ( resource $root , string $path )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_begin_txn2
fs: resource svn_fs_begin_txn2 ( resource $repos , int $rev )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_change_node_prop
fs: bool svn_fs_change_node_prop ( resource $root , string $path , string $name , string $value )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_check_path
fs: int svn_fs_check_path ( resource $fsroot , string $path )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_fs_contents_changed
fs: bool svn_fs_contents_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_copy
fs: bool svn_fs_copy ( resource $from_root , string $from_path , resource $to_root , string $to_path )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_delete
fs: bool svn_fs_delete ( resource $root , string $path )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_dir_entries
fs: array svn_fs_dir_entries ( resource $fsroot , string $path )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_fs_file_contents
fs: resource svn_fs_file_contents ( resource $fsroot , string $path )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_fs_file_length
fs: int svn_fs_file_length ( resource $fsroot , string $path )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_fs_is_dir
fs: bool svn_fs_is_dir ( resource $root , string $path )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_is_file
fs: bool svn_fs_is_file ( resource $root , string $path )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_make_dir
fs: bool svn_fs_make_dir ( resource $root , string $path )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_make_file
fs: bool svn_fs_make_file ( resource $root , string $path )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_node_created_rev
fs: int svn_fs_node_created_rev ( resource $fsroot , string $path )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_fs_node_prop
fs: string svn_fs_node_prop ( resource $fsroot , string $path , string $propname )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_fs_props_changed
fs: bool svn_fs_props_changed ( resource $root1 , string $path1 , resource $root2 , string $path2 )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_revision_prop
fs: string svn_fs_revision_prop ( resource $fs , int $revnum , string $propname )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_fs_revision_root
fs: resource svn_fs_revision_root ( resource $fs , int $revnum )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_fs_txn_root
fs: resource svn_fs_txn_root ( resource $txn )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_fs_youngest_rev
fs: int svn_fs_youngest_rev ( resource $fs )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_import
fs: bool svn_import ( string $path , string $url , bool $nonrecursive )
fd: Commits unversioned path into repository at url. If path is a directory and nonrecursive is FALSE, the directory will be imported recursively.
vi: PECL svn:0.2
pt: Subversion
fn: svn_log
fs: array svn_log ( string $repos_url [, int $revision_no ] )
fd: svn_log() returns the complete history of the item at the repository URL repos_url, or the history of a specific revision if revision_no is set. 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_ls
fs: array svn_ls ( string $repos_url [, int $revision_no ] )
fd: This function queries the repository URL and returns a list of files and directories, optionally from a specific revision. 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_repos_create
fs: resource svn_repos_create ( string $path [, array $config [, array $fsconfig ]] )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_repos_fs
fs: resource svn_repos_fs ( resource $repos )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_repos_fs_begin_txn_for_commit
fs: resource svn_repos_fs_begin_txn_for_commit ( resource $repos , int $rev , string $author , string $log_msg )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_repos_fs_commit_txn
fs: int svn_repos_fs_commit_txn ( resource $txn )
fd: 
vi: PECL svn:0.2
pt: Subversion
fn: svn_repos_hotcopy
fs: bool svn_repos_hotcopy ( string $repospath , string $destpath , bool $cleanlogs )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_repos_open
fs: resource svn_repos_open ( string $path )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_repos_recover
fs: bool svn_repos_recover ( string $path )
fd: 
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_status
fs: array svn_status ( string $path [, bool $recursive [, bool $get_all [, bool $update [, bool $no_ignore ]]]] )
fd: Returns the status of working copy files and directories, giving modifications, additions, deletions and other changes to items in the working copy.
vi: PECL svn:0.1-0.2
pt: Subversion
fn: svn_update
fs: int svn_update ( string $path [, int $revno [, bool $recurse ]] )
fd: Update working copy at path to revision revno. If recurse is true, directories will be recursively updated.
vi: PECL svn:0.1-0.2
pt: Subversion
fn: swf_actiongeturl
fs: void swf_actiongeturl ( string $url , string $target )
fd: Gets the URL specified by the parameter url with the given target.
vi: PHP 4
pt: Shockwave Flash
fn: swf_actiongotoframe
fs: void swf_actiongotoframe ( int $framenumber )
fd: The swf_actiongotoframe() function will go to the frame specified by framenumber, play it, and then stop.
vi: PHP 4
pt: Shockwave Flash
fn: swf_actiongotolabel
fs: void swf_actiongotolabel ( string $label )
fd: The swf_actiongotolabel() function displays the frame with the label given by the label parameter and then stops.
vi: PHP 4
pt: Shockwave Flash
fn: swf_actionnextframe
fs: void swf_actionnextframe ( void )
fd: Go forward one frame.
vi: PHP 4
pt: Shockwave Flash
fn: swf_actionplay
fs: void swf_actionplay ( void )
fd: Start playing the flash movie from the current frame.
vi: PHP 4
pt: Shockwave Flash
fn: swf_actionprevframe
fs: 
fd: 
vi: 
pt: 
fn: swf_actionsettarget
fs: void swf_actionsettarget ( string $target )
fd: Sets the context for all actions. You can use this to control other flash movies that are currently playing.
vi: PHP 4
pt: Shockwave Flash
fn: swf_actionstop
fs: void swf_actionstop ( void )
fd: Stop playing the flash movie at the current frame.
vi: PHP 4
pt: Shockwave Flash
fn: swf_actiontogglequality
fs: void swf_actiontogglequality ( void )
fd: Toggle the flash movie between high and low quality.
vi: PHP 4
pt: Shockwave Flash
fn: swf_actionwaitforframe
fs: void swf_actionwaitforframe ( int $framenumber , int $skipcount )
fd: The swf_actionwaitforframe() function will check to see if the frame, specified by the framenumber parameter has been loaded, if not it will skip the number of actions specified by the skipcount parameter. This can be useful for Loading... type animations.
vi: PHP 4
pt: Shockwave Flash
fn: swf_addbuttonrecord
fs: void swf_addbuttonrecord ( int $states , int $shapeid , int $depth )
fd: Allow you to define the specifics of using a button.
vi: PHP 4
pt: Shockwave Flash
fn: swf_addcolor
fs: void swf_addcolor ( float $r , float $g , float $b , float $a )
fd: Sets the global add color to the specified color.
vi: PHP 4
pt: Shockwave Flash
fn: swf_closefile
fs: void swf_closefile ([ int $return_file ] )
fd: 
vi: PHP 4
pt: Shockwave Flash
fn: swf_definebitmap
fs: void swf_definebitmap ( int $objid , string $image_name )
fd: The swf_definebitmap() function defines a bitmap given an image.
vi: PHP 4
pt: Shockwave Flash
fn: swf_definefont
fs: void swf_definefont ( int $fontid , string $fontname )
fd: The swf_definefont() function defines a font parameter and gives it the specified id. It then sets the font given by fontname to the current font.
vi: PHP 4
pt: Shockwave Flash
fn: swf_defineline
fs: void swf_defineline ( int $objid , float $x1 , float $y1 , float $x2 , float $y2 , float $width )
fd: Defines a line.
vi: PHP 4
pt: Shockwave Flash
fn: swf_definepoly
fs: void swf_definepoly ( int $objid , array $coords , int $npoints , float $width )
fd: Defines a polygon given an array of x, y coordinates.
vi: PHP 4
pt: Shockwave Flash
fn: swf_definerect
fs: void swf_definerect ( int $objid , float $x1 , float $y1 , float $x2 , float $y2 , float $width )
fd: Defines a rectangle with an upper left hand coordinate and a lower right hand coordinate.
vi: PHP 4
pt: Shockwave Flash
fn: swf_definetext
fs: void swf_definetext ( int $objid , string $str , int $docenter )
fd: Defines a text string using the current font and font size.
vi: PHP 4
pt: Shockwave Flash
fn: swf_endbutton
fs: void swf_endbutton ( void )
fd: The swf_endbutton() function ends the definition of the current button.
vi: PHP 4
pt: Shockwave Flash
fn: swf_enddoaction
fs: void swf_enddoaction ( void )
fd: 
vi: PHP 4
pt: Shockwave Flash
fn: swf_endshape
fs: void swf_endshape ( void )
fd: The swf_endshape() completes the definition of the current shape.
vi: PHP 4
pt: Shockwave Flash
fn: swf_endsymbol
fs: void swf_endsymbol ( void )
fd: 
vi: PHP 4
pt: Shockwave Flash
fn: swf_fontsize
fs: void swf_fontsize ( float $size )
fd: Changes the font size to the value given by the size parameter.
vi: PHP 4
pt: Shockwave Flash
fn: swf_fontslant
fs: void swf_fontslant ( float $slant )
fd: Set the current font slant to the angle indicated by the slant parameter.
vi: PHP 4
pt: Shockwave Flash
fn: swf_fonttracking
fs: void swf_fonttracking ( float $tracking )
fd: Set the font tracking to the value specified by the tracking parameter. This function is used to increase the spacing between letters and text, positive values increase the space and negative values decrease the space between letters.
vi: PHP 4
pt: Shockwave Flash
fn: swf_getbitmapinfo
fs: array swf_getbitmapinfo ( int $bitmapid )
fd: Returns information about a bitmap.
vi: PHP 4
pt: Shockwave Flash
fn: swf_getfontinfo
fs: array swf_getfontinfo ( void )
fd: Gets information about the font by giving the height in pixels of a capital A and a lowercase x.
vi: PHP 4
pt: Shockwave Flash
fn: swf_getframe
fs: int swf_getframe ( void )
fd: The swf_getframe() function gets the number of the current frame.
vi: PHP 4
pt: Shockwave Flash
fn: swf_labelframe
fs: void swf_labelframe ( string $name )
fd: Labels the current frame with the given name.
vi: PHP 4
pt: Shockwave Flash
fn: swf_lookat
fs: void swf_lookat ( float $view_x , float $view_y , float $view_z , float $reference_x , float $reference_y , float $reference_z , float $twist )
fd: Defines a viewing transformation by giving the viewing position and the coordinates of a reference point in the scene.
vi: PHP 4
pt: Shockwave Flash
fn: swf_modifyobject
fs: void swf_modifyobject ( int $depth , int $how )
fd: Updates the position and/or color of the object at the specified depth.
vi: PHP 4
pt: Shockwave Flash
fn: swf_mulcolor
fs: void swf_mulcolor ( float $r , float $g , float $b , float $a )
fd: Sets the global multiply color to the given one.
vi: PHP 4
pt: Shockwave Flash
fn: swf_nextid
fs: int swf_nextid ( void )
fd: The swf_nextid() function returns the next available object id.
vi: PHP 4
pt: Shockwave Flash
fn: swf_oncondition
fs: void swf_oncondition ( int $transition )
fd: The swf_oncondition() function describes a transition that will trigger an action list.
vi: PHP 4
pt: Shockwave Flash
fn: swf_openfile
fs: void swf_openfile ( string $filename , float $width , float $height , float $framerate , float $r , float $g , float $b )
fd: Opens a new file. This must be the first function you call, otherwise your script will not work.
vi: PHP 4
pt: Shockwave Flash
fn: swf_ortho
fs: void swf_ortho ( float $xmin , float $xmax , float $ymin , float $ymax , float $zmin , float $zmax )
fd: Defines an orthographic mapping of user coordinates onto the current viewport.
vi: PHP 4 >= 4.0.1
pt: Shockwave Flash
fn: swf_ortho2
fs: void swf_ortho2 ( float $xmin , float $xmax , float $ymin , float $ymax )
fd: Defines a two dimensional orthographic mapping of user coordinates onto the current viewport, this defaults to one to one mapping of the area of the Flash movie. 
vi: PHP 4
pt: Shockwave Flash
fn: swf_perspective
fs: void swf_perspective ( float $fovy , float $aspect , float $near , float $far )
fd: Defines a perspective projection transformation. 
vi: PHP 4
pt: Shockwave Flash
fn: swf_placeobject
fs: void swf_placeobject ( int $objid , int $depth )
fd: Places the object in the current frame at a specified depth. 
vi: PHP 4
pt: Shockwave Flash
fn: swf_polarview
fs: void swf_polarview ( float $dist , float $azimuth , float $incidence , float $twist )
fd: The swf_polarview() function defines the viewer's position in polar coordinates.
vi: PHP 4
pt: Shockwave Flash
fn: swf_popmatrix
fs: void swf_popmatrix ( void )
fd: Pushes the current transformation matrix back onto the stack.
vi: PHP 4
pt: Shockwave Flash
fn: swf_posround
fs: void swf_posround ( int $round )
fd: Enables or disables the rounding of the translation when objects are placed or moved, there are times when text becomes more readable because rounding has been enabled.
vi: PHP 4
pt: Shockwave Flash
fn: swf_pushmatrix
fs: void swf_pushmatrix ( void )
fd: Pushes the current transformation matrix back onto the stack.
vi: PHP 4
pt: Shockwave Flash
fn: swf_removeobject
fs: void swf_removeobject ( int $depth )
fd: Removes the object at the depth specified by depth.
vi: PHP 4
pt: Shockwave Flash
fn: swf_rotate
fs: void swf_rotate ( float $angle , string $axis )
fd: Rotates the current transformation by a given angle around the given axis.
vi: PHP 4
pt: Shockwave Flash
fn: swf_scale
fs: void swf_scale ( float $x , float $y , float $z )
fd: The swf_scale() scales curve coordinates by the given value.
vi: PHP 4
pt: Shockwave Flash
fn: swf_setfont
fs: void swf_setfont ( int $fontid )
fd: The swf_setfont() sets the current font to the value given by the fontid parameter.
vi: PHP 4
pt: Shockwave Flash
fn: swf_setframe
fs: void swf_setframe ( int $framenumber )
fd: Changes the active frame to the specified on.
vi: PHP 4
pt: Shockwave Flash
fn: swf_shapearc
fs: void swf_shapearc ( float $x , float $y , float $r , float $ang1 , float $ang2 )
fd: Draws a circular arc.
vi: PHP 4
pt: Shockwave Flash
fn: swf_shapecurveto
fs: void swf_shapecurveto ( float $x1 , float $y1 , float $x2 , float $y2 )
fd: Draws a quadratic bezier curve from the current location, though the two given points. 
vi: PHP 4
pt: Shockwave Flash
fn: swf_shapecurveto3
fs: void swf_shapecurveto3 ( float $x1 , float $y1 , float $x2 , float $y2 , float $x3 , float $y3 )
fd: Draw a cubic bezier curve using the given coordinates. 
vi: PHP 4
pt: Shockwave Flash
fn: swf_shapefillbitmapclip
fs: void swf_shapefillbitmapclip ( int $bitmapid )
fd: Sets the fill to bitmap clipped, empty spaces will be filled by the bitmap.
vi: PHP 4
pt: Shockwave Flash
fn: swf_shapefillbitmaptile
fs: void swf_shapefillbitmaptile ( int $bitmapid )
fd: Sets the fill to bitmap tile, empty spaces will be filled by the bitmap.
vi: PHP 4
pt: Shockwave Flash
fn: swf_shapefilloff
fs: void swf_shapefilloff ( void )
fd: Turns off filling for the current shape.
vi: PHP 4
pt: Shockwave Flash
fn: swf_shapefillsolid
fs: void swf_shapefillsolid ( float $r , float $g , float $b , float $a )
fd: Sets the current fill style to solid, and then sets the fill color to the given color.
vi: PHP 4
pt: Shockwave Flash
fn: swf_shapelinesolid
fs: void swf_shapelinesolid ( float $r , float $g , float $b , float $a , float $width )
fd: Sets the current line style to the given color and width.
vi: PHP 4
pt: Shockwave Flash
fn: swf_shapelineto
fs: void swf_shapelineto ( float $x , float $y )
fd: Draws a line to the x and y coordinates. The current position is then set to that point.
vi: PHP 4
pt: Shockwave Flash
fn: swf_shapemoveto
fs: void swf_shapemoveto ( float $x , float $y )
fd: Moves the current position to the given point.
vi: PHP 4
pt: Shockwave Flash
fn: swf_showframe
fs: void swf_showframe ( void )
fd: Outputs the current frame.
vi: PHP 4
pt: Shockwave Flash
fn: swf_startbutton
fs: void swf_startbutton ( int $objid , int $type )
fd: Starts the definition of a button.
vi: PHP 4
pt: Shockwave Flash
fn: swf_startdoaction
fs: void swf_startdoaction ( void )
fd: Starts the description of an action list for the current frame. This must be called before actions are defined for the current frame.
vi: PHP 4
pt: Shockwave Flash
fn: swf_startshape
fs: void swf_startshape ( int $objid )
fd: Starts a complex shape.
vi: PHP 4
pt: Shockwave Flash
fn: swf_startsymbol
fs: void swf_startsymbol ( int $objid )
fd: Defines an object id as a symbol. Symbols are tiny flash movies that can be played simultaneously.
vi: PHP 4
pt: Shockwave Flash
fn: swf_textwidth
fs: float swf_textwidth ( string $str )
fd: Gives the width of the string in pixels, using the current font and font size.
vi: PHP 4
pt: Shockwave Flash
fn: swf_translate
fs: void swf_translate ( float $x , float $y , float $z )
fd: Translates the current transformation by the given values.
vi: PHP 4
pt: Shockwave Flash
fn: swf_viewport
fs: void swf_viewport ( float $xmin , float $xmax , float $ymin , float $ymax )
fd: Selects an area for future drawing for xmin to xmax and ymin to ymax, if this function is not called the area defaults to the size of the screen.
vi: PHP 4
pt: Shockwave Flash
fn: swfaction.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfbitmap.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfbitmap.getheight
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfbitmap.getwidth
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfbutton.addaction
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfbutton.addasound
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfbutton.addshape
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfbutton.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfbutton.setaction
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfbutton.setdown
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfbutton.sethit
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfbutton.setmenu
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfbutton.setover
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfbutton.setup
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.addaction
fs: 
fd: 
vi: PHP 4 >= 4.2.0
pt: Ming functions for Flash
fn: swfdisplayitem.addcolor
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.endmask
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfdisplayitem.getrot
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfdisplayitem.getx
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfdisplayitem.getxscale
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfdisplayitem.getxskew
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfdisplayitem.gety
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfdisplayitem.getyscale
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfdisplayitem.getyskew
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfdisplayitem.move
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.moveto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.multcolor
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.remove
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfdisplayitem.rotate
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.rotateto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.scale
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.scaleto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.setdepth
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.setmasklevel
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfdisplayitem.setmatrix
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.setname
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.setratio
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.skewx
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.skewxto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.skewy
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfdisplayitem.skewyto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swffill.moveto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swffill.rotateto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swffill.scaleto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swffill.skewxto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swffill.skewyto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swffont.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swffont.getascent
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swffont.getdescent
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swffont.getleading
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swffont.getshape
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swffont.getutf8width
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swffont.getwidth
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swffontchar.addchars
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swffontchar.addutf8chars
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfgradient.addentry
fs: 
fd: 
vi: PHP 4 >= 4.3.0
pt: Ming functions for Flash
fn: swfgradient.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfmorph.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfmorph.getshape1
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfmorph.getshape2
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfmovie.add
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.addexport
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfmovie.addfont
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfmovie.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfmovie.importchar
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfmovie.importfont
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfmovie.labelframe
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.nextframe
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.output
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.remove
fs: 
fd: 
vi: PHP 5 >= 5.2.1
pt: Ming functions for Flash
fn: swfmovie.save
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.savetofile
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.setbackground
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.setdimension
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.setframes
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.setrate
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.startsound
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfmovie.stopsound
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfmovie.streammp3
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfmovie.writeexports
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfprebuiltclip.construct
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfshape.addfill
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfshape.drawarc
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.drawcircle
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.drawcubic
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.drawcubicto
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfshape.drawcurve
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.drawcurveto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.drawglyph
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.drawline
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.drawlineto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.movepen
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.movepento
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.setleftfill
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.setline
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfshape.setrightfill
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfsound.construct
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfsoundinstance.loopcount
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfsoundinstance.loopinpoint
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfsoundinstance.loopoutpoint
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfsoundinstance.nomultiple
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfsprite.add
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfsprite.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swfsprite.labelframe
fs: 
fd: 
vi: PHP 4 >= 4.3.3
pt: Ming functions for Flash
fn: swfsprite.nextframe
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfsprite.remove
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfsprite.setframes
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfsprite.startsound
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfsprite.stopsound
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swftext.addstring
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftext.addutf8string
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swftext.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swftext.getascent
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftext.getdescent
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftext.getleading
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftext.getutf8width
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swftext.getwidth
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftext.moveto
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftext.setcolor
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftext.setfont
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftext.setheight
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftext.setspacing
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.addchars
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swftextfield.addstring
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.align
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.construct
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swftextfield.setbounds
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.setcolor
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.setfont
fs: 
fd: 
vi: PHP 4 >= 4.2.0
pt: Ming functions for Flash
fn: swftextfield.setheight
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.setindentation
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.setleftmargin
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.setlinespacing
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.setmargins
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.setname
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swftextfield.setpadding
fs: 
fd: 
vi: PHP 5
pt: Ming functions for Flash
fn: swftextfield.setrightmargin
fs: 
fd: 
vi: PHP 4 >= 4.0.5
pt: Ming functions for Flash
fn: swfvideostream.construct
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfvideostream.getnumframes
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swfvideostream.setdimension
fs: 
fd: 
vi: 
pt: Ming functions for Flash
fn: swish_construct
fs: void Swish::__construct ( string $index_names )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swish_getmetalist
fs: array Swish->getMetaList ( string $index_name )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swish_getpropertylist
fs: array Swish->getPropertyList ( string $index_name )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swish_prepare
fs: object Swish->prepare ([ string $query ] )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swish_query
fs: object Swish->query ( string $query )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishresult_getmetalist
fs: array SwishResult->getMetaList ( void )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishresult_stem
fs: array SwishResult->stem ( string $word )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishresults_getparsedwords
fs: array SwishResults->getParsedWords ( string $index_name )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishresults_getremovedstopwords
fs: array SwishResults->getRemovedStopwords ( string $index_name )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishresults_nextresult
fs: object SwishResults->nextResult ( void )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishresults_seekresult
fs: int SwishResults->seekResult ( int $position )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishsearch_execute
fs: object SwishSearch->execute ([ string $query ] )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishsearch_resetlimit
fs: void SwishSearch->resetLimit ( void )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishsearch_setlimit
fs: void SwishSearch->setLimit ( string $property , string $low , string $high )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishsearch_setphrasedelimiter
fs: void SwishSearch->setPhraseDelimiter ( string $delimiter )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishsearch_setsort
fs: void SwishSearch->setSort ( string $sort )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: swishsearch_setstructure
fs: void SwishSearch->setStructure ( int $structure )
fd: 
vi: PECL swish:0.1-0.3.0
pt: Swish
fn: sybase_affected_rows
fs: int sybase_affected_rows ([ resource $link_identifier ] )
fd: sybase_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query on the server associated with the specified link identifier. 
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_close
fs: bool sybase_close ([ resource $link_identifier ] )
fd: sybase_close() closes the link to a Sybase database that's associated with the specified link link_identifier. 
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_connect
fs: resource sybase_connect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]] )
fd: sybase_connect() establishes a connection to a Sybase server. 
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_data_seek
fs: bool sybase_data_seek ( resource $result_identifier , int $row_number )
fd: sybase_data_seek() moves the internal row pointer of the Sybase result associated with the specified result identifier to pointer to the specified row number.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_deadlock_retry_count
fs: void sybase_deadlock_retry_count ( int $retry_count )
fd: Using sybase_deadlock_retry_count(), the number of retries can be defined in cases of deadlocks.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Sybase
fn: sybase_fetch_array
fs: array sybase_fetch_array ( resource $result )
fd: 
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_fetch_assoc
fs: array sybase_fetch_assoc ( resource $result )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: Sybase
fn: sybase_fetch_field
fs: object sybase_fetch_field ( resource $result [, int $field_offset ] )
fd: sybase_fetch_field() can be used in order to obtain information about fields in a certain query result.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_fetch_object
fs: object sybase_fetch_object ( resource $result [, mixed $object ] )
fd: 
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_fetch_row
fs: array sybase_fetch_row ( resource $result )
fd: sybase_fetch_row() fetches one row of data from the result associated with the specified result identifier. 
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_field_seek
fs: bool sybase_field_seek ( resource $result , int $field_offset )
fd: Seeks to the specified field offset.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_free_result
fs: bool sybase_free_result ( resource $result )
fd: sybase_free_result() only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script ends. You may call sybase_free_result() with the result identifier as an argument and the associated result memory will be freed.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_get_last_message
fs: string sybase_get_last_message ( void )
fd: sybase_get_last_message() returns the last message reported by the server.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_min_client_severity
fs: void sybase_min_client_severity ( int $severity )
fd: sybase_min_client_severity() sets the minimum client severity level.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_min_error_severity
fs: void sybase_min_error_severity ( int $severity )
fd: sybase_min_error_severity() sets the minimum error severity level.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_min_message_severity
fs: void sybase_min_message_severity ( int $severity )
fd: sybase_min_message_severity() sets the minimum message severity level.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_min_server_severity
fs: void sybase_min_server_severity ( int $severity )
fd: sybase_min_server_severity() sets the minimum server severity level.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_num_fields
fs: int sybase_num_fields ( resource $result )
fd: sybase_num_fields() returns the number of fields in a result set.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_num_rows
fs: int sybase_num_rows ( resource $result )
fd: sybase_num_rows() returns the number of rows in a result set.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_pconnect
fs: resource sybase_pconnect ([ string $servername [, string $username [, string $password [, string $charset [, string $appname ]]]]] )
fd: 
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_query
fs: mixed sybase_query ( string $query [, resource $link_identifier ] )
fd: sybase_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_result
fs: string sybase_result ( resource $result , int $row , mixed $field )
fd: Returns the contents of the cell at the row and offset in the specified Sybase result set. 
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_select_db
fs: bool sybase_select_db ( string $database_name [, resource $link_identifier ] )
fd: sybase_select_db() sets the current active database on the server that's associated with the specified link identifier. 
vi: PHP 4, PHP 5
pt: Sybase
fn: sybase_set_message_handler
fs: bool sybase_set_message_handler ( callback $handler [, resource $connection ] )
fd: sybase_set_message_handler() sets a user function to handle messages generated by the server. You may specify the name of a global function, or use an array to specify an object reference and a method name.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Sybase
fn: sybase_unbuffered_query
fs: resource sybase_unbuffered_query ( string $query , resource $link_identifier [, bool $store_result ] )
fd: sybase_unbuffered_query() sends a query to the currently active database on the server that's associated with the specified link identifier. If the link identifier isn't specified, the last opened link is assumed.
vi: PHP 4 >= 4.3.0, PHP 5
pt: Sybase
fn: symlink
fs: bool symlink ( string $target , string $link )
fd: symlink() creates a symbolic link to the existing target with the specified name link.
vi: PHP 4, PHP 5
pt: Filesystem
fn: sys_get_temp_dir
fs: string sys_get_temp_dir ( void )
fd: Returns the path of the directory PHP stores temporary files in by default.
vi: PHP 5 >= 5.2.1
pt: PHP Options&Information
fn: sys_getloadavg
fs: array sys_getloadavg ( void )
fd: Returns three samples representing the average system load (the number of processes in the system run queue) over the last 1, 5 and 15 minutes, respectively.
vi: PHP 5 >= 5.1.3
pt: Miscellaneous
fn: syslog
fs: bool syslog ( int $priority , string $message )
fd: syslog() generates a log message that will be distributed by the system logger. 
vi: PHP 4, PHP 5
pt: Network
fn: system
fs: string system ( string $command [, int &$return_var ] )
fd: system() is just like the C version of the function in that it executes the given command and outputs the result. 
vi: PHP 4, PHP 5
pt: Program Execution
fn: tan
fs: float tan ( float $arg )
fd: tan() returns the tangent of the arg parameter. The arg parameter is in radians.
vi: PHP 4, PHP 5
pt: Mathematical
fn: tanh
fs: float tanh ( float $arg )
fd: Returns the hyperbolic tangent of arg, defined as sinh(arg)/cosh(arg).
vi: PHP 4 >= 4.0.7, PHP 5
pt: Mathematical
fn: tcpwrap_check
fs: bool tcpwrap_check ( string $daemon , string $address [, string $user [, bool $nodns ]] )
fd: This function consults the /etc/hosts.allow and /etc/hosts.deny files to check if access to service daemon should be granted or denied for a client.
vi: PECL tcpwrap:0.1-1.0
pt: TCP Wrappers
fn: tempnam
fs: string tempnam ( string $dir , string $prefix )
fd: Creates a file with a unique filename, with access permission set to 0600, in the specified directory. If the directory does not exist, tempnam() may generate a file in the system's temporary directory, and return the name of that.
vi: PHP 4, PHP 5
pt: Filesystem
fn: textdomain
fs: string textdomain ( string $text_domain )
fd: 
vi: PHP 4, PHP 5
pt: Gettext
fn: tidyNode_hasChildren
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: Tidy
fn: tidyNode_hasSiblings
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: Tidy
fn: tidyNode_isAsp
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: Tidy
fn: tidyNode_isComment
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: Tidy
fn: tidyNode_isHtml
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: Tidy
fn: tidyNode_isJste
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: Tidy
fn: tidyNode_isPhp
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: Tidy
fn: tidyNode_isText
fs: 
fd: 
vi: PHP 5 >= 5.0.1
pt: Tidy
fn: tidy_access_count
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_clean_repair
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_config_count
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_construct
fs: 
fd: 
vi: 
pt: Tidy
fn: tidy_diagnose
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_error_count
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_get_body
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.0
pt: Tidy
fn: tidy_get_config
fs: 
fd: 
vi: PHP 5, PECL tidy:0.7-1.2
pt: Tidy
fn: tidy_get_error_buffer
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_get_head
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.0
pt: Tidy
fn: tidy_get_html
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.0
pt: Tidy
fn: tidy_get_html_ver
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_get_opt_doc
fs: string tidy_get_opt_doc ( tidy $object , string $optname )
fd: 
vi: PHP 5 >= 5.1.0
pt: Tidy
fn: tidy_get_output
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_get_release
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_get_root
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.0
pt: Tidy
fn: tidy_get_status
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_getopt
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_is_xhtml
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_is_xml
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_load_config
fs: 
fd: 
vi: PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_node_get_attr
fs: 
fd: 
vi: PECL tidy:0.7-1.0
pt: Tidy
fn: tidy_node_get_nodes
fs: 
fd: 
vi: PECL tidy:0.7-1.0
pt: Tidy
fn: tidy_node_next
fs: 
fd: 
vi: PECL tidy:0.7-1.0
pt: Tidy
fn: tidy_node_prev
fs: 
fd: 
vi: PECL tidy:0.7-1.0
pt: Tidy
fn: tidy_parse_file
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_parse_string
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_repair_file
fs: 
fd: 
vi: PHP 5, PECL tidy:0.7-1.2
pt: Tidy
fn: tidy_repair_string
fs: 
fd: 
vi: PHP 5, PECL tidy:0.7-1.2
pt: Tidy
fn: tidy_reset_config
fs: 
fd: 
vi: PECL tidy:0.7-1.2
pt: Tidy
fn: tidy_save_config
fs: 
fd: 
vi: PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_set_encoding
fs: 
fd: 
vi: PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_setopt
fs: 
fd: 
vi: PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidy_warning_count
fs: 
fd: 
vi: PHP 5, PECL tidy:0.5.2-1.2
pt: Tidy
fn: tidynode_getparent
fs: tidyNode tidyNode::getParent ( void )
fd: Returns the parent node of the current node.
vi: PHP 5 >= 5.2.2
pt: Tidy
fn: time
fs: int time ( void )
fd: Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).
vi: PHP 4, PHP 5
pt: Date and Time
fn: time_nanosleep
fs: mixed time_nanosleep ( int $seconds , int $nanoseconds )
fd: Delays program execution for the given number of seconds and nanoseconds.
vi: PHP 5
pt: Miscellaneous
fn: time_sleep_until
fs: bool time_sleep_until ( float $timestamp )
fd: Makes the script sleep until the specified timestamp.
vi: PHP 5 >= 5.1.0
pt: Miscellaneous
fn: timezone_abbreviations_list
fs: array timezone_abbreviations_list ( void )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: timezone_identifiers_list
fs: array timezone_identifiers_list ( void )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: timezone_name_from_abbr
fs: string timezone_name_from_abbr ( string $abbr [, int $gmtOffset [, int $isdst ]] )
fd: 
vi: PHP 5 >= 5.1.3
pt: Date and Time
fn: timezone_name_get
fs: string timezone_name_get ( DateTimeZone $object )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: timezone_offset_get
fs: int timezone_offset_get ( DateTimeZone $object , DateTime $datetime )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: timezone_open
fs: DateTimeZone timezone_open ( string $timezone )
fd: 
vi: PHP 5 >= 5.1.0
pt: Date and Time
fn: timezone_transitions_get
fs: array timezone_transitions_get ( DateTimeZone $object )
fd: 
vi: PHP 5 >= 5.2.0
pt: Date and Time
fn: tmpfile
fs: resource tmpfile ( void )
fd: Creates a temporary file with a unique name in read-write (w+) mode and returns a file handle . 
vi: PHP 4, PHP 5
pt: Filesystem
fn: token_get_all
fs: array token_get_all ( string $source )
fd: token_get_all() parses the given source string into PHP language tokens using the Zend engine's lexical scanner. 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Tokenizer
fn: token_name
fs: string token_name ( int $token )
fd: token_name() gets the symbolic name for a PHP token value.
vi: PHP 4 >= 4.2.0, PHP 5
pt: Tokenizer
fn: touch
fs: bool touch ( string $filename [, int $time [, int $atime ]] )
fd: Attempts to set the access and modification times of the file named in the filename parameter to the value given in time. Note that the access time is always modified, regardless of the number of parameters. 
vi: PHP 4, PHP 5
pt: Filesystem
fn: trigger_error
fs: bool trigger_error ( string $error_msg [, int $error_type ] )
fd: 
vi: PHP 4 >= 4.0.1, PHP 5
pt: Error Handling and Logging
fn: trim
fs: string trim ( string $str [, string $charlist ] )
fd: This function returns a string with whitespace stripped from the beginning and end of str.
vi: PHP 4, PHP 5
pt: String
fn: uasort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: ucfirst
fs: string ucfirst ( string $str )
fd: Returns a string with the first character of str capitalized, if that character is alphabetic. 
vi: PHP 4, PHP 5
pt: String
fn: ucwords
fs: string ucwords ( string $str )
fd: Returns a string with the first character of each word in str capitalized, if that character is alphabetic. 
vi: PHP 4, PHP 5
pt: String
fn: udm_add_search_limit
fs: bool udm_add_search_limit ( resource $agent , int $var , string $val )
fd: udm_add_search_limit() adds search restrictions.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_alloc_agent
fs: resource udm_alloc_agent ( string $dbaddr [, string $dbmode ] )
fd: Allocate a mnoGoSearch session.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_alloc_agent_array
fs: resource udm_alloc_agent_array ( array $databases )
fd: udm_alloc_agent_array() will create an agent with multiple database connections.
vi: PHP 4 >= 4.3.3, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_api_version
fs: int udm_api_version ( void )
fd: Gets the mnoGoSearch API version. 
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_cat_list
fs: array udm_cat_list ( resource $agent , string $category )
fd: Gets all the categories on the same level with the current one. 
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_cat_path
fs: array udm_cat_path ( resource $agent , string $category )
fd: Returns an array describing the path in the categories tree from the tree root to the current one, specified by category.
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_check_charset
fs: 
fd: 
vi: 
pt: 
fn: udm_check_stored
fs: 
fd: 
vi: 
pt: 
fn: udm_clear_search_limits
fs: bool udm_clear_search_limits ( resource $agent )
fd: udm_clear_search_limits() resets defined search limitations.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_close_stored
fs: 
fd: 
vi: 
pt: 
fn: udm_crc32
fs: 
fd: 
vi: 
pt: 
fn: udm_errno
fs: int udm_errno ( resource $agent )
fd: Receiving numeric agent error code.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_error
fs: string udm_error ( resource $agent )
fd: Gets the agent error message.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_find
fs: resource udm_find ( resource $agent , string $query )
fd: Performs a search. 
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_free_agent
fs: int udm_free_agent ( resource $agent )
fd: Freeing up memory allocated for agent session.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_free_ispell_data
fs: bool udm_free_ispell_data ( int $agent )
fd: Frees the memory allocated for ispell data.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_free_res
fs: bool udm_free_res ( resource $res )
fd: Freeing up memory allocated for results.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_get_doc_count
fs: int udm_get_doc_count ( resource $agent )
fd: udm_get_doc_count() returns the number of documents in the database.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_get_res_field
fs: string udm_get_res_field ( resource $res , int $row , int $field )
fd: Fetch a mnoGoSearch result field.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_get_res_param
fs: string udm_get_res_param ( resource $res , int $param )
fd: Gets the mnoGoSearch result parameters.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_hash32
fs: int udm_hash32 ( resource $agent , string $str )
fd: udm_hash32() will take a string str and return a quite unique 32-bit hash number from it.
vi: PHP 4 >= 4.3.3, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_load_ispell_data
fs: bool udm_load_ispell_data ( resource $agent , int $var , string $val1 , string $val2 , int $flag )
fd: udm_load_ispell_data() loads ispell data. 
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: udm_open_stored
fs: 
fd: 
vi: 
pt: 
fn: udm_set_agent_param
fs: bool udm_set_agent_param ( resource $agent , int $var , string $val )
fd: Defines mnoGoSearch session parameters.
vi: PHP 4 >= 4.0.5, PHP 5 <= 5.0.5, PECL mnogosearch:1.0.0
pt: mnoGoSearch
fn: uksort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: umask
fs: int umask ([ int $mask ] )
fd: umask() sets PHP's umask to mask &amp; 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished.
vi: PHP 4, PHP 5
pt: Filesystem
fn: unicode_decode
fs: unicode unicode_decode ( string $input , string $encoding [, int $errmode ] )
fd: Convert a binary string encoded in encoding to a unicode string.
vi: 
pt: Unicode
fn: unicode_encode
fs: string unicode_encode ( unicode $input , string $encoding [, int $errmode ] )
fd: Takes a unicode string and converts it to a string in the specified encoding.
vi: 
pt: Unicode
fn: unicode_get_error_mode
fs: int unicode_get_error_mode ( int $direction )
fd: Return the current error mode for string conversions in direction.
vi: 
pt: Unicode
fn: unicode_get_subst_char
fs: unicode unicode_get_subst_char ( void )
fd: 
vi: 
pt: Unicode
fn: unicode_semantics
fs: bool unicode_semantics ( void )
fd: unicode_semantics() checks whether unicode semantics is enabled.
vi: 
pt: Unicode
fn: unicode_set_error_mode
fs: bool unicode_set_error_mode ( int $direction , int $mode )
fd: This function sets the error mode for string conversions between different encodings. An error can occur during conversion when an illegal character is encountered or if a character cannot be represented into the new encoding. By default, when an error is encountered, the conversion stops.
vi: 
pt: Unicode
fn: unicode_set_subst_char
fs: bool unicode_set_subst_char ( unicode $character )
fd: When converting a string from or to unicode, an invalid or unconvertable character may be encountered. When the conversion error mode is set to U_CONV_ERROR_SUBST, the character that caused the error is substituted by a character set by this function. The default substitution character is ?.
vi: 
pt: Unicode
fn: uniqid
fs: string uniqid ([ string $prefix [, bool $more_entropy ]] )
fd: Gets a prefixed unique identifier based on the current time in microseconds.
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: unixtojd
fs: int unixtojd ([ int $timestamp ] )
fd: Return the Julian Day for a Unix timestamp (seconds since 1.1.1970), or for the current day if no timestamp is given.
vi: PHP 4, PHP 5
pt: Calendar
fn: unlink
fs: bool unlink ( string $filename [, resource $context ] )
fd: Deletes filename. Similar to the Unix C unlink() function.
vi: PHP 4, PHP 5
pt: Filesystem
fn: unpack
fs: array unpack ( string $format , string $data )
fd: Unpacks from a binary string into an array according to the given format. 
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: unregister_tick_function
fs: void unregister_tick_function ( string $function_name )
fd: 
vi: PHP 4 >= 4.0.3, PHP 5
pt: Function Handling
fn: unserialize
fs: mixed unserialize ( string $str )
fd: 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: unset
fs: void unset ( mixed $var [, mixed $var [, mixed $... ]] )
fd: unset() destroys the specified variables. 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: urldecode
fs: string urldecode ( string $str )
fd: Decodes any %## encoding in the given string.
vi: PHP 4, PHP 5
pt: URL
fn: urlencode
fs: string urlencode ( string $str )
fd: This function is convenient when encoding a string to be used in a query part of a URL, as a convenient way to pass variables to the next page.
vi: PHP 4, PHP 5
pt: URL
fn: use_soap_error_handler
fs: bool use_soap_error_handler ([ bool $handler ] )
fd: 
vi: PHP 5
pt: SOAP
fn: user_error
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Error Handling and Logging
fn: usleep
fs: void usleep ( int $micro_seconds )
fd: Delays program execution for the given number of micro seconds.
vi: PHP 4, PHP 5
pt: Miscellaneous
fn: usort
fs: 
fd: 
vi: PHP 4, PHP 5
pt: Array
fn: utf8_decode
fs: string utf8_decode ( string $data )
fd: This function decodes data, assumed to be UTF-8 encoded, to ISO-8859-1.
vi: PHP 4, PHP 5
pt: XML Parser
fn: utf8_encode
fs: string utf8_encode ( string $data )
fd: This function encodes the string data to UTF-8, and returns the encoded version.
vi: PHP 4, PHP 5
pt: XML Parser
fn: var_dump
fs: void var_dump ( mixed $expression [, mixed $expression [, $... ]] )
fd: 
vi: PHP 4, PHP 5
pt: Variable Handling
fn: var_export
fs: mixed var_export ( mixed $expression [, bool $return ] )
fd: 
vi: PHP 4 >= 4.2.0, PHP 5
pt: Variable Handling
fn: variant
fs: 
fd: 
vi: 
pt: 
fn: variant_abs
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_add
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_and
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_cast
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_cat
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_cmp
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_date_from_timestamp
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_date_to_timestamp
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_div
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_eqv
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_fix
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_get_type
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_idiv
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_imp
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_int
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_mod
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_mul
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_neg
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_not
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_or
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_pow
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_round
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_set
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_set_type
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_sub
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: variant_xor
fs: 
fd: 
vi: PHP 5
pt: COM and .Net (Windows)
fn: version_compare
fs: mixed version_compare ( string $version1 , string $version2 [, string $operator ] )
fd: version_compare() compares two PHP-standardized version number strings. This is useful if you would like to write programs working only on some versions of PHP. 
vi: PHP 4 >= 4.0.7, PHP 5
pt: PHP Options&Information
fn: vfprintf
fs: int vfprintf ( resource $handle , string $format , array $args )
fd: Write a string produced according to format to the stream resource specified by handle. 
vi: PHP 5
pt: String
fn: virtual
fs: bool virtual ( string $filename )
fd: virtual() is an Apache-specific function which is similar to <!--#include virtual...--> in mod_include. It performs an Apache sub-request. It is useful for including CGI scripts or .shtml files, or anything else that you would parse through Apache. Note that for a CGI script, the script must generate valid CGI headers. At the minimum that means it must generate a Content-type header. 
vi: PHP 4, PHP 5
pt: Apache-specific
fn: vpopmail_add_alias_domain
fs: bool vpopmail_add_alias_domain ( string $domain , string $aliasdomain )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_add_alias_domain_ex
fs: bool vpopmail_add_alias_domain_ex ( string $olddomain , string $newdomain )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_add_domain
fs: bool vpopmail_add_domain ( string $domain , string $dir , int $uid , int $gid )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_add_domain_ex
fs: bool vpopmail_add_domain_ex ( string $domain , string $passwd [, string $quota [, string $bounce [, bool $apop ]]] )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_add_user
fs: bool vpopmail_add_user ( string $user , string $domain , string $password [, string $gecos [, bool $apop ]] )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_alias_add
fs: bool vpopmail_alias_add ( string $user , string $domain , string $alias )
fd: 
vi: PHP 4 >= 4.0.7, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_alias_del
fs: bool vpopmail_alias_del ( string $user , string $domain )
fd: 
vi: PHP 4 >= 4.0.7, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_alias_del_domain
fs: bool vpopmail_alias_del_domain ( string $domain )
fd: 
vi: PHP 4 >= 4.0.7, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_alias_get
fs: array vpopmail_alias_get ( string $alias , string $domain )
fd: 
vi: PHP 4 >= 4.0.7, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_alias_get_all
fs: array vpopmail_alias_get_all ( string $domain )
fd: 
vi: PHP 4 >= 4.0.7, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_auth_user
fs: bool vpopmail_auth_user ( string $user , string $domain , string $password [, string $apop ] )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_del_domain
fs: bool vpopmail_del_domain ( string $domain )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_del_domain_ex
fs: bool vpopmail_del_domain_ex ( string $domain )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_del_user
fs: bool vpopmail_del_user ( string $user , string $domain )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_error
fs: string vpopmail_error ( void )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_passwd
fs: bool vpopmail_passwd ( string $user , string $domain , string $password [, bool $apop ] )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vpopmail_set_user_quota
fs: bool vpopmail_set_user_quota ( string $user , string $domain , string $quota )
fd: 
vi: PHP 4 >= 4.0.5, PECL vpopmail:0.2
pt: vpopmail
fn: vprintf
fs: int vprintf ( string $format , array $args )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: String
fn: vsprintf
fs: string vsprintf ( string $format , array $args )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: String
fn: w32api_deftype
fs: bool w32api_deftype ( string $typename , string $member1_type , string $member1_name [, string $... [, string $... ]] )
fd: You need to call this function if you would like to define a type for a w32api call.
vi: PHP 4 >= 4.2.0
pt: W32api
fn: w32api_init_dtype
fs: resource w32api_init_dtype ( string $typename , mixed $value [, mixed $... ] )
fd: This function creates an instance of the data type named typename, filling in the values of the data type.
vi: PHP 4 >= 4.2.0
pt: W32api
fn: w32api_invoke_function
fs: mixed w32api_invoke_function ( string $funcname , mixed $argument [, mixed $... ] )
fd: w32api_invoke_function() tries to find the previously registered function, passing the parameters you provided.
vi: PHP 4 >= 4.2.0
pt: W32api
fn: w32api_register_function
fs: bool w32api_register_function ( string $library , string $function_name , string $return_type )
fd: This function tries to find the function_name function in libary, and tries to import it into PHP.
vi: PHP 4 >= 4.2.0
pt: W32api
fn: w32api_set_call_method
fs: void w32api_set_call_method ( int $method )
fd: This function sets the method call type.
vi: PHP 4 >= 4.2.0
pt: W32api
fn: wddx_add_vars
fs: bool wddx_add_vars ( resource $packet_id , mixed $var_name [, mixed $... ] )
fd: Serializes the passed variables and add the result to the fiven packet.
vi: PHP 4, PHP 5
pt: WDDX
fn: wddx_deserialize
fs: 
fd: 
vi: PHP 4, PHP 5
pt: WDDX
fn: wddx_packet_end
fs: string wddx_packet_end ( resource $packet_id )
fd: Ends and returns the given WDDX packet.
vi: PHP 4, PHP 5
pt: WDDX
fn: wddx_packet_start
fs: resource wddx_packet_start ([ string $comment ] )
fd: Start a new WDDX packet for incremental addition of variables. It automatically creates a structure definition inside the packet to contain the variables.
vi: PHP 4, PHP 5
pt: WDDX
fn: wddx_serialize_value
fs: string wddx_serialize_value ( mixed $var [, string $comment ] )
fd: Creates a WDDX packet from a single given value.
vi: PHP 4, PHP 5
pt: WDDX
fn: wddx_serialize_vars
fs: string wddx_serialize_vars ( mixed $var_name [, mixed $... ] )
fd: Creates a WDDX packet with a structure that contains the serialized representation of the passed variables.
vi: PHP 4, PHP 5
pt: WDDX
fn: wddx_unserialize
fs: mixed wddx_unserialize ( string $packet )
fd: Unserializes a WDDX packet.
vi: 
pt: WDDX
fn: win32_create_service
fs: mixed win32_create_service ( array $details [, string $machine ] )
fd: 
vi: 
pt: win32service
fn: win32_delete_service
fs: int win32_delete_service ( string $servicename [, string $machine ] )
fd: Attempts to delete a service from the SCM database. Administrative privileges are required for this to succeed. 
vi: 
pt: win32service
fn: win32_get_last_control_message
fs: int win32_get_last_control_message ( void )
fd: Returns the control code that was last sent to this service process. When running as a service you should periodically check this to determine if your service needs to stop running.
vi: 
pt: win32service
fn: win32_ps_list_procs
fs: array win32_ps_list_procs ( void )
fd: Retrieves statistics about all running processes.
vi: PECL win32ps:1.0.1
pt: win32ps
fn: win32_ps_stat_mem
fs: array win32_ps_stat_mem ( void )
fd: Retrieves statistics about the global memory utilization.
vi: PECL win32ps:1.0.1
pt: win32ps
fn: win32_ps_stat_proc
fs: array win32_ps_stat_proc ([ int $pid ] )
fd: Retrieves statistics about the process with the process id pid.
vi: PECL win32ps:1.0.1
pt: win32ps
fn: win32_query_service_status
fs: mixed win32_query_service_status ( string $servicename [, string $machine ] )
fd: Queries the current status for a service, returning an array of information.
vi: 
pt: win32service
fn: win32_set_service_status
fs: bool win32_set_service_status ( int $status )
fd: Informs the SCM of the current status of a running service. This call is only valid for a running service process.
vi: 
pt: win32service
fn: win32_start_service
fs: int win32_start_service ( string $servicename [, string $machine ] )
fd: Attempts to start the named service. Usually requires administrative privileges.
vi: 
pt: win32service
fn: win32_start_service_ctrl_dispatcher
fs: mixed win32_start_service_ctrl_dispatcher ( string $name )
fd: When launched via the Service Control Manager, a service process is required to check-in with it to establish service monitoring and communication facilities. This function performs the check-in by spawning a thread to handle the lower-level communication with the service control manager. 
vi: 
pt: win32service
fn: win32_stop_service
fs: int win32_stop_service ( string $servicename [, string $machine ] )
fd: Stops a named service. Requires administrative privileges.
vi: 
pt: win32service
fn: wordwrap
fs: string wordwrap ( string $str [, int $width [, string $break [, bool $cut ]]] )
fd: Wraps a string to a given number of characters using a string break character.
vi: PHP 4 >= 4.0.2, PHP 5
pt: String
fn: xattr_get
fs: string xattr_get ( string $filename , string $name [, int $flags ] )
fd: This function gets the value of an extended attribute of a file. 
vi: PECL xattr:0.9-1.0
pt: xattr
fn: xattr_list
fs: array xattr_list ( string $filename [, int $flags ] )
fd: This functions gets a list of names of extended attributes of a file. 
vi: PECL xattr:0.9-1.0
pt: xattr
fn: xattr_remove
fs: bool xattr_remove ( string $filename , string $name [, int $flags ] )
fd: This function removes an extended attribute of a file. 
vi: PECL xattr:0.9-1.0
pt: xattr
fn: xattr_set
fs: bool xattr_set ( string $filename , string $name , string $value [, int $flags ] )
fd: This function sets the value of an extended attribute of a file. 
vi: PECL xattr:0.9-1.0
pt: xattr
fn: xattr_supported
fs: bool xattr_supported ( string $filename [, int $flags ] )
fd: This functions checks if the filesystem holding the given file supports extended attributes. Read access to the file is required.
vi: PECL xattr:1.0
pt: xattr
fn: xdiff_file_diff
fs: bool xdiff_file_diff ( string $file1 , string $file2 , string $dest [, int $context [, bool $minimal ]] )
fd: Makes a diff of two files and stores the result in a file.
vi: PECL xdiff:0.2-1.4
pt: xdiff
fn: xdiff_file_diff_binary
fs: bool xdiff_file_diff_binary ( string $file1 , string $file2 , string $dest )
fd: Makes a binary diff of two files and stores the result in a file. This function works with both text and binary files.
vi: PECL xdiff:0.2-1.4
pt: xdiff
fn: xdiff_file_merge3
fs: mixed xdiff_file_merge3 ( string $file1 , string $file2 , string $file3 , string $dest )
fd: Merges three files into one and stores the result in a file.
vi: PECL xdiff:0.2-1.4
pt: xdiff
fn: xdiff_file_patch
fs: mixed xdiff_file_patch ( string $file , string $patch , string $dest [, int $flags ] )
fd: Patches a file with a unified patch and stores the result in a file.
vi: PECL xdiff:0.2-1.4
pt: xdiff
fn: xdiff_file_patch_binary
fs: bool xdiff_file_patch_binary ( string $file , string $patch , string $dest )
fd: Patches a file with a binary patch and stores the result in a file.
vi: PECL xdiff:0.2-1.4
pt: xdiff
fn: xdiff_string_diff
fs: string xdiff_string_diff ( string $str1 , string $str2 [, int $context [, bool $minimal ]] )
fd: Makes a unified diff of two strings.
vi: PECL xdiff:0.2-1.4
pt: xdiff
fn: xdiff_string_diff_binary
fs: string xdiff_string_diff_binary ( string $str1 , string $str2 )
fd: Makes a binary diff of two strings.
vi: PECL xdiff:0.2-1.4
pt: xdiff
fn: xdiff_string_merge3
fs: mixed xdiff_string_merge3 ( string $str1 , string $str2 , string $str3 [, string &$error ] )
fd: Merges three strings into one.
vi: PECL xdiff:0.2-1.4
pt: xdiff
fn: xdiff_string_patch
fs: string xdiff_string_patch ( string $str , string $patch [, int $flags [, string &$error ]] )
fd: Patches a string with a unified patch string.
vi: PECL xdiff:0.2-1.4
pt: xdiff
fn: xdiff_string_patch_binary
fs: string xdiff_string_patch_binary ( string $str , string $patch )
fd: Patches a string with a binary patch.
vi: PECL xdiff:0.2-1.4
pt: xdiff
fn: xml_error_string
fs: string xml_error_string ( int $code )
fd: Gets the XML parser error string associated with the given code.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_get_current_byte_index
fs: int xml_get_current_byte_index ( resource $parser )
fd: Gets the current byte index of the given XML parser.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_get_current_column_number
fs: int xml_get_current_column_number ( resource $parser )
fd: Gets the current column number of the given XML parser.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_get_current_line_number
fs: int xml_get_current_line_number ( resource $parser )
fd: Gets the current line number for the given XML parser.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_get_error_code
fs: int xml_get_error_code ( resource $parser )
fd: Gets the XML parser error code.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_parse
fs: int xml_parse ( resource $parser , string $data [, bool $is_final ] )
fd: xml_parse() parses an XML document. The handlers for the configured events are called as many times as necessary.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_parse_into_struct
fs: int xml_parse_into_struct ( resource $parser , string $data , array &$values [, array &$index ] )
fd: This function parses an XML file into 2 parallel array structures, one (index) containing pointers to the location of the appropriate values in the values array. These last two parameters must be passed by reference.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_parser_create
fs: resource xml_parser_create ([ string $encoding ] )
fd: xml_parser_create() creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_parser_create_ns
fs: resource xml_parser_create_ns ([ string $encoding [, string $separator ]] )
fd: xml_parser_create_ns() creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions.
vi: PHP 4 >= 4.0.5, PHP 5
pt: XML Parser
fn: xml_parser_free
fs: bool xml_parser_free ( resource $parser )
fd: Frees the given XML parser.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_parser_get_option
fs: mixed xml_parser_get_option ( resource $parser , int $option )
fd: Gets an option value from an XML parser.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_parser_set_option
fs: bool xml_parser_set_option ( resource $parser , int $option , mixed $value )
fd: Sets an option in an XML parser.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_set_character_data_handler
fs: bool xml_set_character_data_handler ( resource $parser , callback $handler )
fd: Sets the character data handler function for the XML parser parser.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_set_default_handler
fs: bool xml_set_default_handler ( resource $parser , callback $handler )
fd: Sets the default handler function for the XML parser parser.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_set_element_handler
fs: bool xml_set_element_handler ( resource $parser , callback $start_element_handler , callback $end_element_handler )
fd: Sets the element handler functions for the XML parser.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_set_end_namespace_decl_handler
fs: bool xml_set_end_namespace_decl_handler ( resource $parser , callback $handler )
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: XML Parser
fn: xml_set_external_entity_ref_handler
fs: bool xml_set_external_entity_ref_handler ( resource $parser , callback $handler )
fd: Sets the external entity reference handler function for the XML parser parser.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_set_notation_decl_handler
fs: bool xml_set_notation_decl_handler ( resource $parser , callback $handler )
fd: Sets the notation declaration handler function for the XML parser parser. 
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_set_object
fs: bool xml_set_object ( resource $parser , object &$object )
fd: This function allows to use parser inside object.
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_set_processing_instruction_handler
fs: bool xml_set_processing_instruction_handler ( resource $parser , callback $handler )
fd: Sets the processing instruction (PI) handler function for the XML parser parser. 
vi: PHP 4, PHP 5
pt: XML Parser
fn: xml_set_start_namespace_decl_handler
fs: bool xml_set_start_namespace_decl_handler ( resource $parser , callback $handler )
fd: 
vi: PHP 4 >= 4.0.5, PHP 5
pt: XML Parser
fn: xml_set_unparsed_entity_decl_handler
fs: bool xml_set_unparsed_entity_decl_handler ( resource $parser , callback $handler )
fd: Sets the unparsed entity declaration handler function for the XML parser parser. 
vi: PHP 4, PHP 5
pt: XML Parser
fn: xmlreader_close
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_expand
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_getattribute
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_getattributeno
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_getattributens
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_getparserproperty
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_isvalid
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_lookupnamespace
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_movetoattribute
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_movetoattributeno
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_movetoattributens
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_movetoelement
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_movetofirstattribute
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_movetonextattribute
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_next
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_open
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_read
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_setparserproperty
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_setrelaxngschema
fs: 
fd: 
vi: PHP 5 >= 5.2.0
pt: XMLReader functions
fn: xmlreader_setrelaxngschemasource
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlreader_xml
fs: 
fd: 
vi: PHP 5 >= 5.1.2
pt: XMLReader functions
fn: xmlrpc_decode
fs: mixed xmlrpc_decode ( string $xml [, string $encoding ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_decode_request
fs: mixed xmlrpc_decode_request ( string $xml , string &$method [, string $encoding ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_encode
fs: string xmlrpc_encode ( mixed $value )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_encode_request
fs: string xmlrpc_encode_request ( string $method , mixed $params [, array $output_options ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_get_type
fs: string xmlrpc_get_type ( mixed $value )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_is_fault
fs: bool xmlrpc_is_fault ( array $arg )
fd: 
vi: PHP 4 >= 4.3.0, PHP 5
pt: XML-RPC
fn: xmlrpc_parse_method_descriptions
fs: array xmlrpc_parse_method_descriptions ( string $xml )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_server_add_introspection_data
fs: int xmlrpc_server_add_introspection_data ( resource $server , array $desc )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_server_call_method
fs: string xmlrpc_server_call_method ( resource $server , string $xml , mixed $user_data [, array $output_options ] )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_server_create
fs: resource xmlrpc_server_create ( void )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_server_destroy
fs: int xmlrpc_server_destroy ( resource $server )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_server_register_introspection_callback
fs: bool xmlrpc_server_register_introspection_callback ( resource $server , string $function )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_server_register_method
fs: bool xmlrpc_server_register_method ( resource $server , string $method_name , string $function )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlrpc_set_type
fs: bool xmlrpc_set_type ( string &$value , string $type )
fd: 
vi: PHP 4 >= 4.0.7, PHP 5
pt: XML-RPC
fn: xmlwriter_end_attribute
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_end_cdata
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_end_comment
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_end_document
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_end_dtd
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_end_dtd_attlist
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_end_dtd_element
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_end_dtd_entity
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_end_element
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_end_pi
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_flush
fs: 
fd: 
vi: PHP 5 >= 5.1.2, PECL xmlwriter:1.0-2.0.4
pt: XMLWriter
fn: xmlwriter_full_end_element
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_open_memory
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_open_uri
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_output_memory
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_set_indent
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_set_indent_string
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_attribute
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_attribute_ns
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_cdata
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_comment
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_document
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_dtd
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_dtd_attlist
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_dtd_element
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_dtd_entity
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_element
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_element_ns
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_start_pi
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_text
fs: 
fd: 
vi: PHP 5 >= 5.1.2, PECL xmlwriter:0.1-2.0.4
pt: XMLWriter
fn: xmlwriter_write_attribute
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_attribute_ns
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_cdata
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_comment
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_dtd
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_dtd_attlist
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_dtd_element
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_dtd_entity
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_element
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_element_ns
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_pi
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xmlwriter_write_raw
fs: 
fd: 
vi: 
pt: XMLWriter
fn: xpath_eval
fs: 
fd: 
vi: PHP 4 >= 4.0.4
pt: DOM XML
fn: xpath_eval_expression
fs: 
fd: 
vi: PHP 4 >= 4.0.4
pt: DOM XML
fn: xpath_new_context
fs: 
fd: 
vi: PHP 4 >= 4.0.4
pt: DOM XML
fn: xpath_register_ns
fs: bool xpath_register_ns ( XPathContext $xpath_context , string $prefix , string $uri )
fd: 
vi: PHP 4 >= 4.2.0
pt: DOM XML
fn: xpath_register_ns_auto
fs: bool xpath_register_ns_auto ( XPathContext $xpath_context [, object $context_node ] )
fd: 
vi: 
pt: DOM XML
fn: xptr_eval
fs: 
fd: 
vi: PHP 4 >= 4.0.4
pt: DOM XML
fn: xptr_new_context
fs: 
fd: 
vi: PHP 4 >= 4.0.4
pt: DOM XML
fn: xsl_xsltprocessor_construct
fs: 
fd: 
vi: 
pt: XSL functions
fn: xsl_xsltprocessor_get_parameter
fs: 
fd: 
vi: 
pt: XSL functions
fn: xsl_xsltprocessor_has_exslt_support
fs: 
fd: 
vi: 
pt: XSL functions
fn: xsl_xsltprocessor_import_stylesheet
fs: 
fd: 
vi: 
pt: XSL functions
fn: xsl_xsltprocessor_register_php_functions
fs: 
fd: 
vi: 
pt: XSL functions
fn: xsl_xsltprocessor_remove_parameter
fs: 
fd: 
vi: 
pt: XSL functions
fn: xsl_xsltprocessor_set_parameter
fs: 
fd: 
vi: 
pt: XSL functions
fn: xsl_xsltprocessor_transform_to_doc
fs: 
fd: 
vi: 
pt: XSL functions
fn: xsl_xsltprocessor_transform_to_uri
fs: 
fd: 
vi: 
pt: XSL functions
fn: xsl_xsltprocessor_transform_to_xml
fs: 
fd: 
vi: 
pt: XSL functions
fn: xslt_backend_info
fs: string xslt_backend_info ( void )
fd: xslt_backend_info() gets information about the compilation settings of the backend.
vi: PHP 4 >= 4.3.0
pt: XSLT
fn: xslt_backend_name
fs: string xslt_backend_name ( void )
fd: xslt_backend_name() gets the name of the backend.
vi: PHP 4 >= 4.3.0
pt: XSLT
fn: xslt_backend_version
fs: string xslt_backend_version ( void )
fd: xslt_backend_version() gets the version number of Sablotron.
vi: PHP 4 >= 4.3.0
pt: XSLT
fn: xslt_create
fs: resource xslt_create ( void )
fd: Create and return a new XSLT processor resource for manipulation by the other XSLT functions.
vi: PHP 4 >= 4.0.3
pt: XSLT
fn: xslt_errno
fs: int xslt_errno ( resource $xh )
fd: Returns an error code describing the last error that occurred on the passed XSLT processor.
vi: PHP 4 >= 4.0.3
pt: XSLT
fn: xslt_error
fs: string xslt_error ( resource $xh )
fd: Returns a string describing the last error that occurred on the passed XSLT processor.
vi: PHP 4 >= 4.0.3
pt: XSLT
fn: xslt_free
fs: void xslt_free ( resource $xh )
fd: Free the XSLT processor identified by the given handle.
vi: PHP 4 >= 4.0.3
pt: XSLT
fn: xslt_getopt
fs: int xslt_getopt ( resource $processor )
fd: xslt_getopt() returns the options on the given processor.
vi: PHP 4 >= 4.3.0
pt: XSLT
fn: xslt_process
fs: mixed xslt_process ( resource $xh , string $xmlcontainer , string $xslcontainer [, string $resultcontainer [, array $arguments [, array $parameters ]]] )
fd: The xslt_process() function is the crux of the XSLT extension. It allows you to perform an XSLT transformation using almost any type of input source - the containers. This is accomplished through the use of argument buffers -- a concept taken from the Sablotron XSLT processor (currently the only XSLT processor this extension supports). The input containers default to a filename 'containing' the document to be processed.
vi: PHP 4 >= 4.0.3
pt: XSLT
fn: xslt_set_base
fs: void xslt_set_base ( resource $xh , string $uri )
fd: Sets the base URI for all XSLT transformations, the base URI is used with Xpath instructions to resolve document() and other commands which access external resources. It is also used to resolve URIs for the <xsl:include> and <xsl:import> elements.
vi: PHP 4 >= 4.0.5
pt: XSLT
fn: xslt_set_encoding
fs: void xslt_set_encoding ( resource $xh , string $encoding )
fd: Set the output encoding for the XSLT transformations. When using the Sablotron backend, this option is only available when you compile Sablotron with encoding support.
vi: PHP 4 >= 4.0.5
pt: XSLT
fn: xslt_set_error_handler
fs: void xslt_set_error_handler ( resource $xh , mixed $handler )
fd: Set an error handler function for the XSLT processor given by xh, this function will be called whenever an error occurs in the XSLT transformation (this function is also called for notices).
vi: PHP 4 >= 4.0.4
pt: XSLT
fn: xslt_set_log
fs: void xslt_set_log ( resource $xh [, mixed $log ] )
fd: This function allows you to set the file in which you want XSLT log messages to, XSLT log messages are different than error messages, in that log messages are not actually error messages but rather messages related to the state of the XSLT processor. They are useful for debugging XSLT, when something goes wrong. 
vi: PHP 4 >= 4.0.6
pt: XSLT
fn: xslt_set_object
fs: bool xslt_set_object ( resource $processor , object &$obj )
fd: This function allows to use the processor inside an object and to resolve all callback functions in it. 
vi: PHP 4 >= 4.3.0
pt: XSLT
fn: xslt_set_sax_handler
fs: void xslt_set_sax_handler ( resource $xh , array $handlers )
fd: Set SAX handlers on the resource handle given by xh.
vi: PHP 4 >= 4.0.3
pt: XSLT
fn: xslt_set_sax_handlers
fs: void xslt_set_sax_handlers ( resource $processor , array $handlers )
fd: xslt_set_sax_handlers() registers the SAX handlers for the document, given a XSLT processor resource. 
vi: PHP 4 >= 4.0.6
pt: XSLT
fn: xslt_set_scheme_handler
fs: void xslt_set_scheme_handler ( resource $xh , array $handlers )
fd: Set Scheme handlers on the resource handle given by xh.
vi: PHP 4 >= 4.0.5
pt: XSLT
fn: xslt_set_scheme_handlers
fs: 
fd: 
vi: 
pt: 
fn: xslt_setopt
fs: mixed xslt_setopt ( resource $processor , int $newmask )
fd: xslt_setopt() sets the options specified by newmask on the given processor.
vi: PHP 4 >= 4.3.0
pt: XSLT
fn: yaz_addinfo
fs: string yaz_addinfo ( resource $id )
fd: Returns additional error information for the last request on the server. 
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_ccl_conf
fs: void yaz_ccl_conf ( resource $id , array $config )
fd: This function configures the CCL query parser for a server with definitions of access points (CCL qualifiers) and their mapping to RPN. 
vi: PHP 4 >= 4.0.5, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_ccl_parse
fs: bool yaz_ccl_parse ( resource $id , string $query , array &$result )
fd: This function invokes a CCL parser.
vi: PHP 4 >= 4.0.5, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_close
fs: bool yaz_close ( resource $id )
fd: Closes the connection given by parameter id. 
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_connect
fs: mixed yaz_connect ( string $zurl [, mixed $options ] )
fd: This function returns a connection resource on success, zero on failure. 
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_database
fs: bool yaz_database ( resource $id , string $databases )
fd: This function allows you to change databases within a session by specifying one or more databases to be used in search, retrieval, etc.
vi: PHP 4 >= 4.0.6, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_element
fs: bool yaz_element ( resource $id , string $elementset )
fd: This function sets the element set name for retrieval. 
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_errno
fs: int yaz_errno ( resource $id )
fd: Returns an error number for the server (last request) identified by id. 
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_error
fs: string yaz_error ( resource $id )
fd: 
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_es
fs: void yaz_es ( resource $id , string $type , array $args )
fd: This function prepares for an Extended Service Request. Extended Services is family of various Z39.50 facilities, such as Record Update, Item Order, Database administration etc. 
vi: PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_es_result
fs: array yaz_es_result ( resource $id )
fd: This function inspects the last returned Extended Service result from a server.
vi: PHP 4 >= 4.2.0, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_get_option
fs: string yaz_get_option ( resource $id , string $name )
fd: Returns the value of the option specified with name.
vi: PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_hits
fs: int yaz_hits ( resource $id [, array &$searchresult ] )
fd: yaz_hits() returns the number of hits for the last search.
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_itemorder
fs: void yaz_itemorder ( resource $id , array $args )
fd: This function prepares for an Extended Services request using the Profile for the Use of Z39.50 Item Order Extended Service to Transport ILL (Profile/1).
vi: PHP 4 >= 4.0.5, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_present
fs: bool yaz_present ( resource $id )
fd: This function prepares for retrieval of records after a successful search. 
vi: PHP 4 >= 4.0.5, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_range
fs: void yaz_range ( resource $id , int $start , int $number )
fd: Specifies a range of records to retrieve. 
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_record
fs: string yaz_record ( resource $id , int $pos , string $type )
fd: The yaz_record() function inspects a record in the current result set at the position specified by parameter pos.
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_scan
fs: void yaz_scan ( resource $id , string $type , string $startterm [, array $flags ] )
fd: This function prepares for a Z39.50 Scan Request on the specified connection. 
vi: PHP 4 >= 4.0.5, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_scan_result
fs: array yaz_scan_result ( resource $id [, array &$result ] )
fd: 
vi: PHP 4 >= 4.0.5, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_schema
fs: void yaz_schema ( resource $id , string $schema )
fd: yaz_schema() specifies the schema for retrieval. 
vi: PHP 4 >= 4.2.0, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_search
fs: bool yaz_search ( resource $id , string $type , string $query )
fd: yaz_search() prepares for a search on the given connection. 
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_set_option
fs: void yaz_set_option ( resource $id , string $name , string $value )
fd: 
vi: PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_sort
fs: void yaz_sort ( resource $id , string $criteria )
fd: This function sets sorting criteria and enables Z39.50 Sort. 
vi: PHP 4 >= 4.0.7, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_syntax
fs: void yaz_syntax ( resource $id , string $syntax )
fd: yaz_syntax() specifies the preferred record syntax for retrieval 
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yaz_wait
fs: mixed yaz_wait ([ array &$options ] )
fd: 
vi: PHP 4 >= 4.0.1, PECL yaz:0.9-1.0.9
pt: YAZ
fn: yp_all
fs: 
fd: 
vi: 
pt: 
fn: yp_cat
fs: array yp_cat ( string $domain , string $map )
fd: Returns all map entries.
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5
pt: YP/NIS
fn: yp_err_string
fs: string yp_err_string ( int $errorcode )
fd: Returns the error message associated with the given error code. Useful to indicate what exactly went wrong.
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5
pt: YP/NIS
fn: yp_errno
fs: int yp_errno ( void )
fd: Returns the error code of the previous operation.
vi: PHP 4 >= 4.0.6, PHP 5 <= 5.0.5
pt: YP/NIS
fn: yp_first
fs: array yp_first ( string $domain , string $map )
fd: Gets the first key-value pair from the named map in the named domain.
vi: PHP 4, PHP 5 <= 5.0.5
pt: YP/NIS
fn: yp_get_default_domain
fs: string yp_get_default_domain ( void )
fd: Returns the default domain of the node. Can be used as the domain parameter for successive NIS calls. 
vi: PHP 4, PHP 5 <= 5.0.5
pt: YP/NIS
fn: yp_master
fs: string yp_master ( string $domain , string $map )
fd: Returns the machine name of the master NIS server for a map.
vi: PHP 4, PHP 5 <= 5.0.5
pt: YP/NIS
fn: yp_match
fs: string yp_match ( string $domain , string $map , string $key )
fd: Returns the value associated with the passed key out of the specified map.
vi: PHP 4, PHP 5 <= 5.0.5
pt: YP/NIS
fn: yp_next
fs: array yp_next ( string $domain , string $map , string $key )
fd: Returns the next key-value pair in the named map after the specified key.
vi: PHP 4, PHP 5 <= 5.0.5
pt: YP/NIS
fn: yp_order
fs: int yp_order ( string $domain , string $map )
fd: Gets the order number for a map.
vi: PHP 4, PHP 5 <= 5.0.5
pt: YP/NIS
fn: zend_logo_guid
fs: string zend_logo_guid ( void )
fd: This function returns the ID which can be used to display the Zend logo using the built-in image.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: zend_thread_id
fs: int zend_thread_id ( void )
fd: This function returns an unique identifier for the current thread.
vi: PHP 5
pt: PHP Options&Information
fn: zend_version
fs: string zend_version ( void )
fd: Returns a string containing the version of the currently running Zend Engine.
vi: PHP 4, PHP 5
pt: PHP Options&Information
fn: zip_close
fs: void zip_close ( resource $zip )
fd: Closes the given ZIP file archive.
vi: PHP 4 >= 4.0.7, PHP 5 >= 5.2.0, PECL zip:1.0-1.9.0
pt: Zip File
fn: zip_entry_close
fs: bool zip_entry_close ( resource $zip_entry )
fd: Closes the specified directory entry.
vi: PHP 4 >= 4.0.7, PHP 5 >= 5.2.0, PECL zip:1.0-1.9.0
pt: Zip File
fn: zip_entry_compressedsize
fs: int zip_entry_compressedsize ( resource $zip_entry )
fd: Returns the compressed size of the specified directory entry.
vi: PHP 4 >= 4.0.7, PHP 5 >= 5.2.0, PECL zip:1.0-1.9.0
pt: Zip File
fn: zip_entry_compressionmethod
fs: string zip_entry_compressionmethod ( resource $zip_entry )
fd: Returns the compression method of the directory entry specified by zip_entry.
vi: PHP 4 >= 4.0.7, PHP 5 >= 5.2.0, PECL zip:1.0-1.9.0
pt: Zip File
fn: zip_entry_filesize
fs: int zip_entry_filesize ( resource $zip_entry )
fd: Returns the actual size of the specified directory entry.
vi: PHP 4 >= 4.0.7, PHP 5 >= 5.2.0, PECL zip:1.0-1.9.0
pt: Zip File
fn: zip_entry_name
fs: string zip_entry_name ( resource $zip_entry )
fd: Returns the name of the specified directory entry.
vi: PHP 4 >= 4.0.7, PHP 5 >= 5.2.0, PECL zip:1.0-1.9.0
pt: Zip File
fn: zip_entry_open
fs: bool zip_entry_open ( resource $zip , resource $zip_entry [, string $mode ] )
fd: Opens a directory entry in a zip file for reading.
vi: PHP 4 >= 4.0.7, PHP 5 >= 5.2.0, PECL zip:1.0-1.9.0
pt: Zip File
fn: zip_entry_read
fs: string zip_entry_read ( resource $zip_entry [, int $length ] )
fd: Reads from an open directory entry.
vi: PHP 4 >= 4.0.7, PHP 5 >= 5.2.0, PECL zip:1.0-1.9.0
pt: Zip File
fn: zip_open
fs: mixed zip_open ( string $filename )
fd: Opens a new zip archive for reading.
vi: PHP 4 >= 4.0.7, PHP 5 >= 5.2.0, PECL zip:1.0-1.9.0
pt: Zip File
fn: zip_read
fs: mixed zip_read ( resource $zip )
fd: Reads the next entry in a zip file archive.
vi: PHP 4 >= 4.0.7, PHP 5 >= 5.2.0, PECL zip:1.0-1.9.0
pt: Zip File
fn: ziparchive_addemptydir
fs: bool ZipArchive::addEmptyDir ( string $dirname )
fd: Adds an empty directory in the archive.
vi: 
pt: Zip File
fn: ziparchive_addfile
fs: bool ZipArchive::addFile ( string $filename [, string $localname ] )
fd: Adds a file to a ZIP archive from a given path
vi: 
pt: Zip File
fn: ziparchive_addfromstring
fs: bool ZipArchive::addFromString ( string $localname , string $contents )
fd: Add a file to a ZIP archive using its contents.
vi: 
pt: Zip File
fn: ziparchive_close
fs: bool ZipArchive::close ( void )
fd: Close opened or created archive and save changes. This method is automatically called at the end of the script.
vi: 
pt: Zip File
fn: ziparchive_deleteindex
fs: bool ZipArchive::deleteIndex ( int $index )
fd: Delete an entry in the archive using its index.
vi: 
pt: Zip File
fn: ziparchive_deletename
fs: bool ZipArchive::deleteName ( string $name )
fd: Delete an entry in the archive using its name.
vi: 
pt: Zip File
fn: ziparchive_extractto
fs: mixed ZipArchive::extractTo ( string $destination [, mixed $entries ] )
fd: Extract the complete archive or the given files to the specified destination.
vi: 
pt: Zip File
fn: ziparchive_getarchivecomment
fs: string ZipArchive::getArchiveComment ( void )
fd: Returns the Zip archive comment.
vi: 
pt: Zip File
fn: ziparchive_getcommentindex
fs: string ZipArchive::getCommentIndex ( int $index [, int $flags ] )
fd: Returns the comment of an entry using the entry index.
vi: 
pt: Zip File
fn: ziparchive_getcommentname
fs: string ZipArchive::getCommentName ( string $name [, int $flags ] )
fd: Returns the comment of an entry using the entry name.
vi: 
pt: Zip File
fn: ziparchive_getfromindex
fs: mixed ZipArchive::getFromIndex ( int $index [, int $flags ] )
fd: Returns the entry contents using its index.
vi: 
pt: Zip File
fn: ziparchive_getfromname
fs: mixed ZipArchive::getFromName ( string $name [, int $flags ] )
fd: Returns the entry contents using its name.
vi: 
pt: Zip File
fn: ziparchive_getnameindex
fs: string ZipArchive::getNameIndex ( int $index )
fd: Returns the name of an entry using its index.
vi: 
pt: Zip File
fn: ziparchive_getstream
fs: resource ZipArchive::getStream ( string $name )
fd: Get a file handler to the entry defined by its name. For now it only supports read operations.
vi: 
pt: Zip File
fn: ziparchive_locatename
fs: mixed ZipArchive::locateName ( string $name [, int $flags ] )
fd: Locates an entry using its name.
vi: 
pt: Zip File
fn: ziparchive_open
fs: mixed ZipArchive::open ( string $filename [, int $flags ] )
fd: Opens a new zip archive for reading, writing or modifying.
vi: 
pt: Zip File
fn: ziparchive_renameindex
fs: bool ZipArchive::renameIndex ( int $index , string $newname )
fd: Renames an entry defined by its index.
vi: 
pt: Zip File
fn: ziparchive_renamename
fs: bool ZipArchive::renameName ( string $name , string $newname )
fd: Renames an entry defined by its index.
vi: 
pt: Zip File
fn: ziparchive_setCommentName
fs: mixed ZipArchive::setCommentName ( string $name , string $comment )
fd: Set the comment of an entry defined by its name.
vi: 
pt: Zip File
fn: ziparchive_setarchivecomment
fs: mixed ZipArchive::setArchiveComment ( string $comment )
fd: Set the comment of a ZIP archive.
vi: 
pt: Zip File
fn: ziparchive_setcommentindex
fs: mixed ZipArchive::setCommentIndex ( int $index , string $comment )
fd: Set the comment of an entry defined by its index.
vi: 
pt: Zip File
fn: ziparchive_statindex
fs: mixed ZipArchive::statIndex ( int $index [, int $flags ] )
fd: The function obtains information about the entry defined by its index.
vi: 
pt: Zip File
fn: ziparchive_statname
fs: mixed ZipArchive::statName ( name $name [, int $flags ] )
fd: The function obtains information about the entry defined by its name.
vi: 
pt: Zip File
fn: ziparchive_unchangeall
fs: mixed ZipArchive::unchangeAll ( void )
fd: Undo all changes done in the archive.
vi: 
pt: Zip File
fn: ziparchive_unchangearchive
fs: mixed ZipArchive::unchangeArchive ( void )
fd: Revert all global changes to the archive archive. For now, this only reverts archive comment changes.
vi: 
pt: Zip File
fn: ziparchive_unchangeindex
fs: mixed ZipArchive::unchangeIndex ( int $index )
fd: Revert all changes done to an entry at the given index.
vi: 
pt: Zip File
fn: ziparchive_unchangename
fs: mixed ZipArchive::unchangeName ( string $name )
fd: Revert all changes done to an entry.
vi: 
pt: Zip File
fn: zlib_get_coding_type
fs: string zlib_get_coding_type ( void )
fd: Returns the coding type used for output compression.
vi: PHP 4 >= 4.3.2, PHP 5
pt: Zlib Compression